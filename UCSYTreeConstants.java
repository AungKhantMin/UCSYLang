/* Generated By:JJTree: Do not edit this line. .\UCSYTreeConstants.java */

public interface UCSYTreeConstants
{
  public int JJTVOID = 0;
  public int JJTSTART = 1;
  public int JJTPACKAGEDECLARATION = 2;
  public int JJTIMPORTDECLARATION = 3;
  public int JJTTYPEDECLARATION = 4;
  public int JJTCLASSDECLARATION = 5;
  public int JJTCLASSHEADER = 6;
  public int JJTIMPLEMENTSCLAUSE = 7;
  public int JJTIDENTIFIER = 8;
  public int JJTCONFORMSCLAUSE = 9;
  public int JJTINHERITSCLAUSE = 10;
  public int JJTADAPTSCLAUSE = 11;
  public int JJTSIGNATURETOCALL = 12;
  public int JJTCLASSMODIFIER = 13;
  public int JJTCLASSBODY = 14;
  public int JJTFREECLASSDECLARATION = 15;
  public int JJTFREECLASSHEADER = 16;
  public int JJTFREECLASSBODY = 17;
  public int JJTMEMBERDECLARATION = 18;
  public int JJTFUNCTORDECLARATION = 19;
  public int JJTINTERFACEDECLARATION = 20;
  public int JJTINTERFACEHEADER = 21;
  public int JJTINTERFACEBODY = 22;
  public int JJTINTERFACEMETHODDECLARATION = 23;
  public int JJTMETACLASSDECLARATION = 24;
  public int JJTINTERFACEMETHODHEADER = 25;
  public int JJTABSTRACTMETHODDECLARATION = 26;
  public int JJTMETACLASSHEADER = 27;
  public int JJTMETACLASSBODY = 28;
  public int JJTABSTRACTCONSTRUCTOR = 29;
  public int JJTACCESSMODIFIER = 30;
  public int JJTMETHODMODIFIER = 31;
  public int JJTFIELDMODIFIER = 32;
  public int JJTCONSTRUCTORDECLARATION = 33;
  public int JJTEXPLICITCONSTRUCTORCALL = 34;
  public int JJTFIELDDECLARATION = 35;
  public int JJTNORMALFIELDDECLARATION = 36;
  public int JJTDELEGATEDECLARATION = 37;
  public int JJTHANDLEALLCLAUSE = 38;
  public int JJTFORWARDSCLAUSE = 39;
  public int JJTDECORATESCLAUSE = 40;
  public int JJTBEFORECALLORAFTERCALL = 41;
  public int JJTAFTERCALL = 42;
  public int JJTBEFORECALL = 43;
  public int JJTMETHODSIGNATURE = 44;
  public int JJTMETHODCALL = 45;
  public int JJTVARIABLEDECLARATOR = 46;
  public int JJTVARIABLEDECLARATORID = 47;
  public int JJTVARIABLEINITIALIZER = 48;
  public int JJTARRAYINITIALIZER = 49;
  public int JJTMETHODDECLARATION = 50;
  public int JJTMETHODHEADER = 51;
  public int JJTFORMALPARAMETERS = 52;
  public int JJTFORMALPARAMETER = 53;
  public int JJTRETURNTYPE = 54;
  public int JJTVOIDTYPE = 55;
  public int JJTTYPE = 56;
  public int JJTPRIMITIVETYPE = 57;
  public int JJTREFERENCETYPE = 58;
  public int JJTMETAINSTANCETYPE = 59;
  public int JJTCLASSTYPE = 60;
  public int JJTARRAYTYPE = 61;
  public int JJTEXPRESSION = 62;
  public int JJTORNODE = 63;
  public int JJTANDNODE = 64;
  public int JJTEQUALNODE = 65;
  public int JJTNOTEQUALNODE = 66;
  public int JJTINSTANCEOFEXPRESSION = 67;
  public int JJTGTNODE = 68;
  public int JJTGTEQUALNODE = 69;
  public int JJTLTNODE = 70;
  public int JJTLTEQUALNODE = 71;
  public int JJTPLUSNODE = 72;
  public int JJTSUBTRACTNODE = 73;
  public int JJTMULTIPLYNODE = 74;
  public int JJTDIVSIONNODE = 75;
  public int JJTMODULUSNODE = 76;
  public int JJTUNARYPLUSNODE = 77;
  public int JJTUNARYMINUSNODE = 78;
  public int JJTNOTNODE = 79;
  public int JJTCASTNODE = 80;
  public int JJTCASTEXPRESSION = 81;
  public int JJTPRIMARYEXPRESSION = 82;
  public int JJTPRIMARYSUFFIX = 83;
  public int JJTNAMEPRIMARYPREFIX = 84;
  public int JJTLITERALPRIMARYPREFIX = 85;
  public int JJTTHISPRIMARYPREFIX = 86;
  public int JJTSUPERPRIMARYPREFIX = 87;
  public int JJTPARENTHESEPRIMARYPREFIX = 88;
  public int JJTALLOCATIONPRIMARYPREFIX = 89;
  public int JJTARRAYEXPRESSIONPRIMARYSUFFIX = 90;
  public int JJTSUFFIXDOTIDENTIFIERNODE = 91;
  public int JJTARGUMENTSSUFFIX = 92;
  public int JJTNAME = 93;
  public int JJTINTEGERLITERAL = 94;
  public int JJTFLOATLITERAL = 95;
  public int JJTCHARLITERAL = 96;
  public int JJTSTRINGLITERAL = 97;
  public int JJTDOUBLELITERAL = 98;
  public int JJTLONGLITERAL = 99;
  public int JJTBOOLEANLITERAL = 100;
  public int JJTNULLLITERAL = 101;
  public int JJTALLOCATIONEXPRESSION = 102;
  public int JJTARRAYALLOCATION = 103;
  public int JJTINSTANCEARRAYALLOCATION = 104;
  public int JJTDIMENSIONPARAMETER = 105;
  public int JJTPRIMITIVEARRAYALLOCATION = 106;
  public int JJTINSTANCEALLOCATION = 107;
  public int JJTARGUMENTS = 108;
  public int JJTARGUMENTSLIST = 109;
  public int JJTSTATEMENT = 110;
  public int JJTLABELSTATEMENT = 111;
  public int JJTBREAKSTATEMENT = 112;
  public int JJTEXECUTETIMESSTATEMENT = 113;
  public int JJTMETHODCALLSTATEMENT = 114;
  public int JJTASSIGNMENTSTATEMENT = 115;
  public int JJTASSIGNMENTOPERATOR = 116;
  public int JJTBLOCK = 117;
  public int JJTEMPTYSTATEMENT = 118;
  public int JJTSWITCHSTATEMENT = 119;
  public int JJTCASESTATEMENT = 120;
  public int JJTCASEEXPRESSION = 121;
  public int JJTCASEIDENTIFIER = 122;
  public int JJTDEFAULTSTATEMENT = 123;
  public int JJTIFSTATEMENT = 124;
  public int JJTWHILESTATEMENT = 125;
  public int JJTDOSTATEMENT = 126;
  public int JJTFORSTATEMENT = 127;
  public int JJTFORINITIALIZER = 128;
  public int JJTFOREXPRESSION = 129;
  public int JJTFORUPDATOR = 130;
  public int JJTFORINIT = 131;
  public int JJTLOCALVARIABLEDECLARATION = 132;
  public int JJTFORUPDATE = 133;
  public int JJTRETURNSTATEMENT = 134;
  public int JJTCONTINUESTATEMENT = 135;
  public int JJTTRYSTATEMENT = 136;
  public int JJTCATCHSTATEMENT = 137;
  public int JJTTHROWSTATEMENT = 138;
  public int JJTREBINDSTATEMENT = 139;


  public String[] jjtNodeName = {
    "void",
    "Start",
    "PackageDeclaration",
    "ImportDeclaration",
    "TypeDeclaration",
    "ClassDeclaration",
    "ClassHeader",
    "ImplementsClause",
    "Identifier",
    "ConformsClause",
    "InheritsClause",
    "AdaptsClause",
    "SignatureToCall",
    "ClassModifier",
    "ClassBody",
    "FreeClassDeclaration",
    "FreeClassHeader",
    "FreeClassBody",
    "MemberDeclaration",
    "FunctorDeclaration",
    "InterfaceDeclaration",
    "InterfaceHeader",
    "InterfaceBody",
    "InterfaceMethodDeclaration",
    "MetaClassDeclaration",
    "InterfaceMethodHeader",
    "AbstractMethodDeclaration",
    "MetaClassHeader",
    "MetaClassBody",
    "AbstractConstructor",
    "AccessModifier",
    "MethodModifier",
    "FieldModifier",
    "ConstructorDeclaration",
    "ExplicitConstructorCall",
    "FieldDeclaration",
    "NormalFieldDeclaration",
    "DelegateDeclaration",
    "HandleAllClause",
    "ForwardsClause",
    "DecoratesClause",
    "BeforeCallOrAfterCall",
    "AfterCall",
    "BeforeCall",
    "MethodSignature",
    "MethodCall",
    "VariableDeclarator",
    "VariableDeclaratorId",
    "VariableInitializer",
    "ArrayInitializer",
    "MethodDeclaration",
    "MethodHeader",
    "FormalParameters",
    "FormalParameter",
    "ReturnType",
    "VoidType",
    "Type",
    "PrimitiveType",
    "ReferenceType",
    "MetaInstanceType",
    "ClassType",
    "ArrayType",
    "Expression",
    "OrNode",
    "AndNode",
    "EqualNode",
    "NotEqualNode",
    "InstanceOfExpression",
    "GTNode",
    "GTEqualNode",
    "LTNode",
    "LTEqualNode",
    "PlusNode",
    "SubtractNode",
    "MultiplyNode",
    "DivsionNode",
    "ModulusNode",
    "UnaryPlusNode",
    "UnaryMinusNode",
    "NotNode",
    "CastNode",
    "CastExpression",
    "PrimaryExpression",
    "PrimarySuffix",
    "NamePrimaryPrefix",
    "LiteralPrimaryPrefix",
    "ThisPrimaryPrefix",
    "SuperPrimaryPrefix",
    "ParenthesePrimaryPrefix",
    "AllocationPrimaryPrefix",
    "ArrayExpressionPrimarySuffix",
    "SuffixDotIdentifierNode",
    "ArgumentsSuffix",
    "Name",
    "IntegerLiteral",
    "FloatLiteral",
    "CharLiteral",
    "StringLiteral",
    "DoubleLiteral",
    "LongLiteral",
    "BooleanLiteral",
    "NullLiteral",
    "AllocationExpression",
    "ArrayAllocation",
    "InstanceArrayAllocation",
    "DimensionParameter",
    "PrimitiveArrayAllocation",
    "InstanceAllocation",
    "Arguments",
    "ArgumentsList",
    "Statement",
    "LabelStatement",
    "BreakStatement",
    "ExecuteTimesStatement",
    "MethodCallStatement",
    "AssignmentStatement",
    "AssignmentOperator",
    "Block",
    "EmptyStatement",
    "SwitchStatement",
    "CaseStatement",
    "CaseExpression",
    "CaseIdentifier",
    "DefaultStatement",
    "IfStatement",
    "WhileStatement",
    "DoStatement",
    "ForStatement",
    "ForInitializer",
    "ForExpression",
    "ForUpdator",
    "ForInit",
    "LocalVariableDeclaration",
    "ForUpdate",
    "ReturnStatement",
    "ContinueStatement",
    "TryStatement",
    "CatchStatement",
    "ThrowStatement",
    "RebindStatement",
  };
}
