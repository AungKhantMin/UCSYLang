/* Generated By:JJTree&JavaCC: Do not edit this line. UCSY.java */
import java.io.*;
import java.io.*;
import javax.swing.*;
import javax.swing.event.*;
import javax.swing.tree.*;
import java.awt.*;
import java.util.*;
import javax.swing.text.*;
public class UCSY/*@bgen(jjtree)*/implements UCSYTreeConstants, UCSYConstants {/*@bgen(jjtree)*/
  protected JJTUCSYState jjtree = new JJTUCSYState();static MutableAttributeSet PLAIN = new SimpleAttributeSet();
        static JEditorPane compileOutput;
        boolean syntaxError = false;
        boolean staticSemanticError = false;
        int syntaxErrorCount = 0;
        int staticSemanticErrorCount = 0;
                public static void main(String[]args)throws Exception
                {
                        try
                {

             UIManager.setLookAndFeel("com.birosoft.liquid.LiquidLookAndFeel");
            } catch (Exception e)
                {

                }
                        UCSY parser;
                        parser = new UCSY(new FileInputStream(args[0]));
                        parser.compile();

                }

  void compile() throws ParseException {
        ASTStart root = Start();
        ParseTree guiTree = new ParseTree();
        guiTree.display(root);
        Debug.parser = this;

        if(!syntaxError)
        {

                TypeAnalysisVisitor collectTypeInfoVisitor = new TypeAnalysisVisitor(this);
                root.jjtAccept( collectTypeInfoVisitor,root);
                TypeCheckVisitor typeCheckVisitor = new TypeCheckVisitor(this);
                root.jjtAccept( typeCheckVisitor, root );
                CommonInheritedAttribute.parser = this;
        }

        if(successFullyCompiled())
        {
                inform("Congrulation:program compiled successfully");
                SymbolTable.reset();
                CodeGenerator.parser = this;
                CommonInheritedAttribute.parser = this;
                CodeGenerationVisitor codeGen = new CodeGenerationVisitor(this);
                root.jjtAccept( codeGen, root );
        }
        else
        {
                inform((syntaxErrorCount+ staticSemanticErrorCount) + " errors ");
        }
  }

  boolean successFullyCompiled() throws ParseException {
        return !syntaxError && !staticSemanticError;
  }

  void skipBefore(int kind) throws ParseException {
        Token t;
        while((t = getToken(1)).kind != kind && t.kind!=0)
        {
         getNextToken();
        //jj_consume_token(t.kind);
        //inform("That is skip before");
        }
  }

  void skipBeforeSet(int []kindArray) throws ParseException {
        Token t;
        boolean exit = false;
        while(!exit)
        {
                t = getToken(1);

                for(int i=0;i<kindArray.length;i++)
                {
                        if(t.kind == kindArray[i])
                        {
                                exit = true;
                                return;
                        }
                        if(t.kind==0)
                                return;
                }
                getNextToken();
        }
  }

  void skipto(int kind) throws ParseException {
  Token t;
  do
  {
    t = getNextToken();
    //System.out.println ("GOOOO");
    if(t.kind ==0)
        return;
  } while (t.kind != kind  );
  }

  void skiptoSet(int arr[]) throws ParseException {
        Token t;
        boolean exit = false;
        while(!exit)
        {
                t = getNextToken();
                for(int i=0;i<arr.length;i++)
                {
                        if(t.kind == arr[i])
                                return;
                        if(t.kind == 0)
                                return;
                }
        }
  }

  void skiptoOrEndOfLine(int kind) throws ParseException {
  Token t;
  Token original = getToken(0);
  do
  {
    t = getNextToken();
    if(t.beginLine > original.beginLine)
        return;

  } while (t.kind != kind && t.kind != 0 );
  }

  void setCompileOutput(JEditorPane compile) throws ParseException {
        compileOutput = compile ;
  }

  void error(String s) throws ParseException {
                Token t = getToken(0);
                int line = t.beginLine;
                int col = t.beginColumn;
                syntaxError = true ;
                syntaxErrorCount ++;
                if(compileOutput == null)
                System.out.println ("Error at line : " + line+" Col: "+col+" "+s);
        else
        {
                try
                {
                compileOutput.getDocument().insertString(compileOutput.getDocument().getLength(),"Error at line : " + line+" Col: "+col+" "+s+"\n",PLAIN);
                //compileOutput.setText("Error at line : " + line+" Col: "+col+" "+s);
                }
                catch(Exception e)
                {
                }

        }
  }

  void inform(String s) throws ParseException {
        if(compileOutput == null)
        {
                System.out.println ( s );
        }
        else
        {

                try
        {
                compileOutput.getDocument().insertString(compileOutput.getDocument().getLength(),s+"\n",PLAIN);
                //compileOutput.setText("Error at line : " + line+" Col: "+col+" "+s);
        }
        catch(Exception e)
        {
        }
        }
  }

  void reportSSError(int line,String s) throws ParseException {
        staticSemanticError = true;
        staticSemanticErrorCount ++;
        if(compileOutput == null)
        {
                System.out.println ("Error at line "+line+" " +s);
        }
        else
        {

                try
        {
                compileOutput.getDocument().insertString(compileOutput.getDocument().getLength(),"Error at line "+ line+" " +s+"\n",PLAIN);
                //compileOutput.setText("Error at line : " + line+" Col: "+col+" "+s);
        }
        catch(Exception e)
        {
        }
        }
  }

  int getTokenDistance(int kind) throws ParseException {
        int length = 0;
        Token t ;

        while(((t = getToken(++length)).kind != kind) )
        {
                ///System.out.println ("Token image "+t.image);
                if(t.kind == 0)
                {
                        length = 214748364;
                        return length;
                }

        }
        return length;
  }

  int getTokenDistanceSet(int []kindArray) throws ParseException {
        int length = 0 ;
        Token t;


        boolean found = false;
        while(!found)
        {
                t = getToken(++length);

                for(int i=0;i<kindArray.length;i++)
                {
                        if(t.kind == kindArray[i])
                                found =true;
                        if(t.kind ==0 )
                                return 214748364;
                }

        }
        return length;
  }

  final public ASTStart Start() throws ParseException {
 /*@bgen(jjtree) Start */
        ASTStart jjtn000 = new ASTStart(JJTSTART);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);ASTTypeDeclaration typeDecl;
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PACKAGE:
          PackageDeclaration();
          break;
        default:
          jj_la1[0] = jj_gen;
          ;
        }
        label_1:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IMPORT:
            ;
            break;
          default:
            jj_la1[1] = jj_gen;
            break label_1;
          }
          ImportDeclaration();
        }
        label_2:
        while (true) {
          typeDecl = TypeDeclaration();
                                      jjtn000.addTypeDeclaration(typeDecl);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CLASS:
          case FINAL:
          case SINGLETON:
          case META:
          case FUNCTOR:
          case INTERFACE:
          case ABSTRACT:
          case FREE:
            ;
            break;
          default:
            jj_la1[2] = jj_gen;
            break label_2;
          }
        }
      } catch (ParseException e) {
                error(" class,interface,meta class declaration or functor declaration excepted");
      }
         {if (true) return jjtn000;}
      jj_consume_token(0);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public void PackageDeclaration() throws ParseException {
 /*@bgen(jjtree) PackageDeclaration */
  ASTPackageDeclaration jjtn000 = new ASTPackageDeclaration(JJTPACKAGEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      try {
        jj_consume_token(PACKAGE);
        Name();
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DOT:
            ;
            break;
          default:
            jj_la1[3] = jj_gen;
            break label_3;
          }
          jj_consume_token(DOT);
          Name();
        }
        jj_consume_token(SEMICOLON);
      } catch (ParseException e) {
                error (" ivalid package declaration");
                int lookAhead1[] = {IMPORT,CLASS,FINAL,SINGLETON,META,FUNCTOR,INTERFACE,ABSTRACT,FREE};

                skipBeforeSet(lookAhead1);

                //Error Revovery
                label_1:
        while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IMPORT:
                ;
        break;
        default:
        jj_la1[1] = jj_gen;
        break label_1;
        }
      ImportDeclaration();
      }
      label_2:
      while (true)
      {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk)
        {
        case CLASS:
        case FINAL:
        case SINGLETON:
        case META:
        case FUNCTOR:
        case INTERFACE:
        case ABSTRACT:
        case FREE:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        TypeDeclaration();

      }
      jj_consume_token(0);
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void ImportDeclaration() throws ParseException {
 /*@bgen(jjtree) ImportDeclaration */
  ASTImportDeclaration jjtn000 = new ASTImportDeclaration(JJTIMPORTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      try {
        jj_consume_token(IMPORT);
        Name();
        label_4:
        while (true) {
          if (jj_2_1(2)) {
            ;
          } else {
            break label_4;
          }
          jj_consume_token(DOT);
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOT:
          jj_consume_token(DOT);
          jj_consume_token(MUL);
          break;
        default:
          jj_la1[4] = jj_gen;
          ;
        }
        jj_consume_token(SEMICOLON);
      } catch (ParseException e) {
                error(" invalid import declaration ");

                int lookAhead2[] = {CLASS,FINAL,SINGLETON,META,FUNCTOR,INTERFACE,ABSTRACT,FREE};
                skipBeforeSet(lookAhead2);

                label_2:
        while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CLASS:
        case FINAL:
        case SINGLETON:
        case META:
        case FUNCTOR:
        case INTERFACE:
        case ABSTRACT:
        case FREE:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        TypeDeclaration();
      }
      jj_consume_token(0);
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public ASTTypeDeclaration TypeDeclaration() throws ParseException {
 /*@bgen(jjtree) TypeDeclaration */
  ASTTypeDeclaration jjtn000 = new ASTTypeDeclaration(JJTTYPEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
      case FINAL:
      case SINGLETON:
      case ABSTRACT:
        jjtn000.typeDeclaration = ClassDeclaration();
        break;
      case INTERFACE:
        jjtn000.typeDeclaration = InterfaceDeclaration();
        break;
      case META:
        jjtn000.typeDeclaration = MetaClassDeclaration();
        break;
      case FREE:
        jjtn000.typeDeclaration = FreeClassDeclaration();
        break;
      case FUNCTOR:
        jjtn000.typeDeclaration = FunctorDeclaration();
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTClassDeclaration ClassDeclaration() throws ParseException {
 /*@bgen(jjtree) ClassDeclaration */
 ASTClassDeclaration jjtn000 = new ASTClassDeclaration(JJTCLASSDECLARATION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t=null;
    try {
      try {
        jjtn000.classHeader = ClassHeader();
      } catch (ParseException e) {
                error(" Invalid class header declaration");
                skipBefore(LBRACE);
      }
      jjtn000.classBody = ClassBody();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTClassHeader ClassHeader() throws ParseException {
 /*@bgen(jjtree) ClassHeader */
 ASTClassHeader jjtn000 = new ASTClassHeader(JJTCLASSHEADER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FINAL:
      case SINGLETON:
      case ABSTRACT:
        jjtn000.classModifier = ClassModifier();
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      jj_consume_token(CLASS);
      jjtn000.t = jj_consume_token(IDENTIFIER);
                                                                                     jjtn000.className = jjtn000.t.image;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADAPTS:
      case INHERITS:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INHERITS:
          jjtn000.inheritsClause = InheritsClause();
          break;
        case ADAPTS:
          jjtn000.adaptsClause = AdaptsClause();
          break;
        default:
          jj_la1[7] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPLEMENTS:
        jjtn000.implementsClause = ImplementsClause();
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONFORMS:
        jjtn000.conformsClause = ConformsClause();
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
          {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
    } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTImplementsClause ImplementsClause() throws ParseException {
 /*@bgen(jjtree) ImplementsClause */
ASTImplementsClause jjtn000 = new ASTImplementsClause(JJTIMPLEMENTSCLAUSE);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);ASTIdentifier id;
    try {
      jj_consume_token(IMPLEMENTS);
      id = Identifier();
                                        jjtn000.identifierList.add(id);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_5;
        }
        jj_consume_token(COMMA);
        id = Identifier();
                                                                                                  jjtn000.identifierList.add(id);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTIdentifier Identifier() throws ParseException {
 /*@bgen(jjtree) Identifier */
        ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      jjtn000.t = jj_consume_token(IDENTIFIER);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTConformsClause ConformsClause() throws ParseException {
 /*@bgen(jjtree) ConformsClause */
        ASTConformsClause jjtn000 = new ASTConformsClause(JJTCONFORMSCLAUSE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);ASTIdentifier id;
    try {
      jj_consume_token(CONFORMS);
      id = Identifier();
                                      jjtn000.conformsIdentifier.add(id);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_6;
        }
        jj_consume_token(COMMA);
        id = Identifier();
                                                                                                    jjtn000.conformsIdentifier.add(id);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTInheritsClause InheritsClause() throws ParseException {
 /*@bgen(jjtree) InheritsClause */
  ASTInheritsClause jjtn000 = new ASTInheritsClause(JJTINHERITSCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(INHERITS);
      jjtn000.identifier = Identifier();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
    } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTAdaptsClause AdaptsClause() throws ParseException {
 /*@bgen(jjtree) AdaptsClause */
        ASTAdaptsClause jjtn000 = new ASTAdaptsClause(JJTADAPTSCLAUSE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);ASTSignatureToCall sToCall ;
    try {
      try {
        jj_consume_token(ADAPTS);
        jjtn000.identifierInterface = Identifier();
        jj_consume_token(WITH);
        jjtn000.identifierClass = Identifier();
        sToCall = SignatureToCall();
                                                                                                                                       jjtn000.signatureToCall.add(sToCall);
        label_7:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[13] = jj_gen;
            break label_7;
          }
          jj_consume_token(COMMA);
          sToCall = SignatureToCall();
                                                                                                                                                                                                                 jjtn000.signatureToCall.add(sToCall);
        }
      } catch (ParseException e) {
                error(" malform adapts clause in class declaration");
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTSignatureToCall SignatureToCall() throws ParseException {
 /*@bgen(jjtree) SignatureToCall */
  ASTSignatureToCall jjtn000 = new ASTSignatureToCall(JJTSIGNATURETOCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jjtn000.signature = MethodSignature();
      jj_consume_token(TO);
      jjtn000.methodCall = MethodCall();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTClassModifier ClassModifier() throws ParseException {
 /*@bgen(jjtree) ClassModifier */
  ASTClassModifier jjtn000 = new ASTClassModifier(JJTCLASSMODIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FINAL:
        jj_consume_token(FINAL);
                   jjtn000.modifier    |= UCSYClassAttribute.FINAL ;
        break;
      case ABSTRACT:
        jj_consume_token(ABSTRACT);
                     jjtn000.modifier  |= UCSYClassAttribute.ABSTRACT;
        break;
      case SINGLETON:
        jj_consume_token(SINGLETON);
                      jjtn000.modifier |= UCSYClassAttribute.SINGLETON;
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTClassBody ClassBody() throws ParseException {
 /*@bgen(jjtree) ClassBody */
 ASTClassBody jjtn000 = new ASTClassBody(JJTCLASSBODY);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);ASTMemberDeclaration m;
    try {
      jj_consume_token(LBRACE);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case CHAR:
        case INTEGER:
        case FLOAT:
        case DOUBLE:
        case VOID:
        case BYTE:
        case SHORT:
        case LONG:
        case PUBLIC:
        case PRIVATE:
        case PROTECTED:
        case INTERNAL:
        case NATIVE:
        case STATIC:
        case STRING:
        case FINAL:
        case DELEGATE:
        case FUNCTOR:
        case REBINDABLE:
        case OVERRIDE:
        case ABSTRACT:
        case MULTI:
        case IDENTIFIER:
        case AT:
          ;
          break;
        default:
          jj_la1[15] = jj_gen;
          break label_8;
        }
        m = MemberDeclaration();
                                  jjtn000.member.add(m);
      }
      jj_consume_token(RBRACE);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTFreeClassDeclaration FreeClassDeclaration() throws ParseException {
 /*@bgen(jjtree) FreeClassDeclaration */
  ASTFreeClassDeclaration jjtn000 = new ASTFreeClassDeclaration(JJTFREECLASSDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      try {
        jjtn000.freeClassHeader = FreeClassHeader();
      } catch (ParseException e) {
                error("Invalid free class header declaration");
                skipBefore(LBRACE);
      }
      jjtn000.freeClassBody = FreeClassBody();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTFreeClassHeader FreeClassHeader() throws ParseException {
 /*@bgen(jjtree) FreeClassHeader */
 ASTFreeClassHeader jjtn000 = new ASTFreeClassHeader(JJTFREECLASSHEADER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token f,p;
    try {
      jj_consume_token(FREE);
      jj_consume_token(CLASS);
      f = jj_consume_token(IDENTIFIER);
                                      jjtn000.freeClassToken = f;
      jj_consume_token(OF);
      p = jj_consume_token(IDENTIFIER);
                                                                                       jjtn000.parentClassToken = p;
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTFreeClassBody FreeClassBody() throws ParseException {
 /*@bgen(jjtree) FreeClassBody */
        ASTFreeClassBody jjtn000 = new ASTFreeClassBody(JJTFREECLASSBODY);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);ASTMethodDeclaration m;
    try {
      jj_consume_token(LBRACE);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PUBLIC:
        case PRIVATE:
        case PROTECTED:
        case INTERNAL:
          AccessModifier();
          break;
        default:
          jj_la1[16] = jj_gen;
          ;
        }
        m = MethodDeclaration();
                                                       jjtn000.methodDeclarationList.add(m);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case CHAR:
        case INTEGER:
        case FLOAT:
        case DOUBLE:
        case VOID:
        case BYTE:
        case SHORT:
        case LONG:
        case PUBLIC:
        case PRIVATE:
        case PROTECTED:
        case INTERNAL:
        case NATIVE:
        case STATIC:
        case STRING:
        case FINAL:
        case REBINDABLE:
        case OVERRIDE:
        case ABSTRACT:
        case MULTI:
        case IDENTIFIER:
        case AT:
          ;
          break;
        default:
          jj_la1[17] = jj_gen;
          break label_9;
        }
      }
      jj_consume_token(RBRACE);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTMemberDeclaration MemberDeclaration() throws ParseException {
 /*@bgen(jjtree) MemberDeclaration */
  ASTMemberDeclaration jjtn000 = new ASTMemberDeclaration(JJTMEMBERDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
      case PRIVATE:
      case PROTECTED:
      case INTERNAL:
        jjtn000.accessModifier = AccessModifier();
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
      }
      if (jj_2_2(2147483647)) {
        jjtn000.memberDeclaration = ConstructorDeclaration();
      } else if (jj_2_3(2147483647)) {
        jjtn000.memberDeclaration = AbstractMethodDeclaration();
      } else if (jj_2_4(2147483647)) {
        jjtn000.memberDeclaration = MethodDeclaration();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case CHAR:
        case INTEGER:
        case FLOAT:
        case DOUBLE:
        case BYTE:
        case SHORT:
        case LONG:
        case STATIC:
        case STRING:
        case FINAL:
        case FUNCTOR:
        case IDENTIFIER:
        case AT:
          jjtn000.memberDeclaration = FieldDeclaration();
          break;
        case DELEGATE:
          jjtn000.memberDeclaration = DelegateDeclaration();
          break;
        default:
          jj_la1[19] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTFunctorDeclaration FunctorDeclaration() throws ParseException {
 /*@bgen(jjtree) FunctorDeclaration */
 ASTFunctorDeclaration jjtn000 = new ASTFunctorDeclaration(JJTFUNCTORDECLARATION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      try {
        jj_consume_token(FUNCTOR);
        jjtn000.returnType = ReturnType();
        t = jj_consume_token(IDENTIFIER);
                                                                    jjtn000.t=t;
        jjtn000.formalParameters = FormalParameters();
      } catch (ParseException e) {
                error("malformed functor declaration ");
                skipto(SEMICOLON);
      }
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTInterfaceDeclaration InterfaceDeclaration() throws ParseException {
 /*@bgen(jjtree) InterfaceDeclaration */
  ASTInterfaceDeclaration jjtn000 = new ASTInterfaceDeclaration(JJTINTERFACEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      try {
        jjtn000.interfaceHeader = InterfaceHeader();
      } catch (ParseException e) {
                error( " in interface declaration clause");
                skipBefore(LBRACE);
      }
      jjtn000.interfaceBody = InterfaceBody();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTInterfaceHeader InterfaceHeader() throws ParseException {
 /*@bgen(jjtree) InterfaceHeader */
 ASTInterfaceHeader jjtn000 = new ASTInterfaceHeader(JJTINTERFACEHEADER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t, k, j;
    try {
      jj_consume_token(INTERFACE);
      t = jj_consume_token(IDENTIFIER);
                                    jjtn000.t = t;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INHERITS:
        jj_consume_token(INHERITS);
        k = jj_consume_token(IDENTIFIER);
                                                                               jjtn000.interfaceParentName.add(k.image);
        label_10:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[20] = jj_gen;
            break label_10;
          }
          jj_consume_token(COMMA);
          j = jj_consume_token(IDENTIFIER);
                                                                                                                                              jjtn000.interfaceParentName.add(j.image);
        }
        break;
      default:
        jj_la1[21] = jj_gen;
        ;
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTInterfaceBody InterfaceBody() throws ParseException {
 /*@bgen(jjtree) InterfaceBody */
ASTInterfaceBody jjtn000 = new ASTInterfaceBody(JJTINTERFACEBODY);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);ASTInterfaceMethodDeclaration d;
    try {
      jj_consume_token(LBRACE);
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case CHAR:
        case INTEGER:
        case FLOAT:
        case DOUBLE:
        case VOID:
        case BYTE:
        case SHORT:
        case LONG:
        case STRING:
        case IDENTIFIER:
        case AT:
          ;
          break;
        default:
          jj_la1[22] = jj_gen;
          break label_11;
        }
        d = InterfaceMethodDeclaration();
                                                   jjtn000.interfaceMethodDeclarationList.add(d);
      }
      jj_consume_token(RBRACE);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTInterfaceMethodDeclaration InterfaceMethodDeclaration() throws ParseException {
 /*@bgen(jjtree) InterfaceMethodDeclaration */
  ASTInterfaceMethodDeclaration jjtn000 = new ASTInterfaceMethodDeclaration(JJTINTERFACEMETHODDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      try {
        jjtn000.interfaceMethodHeader = InterfaceMethodHeader();
        jj_consume_token(SEMICOLON);
      } catch (ParseException e) {
                Token t = getToken(0);
                error(" in interface method header declaration");
                int lookAhead1[] = {RBRACE};
                int lookAhead2[] = {BOOLEAN,CHAR,INTEGER,FLOAT,DOUBLE,VOID,BYTE,SHORT,LONG,STRING,AT,IDENTIFIER};
                int lookAhead3[] = {CLASS,FINAL,SINGLETON,META,FUNCTOR,INTERFACE,FREE,EOF};



                int d1 = getTokenDistanceSet( lookAhead1 );
                ///System.out.println ("Call d1");
                int d2 = getTokenDistanceSet( lookAhead2 );
                ///System.out.println ("D1 "+d1+" d2 "+d2+" d3 ");
                int d3 = getTokenDistanceSet( lookAhead3 );
                //System.out.println ("Going Goingeee");



                if(d1< d2)
                {
                        ///System.out.println ("Go lookAhead1 2");
                        skipBeforeSet( lookAhead1 );
                        {if (true) return null;}

                }
                else if(d2 < d3 )
                {
                        ///System.out.println ("Case 3");
                        skipBeforeSet( lookAhead2 );
                        label_11:
                while (true) {
                InterfaceMethodDeclaration();
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case BOOLEAN:
                case CHAR:
                case INTEGER:
                case FLOAT:
                case DOUBLE:
                case VOID:
                case BYTE:
                case SHORT:
                case LONG:
                case STRING:
                case IDENTIFIER:
                case AT:
                ;
                break;
                default:
                jj_la1[21] = jj_gen;
                break label_11;
                }//switch

         }//while
        }
         else
         {
                skipBeforeSet( lookAhead3 );
                label_2:
                while (true) {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case CLASS:
                case FINAL:
                case SINGLETON:
                case META:
                case FUNCTOR:
                case INTERFACE:
                case ABSTRACT:
                case FREE:
                ;
                break;
                default:
                jj_la1[2] = jj_gen;
                break label_2;
                }
        TypeDeclaration();
      }
      jj_consume_token(0);
        }
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTMetaClassDeclaration MetaClassDeclaration() throws ParseException {
 /*@bgen(jjtree) MetaClassDeclaration */
  ASTMetaClassDeclaration jjtn000 = new ASTMetaClassDeclaration(JJTMETACLASSDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      try {
        jjtn000.metaClassHeader = MetaClassHeader();
      } catch (ParseException e) {
                error(" invalid meta class header declaration");
                skipBefore(LBRACE);
      }
      jjtn000.metaClassBody = MetaClassBody();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTInterfaceMethodHeader InterfaceMethodHeader() throws ParseException {
 /*@bgen(jjtree) InterfaceMethodHeader */
        ASTInterfaceMethodHeader jjtn000 = new ASTInterfaceMethodHeader(JJTINTERFACEMETHODHEADER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      jjtn000.returnType = ReturnType();
      t = jj_consume_token(IDENTIFIER);
                                                         jjtn000.t = t;
      jjtn000.formalParameters = FormalParameters();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTAbstractMethodDeclaration AbstractMethodDeclaration() throws ParseException {
 /*@bgen(jjtree) AbstractMethodDeclaration */
        ASTAbstractMethodDeclaration jjtn000 = new ASTAbstractMethodDeclaration(JJTABSTRACTMETHODDECLARATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      try {
        jj_consume_token(ABSTRACT);
                    jjtn000.modifier = UCSYClassAttribute.ABSTRACT;
        jjtn000.returnType = ReturnType();
        t = jj_consume_token(IDENTIFIER);
                                                                                                                      jjtn000.t=t;
        jjtn000.formalParameters = FormalParameters();
        jj_consume_token(SEMICOLON);
      } catch (ParseException e) {
                error(" invalid abstract method declaration");
                skiptoOrEndOfLine(SEMICOLON);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTMetaClassHeader MetaClassHeader() throws ParseException {
 /*@bgen(jjtree) MetaClassHeader */
 ASTMetaClassHeader jjtn000 = new ASTMetaClassHeader(JJTMETACLASSHEADER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t,k;
    try {
      jj_consume_token(META);
      jj_consume_token(CLASS);
      t = jj_consume_token(IDENTIFIER);
                                        jjtn000.t=t;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INHERITS:
        jj_consume_token(INHERITS);
        jjtn000.parent = jj_consume_token(IDENTIFIER);
        break;
      default:
        jj_la1[23] = jj_gen;
        ;
      }
      jj_consume_token(MYDEFAULT);
      k = jj_consume_token(IDENTIFIER);
                                                                                                                         jjtn000.defaultClassName=k.image;
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTMetaClassBody MetaClassBody() throws ParseException {
 /*@bgen(jjtree) MetaClassBody */
        ASTMetaClassBody jjtn000 = new ASTMetaClassBody(JJTMETACLASSBODY);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);ASTAbstractConstructor ac;
        ASTInterfaceMethodDeclaration in;
    try {
      jj_consume_token(LBRACE);
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW:
          ac = AbstractConstructor();
                                                   jjtn000.abstractConstructorList.add(ac);
          break;
        case BOOLEAN:
        case CHAR:
        case INTEGER:
        case FLOAT:
        case DOUBLE:
        case VOID:
        case BYTE:
        case SHORT:
        case LONG:
        case STRING:
        case IDENTIFIER:
        case AT:
          in = InterfaceMethodDeclaration();
                                                           jjtn000.interfaceMethodDeclarationList.add(in);
          break;
        default:
          jj_la1[24] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case CHAR:
        case INTEGER:
        case FLOAT:
        case DOUBLE:
        case VOID:
        case BYTE:
        case SHORT:
        case LONG:
        case NEW:
        case STRING:
        case IDENTIFIER:
        case AT:
          ;
          break;
        default:
          jj_la1[25] = jj_gen;
          break label_12;
        }
      }
      jj_consume_token(RBRACE);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTAbstractConstructor AbstractConstructor() throws ParseException {
 /*@bgen(jjtree) AbstractConstructor */
  ASTAbstractConstructor jjtn000 = new ASTAbstractConstructor(JJTABSTRACTCONSTRUCTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      try {
        jjtn000.t = jj_consume_token(NEW);
        jjtn000.formalParameters = FormalParameters();
        jj_consume_token(SEMICOLON);
      } catch (ParseException e) {
                error( " invalid abstract constructor");
                //throw e;

                int lookAhead1[] = {RBRACE};
                int lookAhead2[] = {NEW,BOOLEAN,CHAR,INTEGER,FLOAT,DOUBLE,VOID,BYTE,SHORT,LONG,STRING,AT,IDENTIFIER};

                int d1 = getTokenDistanceSet( lookAhead1 );
                int d2 = getTokenDistanceSet( lookAhead2 );

                if(d1<d2)
                {
                        skipBeforeSet(lookAhead1);

                }
                else
                {       skipBeforeSet(lookAhead2);
                }
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public void MethodDeclarationLookAhead() throws ParseException {
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NATIVE:
      case STATIC:
      case FINAL:
      case REBINDABLE:
      case OVERRIDE:
      case ABSTRACT:
      case MULTI:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_13;
      }
      MethodModifier();
    }
    ReturnType();
    jj_consume_token(IDENTIFIER);
    jj_consume_token(LEFTPARAN);
  }

  final public void FunctorDeclarationLookAhead() throws ParseException {
    jj_consume_token(FUNCTOR);
    ReturnType();
    jj_consume_token(IDENTIFIER);
    jj_consume_token(LEFTPARAN);
  }

  final public ASTAccessModifier AccessModifier() throws ParseException {
 /*@bgen(jjtree) AccessModifier */
  ASTAccessModifier jjtn000 = new ASTAccessModifier(JJTACCESSMODIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PUBLIC:
        jj_consume_token(PUBLIC);
                      jjtn000.modifier |= UCSYClassAttribute.PUBLIC;
        break;
      case PRIVATE:
        jj_consume_token(PRIVATE);
                      jjtn000.modifier |= UCSYClassAttribute.PRIVATE;
        break;
      case PROTECTED:
        jj_consume_token(PROTECTED);
                      jjtn000.modifier |= UCSYClassAttribute.PROTECTED;
        break;
      case INTERNAL:
        jj_consume_token(INTERNAL);
                      jjtn000.modifier |= UCSYClassAttribute.INTERNAL;
        break;
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTMethodModifier MethodModifier() throws ParseException {
 /*@bgen(jjtree) MethodModifier */
  ASTMethodModifier jjtn000 = new ASTMethodModifier(JJTMETHODMODIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STATIC:
        jj_consume_token(STATIC);
                            jjtn000.modifier |= UCSYClassAttribute.STATIC;
        break;
      case OVERRIDE:
        jj_consume_token(OVERRIDE);
                        jjtn000.modifier |= UCSYClassAttribute.OVERRIDE;
        break;
      case FINAL:
        jj_consume_token(FINAL);
                            jjtn000.modifier |= UCSYClassAttribute.FINAL;
        break;
      case ABSTRACT:
        jj_consume_token(ABSTRACT);
                        jjtn000.modifier |= UCSYClassAttribute.ABSTRACT;
        break;
      case MULTI:
        jj_consume_token(MULTI);
                        jjtn000.modifier |= UCSYClassAttribute.MULTI;
        break;
      case REBINDABLE:
        jj_consume_token(REBINDABLE);
                        jjtn000.modifier |= UCSYClassAttribute.REBINDABLE;
        break;
      case NATIVE:
        jj_consume_token(NATIVE);
                        jjtn000.modifier |= UCSYClassAttribute.NATIVE;
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTFieldModifier FieldModifier() throws ParseException {
 /*@bgen(jjtree) FieldModifier */
  ASTFieldModifier jjtn000 = new ASTFieldModifier(JJTFIELDMODIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STATIC:
        jj_consume_token(STATIC);
                  jjtn000.fieldModifier |= UCSYClassAttribute.STATIC;
        break;
      case FINAL:
        jj_consume_token(FINAL);
                  jjtn000.fieldModifier |= UCSYClassAttribute.FINAL;
        break;
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
                {if (true) return jjtn000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTConstructorDeclaration ConstructorDeclaration() throws ParseException {
 /*@bgen(jjtree) ConstructorDeclaration */
        ASTConstructorDeclaration jjtn000 = new ASTConstructorDeclaration(JJTCONSTRUCTORDECLARATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = null;
        ASTStatement stat;
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NATIVE:
        case STATIC:
        case FINAL:
        case REBINDABLE:
        case OVERRIDE:
        case ABSTRACT:
        case MULTI:
          jjtn000.methodModifier = MethodModifier();
          break;
        default:
          jj_la1[30] = jj_gen;
          ;
        }
        t = jj_consume_token(IDENTIFIER);
                                                                   jjtn000.t= t;
        jjtn000.formalParameters = FormalParameters();
      } catch (ParseException e) {
                error("Ivalid constructor header declaration");

                skipBefore(LBRACE);
      }
      jj_consume_token(LBRACE);
      if (jj_2_5(2147483647)) {
        jjtn000.explicitConstructorCall = ExplicitConstructorCall();
        label_14:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BOOLEAN:
          case CHAR:
          case INTEGER:
          case FLOAT:
          case DOUBLE:
          case BYTE:
          case SHORT:
          case LONG:
          case DO:
          case IF:
          case WHILE:
          case FOR:
          case NEW:
          case NULL:
          case RETURN:
          case BREAK:
          case CONTIUNE:
          case SWITCH:
          case STRING:
          case TRUE:
          case FALSE:
          case TRY:
          case THROW:
          case REBIND:
          case THIS:
          case SUPER:
          case EXECUTE:
          case IDENTIFIER:
          case LEFTPARAN:
          case SEMICOLON:
          case AT:
          case LBRACE:
          case INTEGERLITERAL:
          case FLOATLITERAL:
          case CHARLITERAL:
          case DOUBLELITERAL:
          case LONGLITERAL:
          case STRINGLITERAL:
            ;
            break;
          default:
            jj_la1[31] = jj_gen;
            break label_14;
          }
          stat = Statement();
                                   jjtn000.statementList.add(stat);
        }
      } else {
        label_15:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BOOLEAN:
          case CHAR:
          case INTEGER:
          case FLOAT:
          case DOUBLE:
          case BYTE:
          case SHORT:
          case LONG:
          case DO:
          case IF:
          case WHILE:
          case FOR:
          case NEW:
          case NULL:
          case RETURN:
          case BREAK:
          case CONTIUNE:
          case SWITCH:
          case STRING:
          case TRUE:
          case FALSE:
          case TRY:
          case THROW:
          case REBIND:
          case THIS:
          case SUPER:
          case EXECUTE:
          case IDENTIFIER:
          case LEFTPARAN:
          case SEMICOLON:
          case AT:
          case LBRACE:
          case INTEGERLITERAL:
          case FLOATLITERAL:
          case CHARLITERAL:
          case DOUBLELITERAL:
          case LONGLITERAL:
          case STRINGLITERAL:
            ;
            break;
          default:
            jj_la1[32] = jj_gen;
            break label_15;
          }
          stat = Statement();
                                   jjtn000.statementList.add(stat);
        }
      }
      jj_consume_token(RBRACE);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTExplicitConstructorCall ExplicitConstructorCall() throws ParseException {
 /*@bgen(jjtree) ExplicitConstructorCall */
  ASTExplicitConstructorCall jjtn000 = new ASTExplicitConstructorCall(JJTEXPLICITCONSTRUCTORCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case THIS:
        jj_consume_token(THIS);
                 jjtn000.thisCall = true;
        break;
      case SUPER:
        jj_consume_token(SUPER);
                                                    jjtn000.superCall= true;
        break;
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jjtn000.arguments = Arguments();
      jj_consume_token(SEMICOLON);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTFieldDeclaration FieldDeclaration() throws ParseException {
 /*@bgen(jjtree) FieldDeclaration */
  ASTFieldDeclaration jjtn000 = new ASTFieldDeclaration(JJTFIELDDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      try {
        if (jj_2_6(2147483647)) {
          jjtn000.functorDeclaration = FunctorDeclaration();
          jj_consume_token(SEMICOLON);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BOOLEAN:
          case CHAR:
          case INTEGER:
          case FLOAT:
          case DOUBLE:
          case BYTE:
          case SHORT:
          case LONG:
          case STATIC:
          case STRING:
          case FINAL:
          case IDENTIFIER:
          case AT:
            jjtn000.normalFieldDeclaration = NormalFieldDeclaration();
            break;
          default:
            jj_la1[34] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } catch (ParseException e) {
                error("Incorrect field or functor declaration");
                skiptoOrEndOfLine( SEMICOLON );
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTNormalFieldDeclaration NormalFieldDeclaration() throws ParseException {
 /*@bgen(jjtree) NormalFieldDeclaration */
ASTNormalFieldDeclaration jjtn000 = new ASTNormalFieldDeclaration(JJTNORMALFIELDDECLARATION);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);ASTFieldModifier m;
ASTVariableDeclarator varDecl;
    try {
      label_16:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STATIC:
        case FINAL:
          ;
          break;
        default:
          jj_la1[35] = jj_gen;
          break label_16;
        }
        m = FieldModifier();
                              jjtn000.fieldModifier.add(m);
      }
      jjtn000.type = Type();
      varDecl = VariableDeclarator();
                                                                                                                      jjtn000.variableDeclarator.add(varDecl);
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[36] = jj_gen;
          break label_17;
        }
        jj_consume_token(COMMA);
        varDecl = VariableDeclarator();
                                                                                                                                                                                                    jjtn000.variableDeclarator.add(varDecl);
      }
      jj_consume_token(SEMICOLON);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTDelegateDeclaration DelegateDeclaration() throws ParseException {
 /*@bgen(jjtree) DelegateDeclaration */
  ASTDelegateDeclaration jjtn000 = new ASTDelegateDeclaration(JJTDELEGATEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      try {
        jj_consume_token(DELEGATE);
        jjtn000.type = Type();
        jjtn000.t = jj_consume_token(IDENTIFIER);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case HANDLES:
          jjtn000.delegateClause = HandleAllClause();
          break;
        case FORWARDS:
          jjtn000.delegateClause = ForwardsClause();
          break;
        case DECORATE:
          jjtn000.delegateClause = DecoratesClause();
          break;
        default:
          jj_la1[37] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(SEMICOLON);
      } catch (ParseException e) {
                error("incorrect delegat declaration");
                skiptoOrEndOfLine(SEMICOLON);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTHandleAllClause HandleAllClause() throws ParseException {
 /*@bgen(jjtree) HandleAllClause */
  ASTHandleAllClause jjtn000 = new ASTHandleAllClause(JJTHANDLEALLCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(HANDLES);
      jj_consume_token(ALL);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTForwardsClause ForwardsClause() throws ParseException {
 /*@bgen(jjtree) ForwardsClause */
        ASTForwardsClause jjtn000 = new ASTForwardsClause(JJTFORWARDSCLAUSE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);ASTSignatureToCall sToCall;
    try {
      jj_consume_token(FORWARDS);
      sToCall = SignatureToCall();
                                               jjtn000.signatureToCallList.add( sToCall );
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[38] = jj_gen;
          break label_18;
        }
        jj_consume_token(COMMA);
        sToCall = SignatureToCall();
                                                                                                                              jjtn000.signatureToCallList.add( sToCall );
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTDecoratesClause DecoratesClause() throws ParseException {
 /*@bgen(jjtree) DecoratesClause */
        ASTDecoratesClause jjtn000 = new ASTDecoratesClause(JJTDECORATESCLAUSE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);ASTBeforeCallOrAfterCall bOrACall;
    try {
      jj_consume_token(DECORATE);
      bOrACall = BeforeCallOrAfterCall();
                                                        jjtn000.beforeCallOrAfterCallList.add( bOrACall );
      label_19:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[39] = jj_gen;
          break label_19;
        }
        jj_consume_token(COMMA);
        bOrACall = BeforeCallOrAfterCall();
                                                                                                                                                     jjtn000.beforeCallOrAfterCallList.add( bOrACall );
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTBeforeCallOrAfterCall BeforeCallOrAfterCall() throws ParseException {
 /*@bgen(jjtree) BeforeCallOrAfterCall */
  ASTBeforeCallOrAfterCall jjtn000 = new ASTBeforeCallOrAfterCall(JJTBEFORECALLORAFTERCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_7(2147483647)) {
        jjtn000.beforeOrAfter = BeforeCall();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          jjtn000.beforeOrAfter = AfterCall();
          break;
        default:
          jj_la1[40] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTAfterCall AfterCall() throws ParseException {
 /*@bgen(jjtree) AfterCall */
  ASTAfterCall jjtn000 = new ASTAfterCall(JJTAFTERCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jjtn000.methodSignature = MethodSignature();
      jj_consume_token(AFTER);
      jjtn000.methodCall = MethodCall();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTBeforeCall BeforeCall() throws ParseException {
 /*@bgen(jjtree) BeforeCall */
  ASTBeforeCall jjtn000 = new ASTBeforeCall(JJTBEFORECALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jjtn000.methodSignature = MethodSignature();
      jj_consume_token(BEFORE);
      jjtn000.methodCall = MethodCall();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTMethodSignature MethodSignature() throws ParseException {
 /*@bgen(jjtree) MethodSignature */
  ASTMethodSignature jjtn000 = new ASTMethodSignature(JJTMETHODSIGNATURE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      try {
        jjtn000.t = jj_consume_token(IDENTIFIER);
        jjtn000.formalParameters = FormalParameters();
      } catch (ParseException e) {
                error(" invalid method signature");
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTMethodCall MethodCall() throws ParseException {
 /*@bgen(jjtree) MethodCall */
  ASTMethodCall jjtn000 = new ASTMethodCall(JJTMETHODCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      try {
        jjtn000.t = jj_consume_token(IDENTIFIER);
        jjtn000.arguments = Arguments();
      } catch (ParseException e) {
                error("Invalid method call");
                skiptoOrEndOfLine(RIGHTPARAN);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTVariableDeclarator VariableDeclarator() throws ParseException {
 /*@bgen(jjtree) VariableDeclarator */
  ASTVariableDeclarator jjtn000 = new ASTVariableDeclarator(JJTVARIABLEDECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jjtn000.variableDeclaratorId = VariableDeclaratorId();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
        jjtn000.variableInitializer = VariableInitializer();
        break;
      default:
        jj_la1[41] = jj_gen;
        ;
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTVariableDeclaratorId VariableDeclaratorId() throws ParseException {
 /*@bgen(jjtree) VariableDeclaratorId */
ASTVariableDeclaratorId jjtn000 = new ASTVariableDeclaratorId(JJTVARIABLEDECLARATORID);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token t = null;
    try {
      t = jj_consume_token(IDENTIFIER);
                          jjtn000.t = t;
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTVariableInitializer VariableInitializer() throws ParseException {
 /*@bgen(jjtree) VariableInitializer */
  ASTVariableInitializer jjtn000 = new ASTVariableInitializer(JJTVARIABLEINITIALIZER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACE:
          jjtn000.expression = ArrayInitializer();
          break;
        case NEW:
        case NULL:
        case TRUE:
        case FALSE:
        case Not:
        case THIS:
        case SUPER:
        case IDENTIFIER:
        case LEFTPARAN:
        case PLUS:
        case MINUS:
        case INTEGERLITERAL:
        case FLOATLITERAL:
        case CHARLITERAL:
        case DOUBLELITERAL:
        case LONGLITERAL:
        case STRINGLITERAL:
          jjtn000.expression = Expression();
          break;
        default:
          jj_la1[42] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
                error("incorrect variable intializer");
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTArrayInitializer ArrayInitializer() throws ParseException {
 /*@bgen(jjtree) ArrayInitializer */
  ASTArrayInitializer jjtn000 = new ASTArrayInitializer(JJTARRAYINITIALIZER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      try {
        jj_consume_token(LBRACE);
        VariableInitializer();
        label_20:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[43] = jj_gen;
            break label_20;
          }
          jj_consume_token(COMMA);
          VariableInitializer();
        }
        jj_consume_token(RBRACE);
      } catch (ParseException e) {
                error("incorrect array intializer");
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTMethodDeclaration MethodDeclaration() throws ParseException {
 /*@bgen(jjtree) MethodDeclaration */
  ASTMethodDeclaration jjtn000 = new ASTMethodDeclaration(JJTMETHODDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jjtn000.methodHeader = MethodHeader();
      jjtn000.block = Block();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTMethodHeader MethodHeader() throws ParseException {
 /*@bgen(jjtree) MethodHeader */
ASTMethodHeader jjtn000 = new ASTMethodHeader(JJTMETHODHEADER);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token t=null;
ASTMethodModifier m;
    try {
      try {
        label_21:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NATIVE:
          case STATIC:
          case FINAL:
          case REBINDABLE:
          case OVERRIDE:
          case ABSTRACT:
          case MULTI:
            ;
            break;
          default:
            jj_la1[44] = jj_gen;
            break label_21;
          }
          m = MethodModifier();
                               jjtn000.modifierList.add(m);
        }
        jjtn000.returnType = ReturnType();
        jjtn000.t = jj_consume_token(IDENTIFIER);
        jjtn000.formalParameters = FormalParameters();
      } catch (ParseException e) {
                error(" incorrect method header declaration");
                skiptoOrEndOfLine(RIGHTPARAN);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTFormalParameters FormalParameters() throws ParseException {
 /*@bgen(jjtree) FormalParameters */
        ASTFormalParameters jjtn000 = new ASTFormalParameters(JJTFORMALPARAMETERS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);ASTFormalParameter par;
    try {
      try {
        jj_consume_token(LEFTPARAN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case CHAR:
        case INTEGER:
        case FLOAT:
        case DOUBLE:
        case BYTE:
        case SHORT:
        case LONG:
        case STRING:
        case IDENTIFIER:
        case AT:
          par = FormalParameter();
                                       jjtn000.formalParameterList.add( par );
          label_22:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[45] = jj_gen;
              break label_22;
            }
            jj_consume_token(COMMA);
            par = FormalParameter();
                                                                                                            jjtn000.formalParameterList.add( par );
          }
          break;
        default:
          jj_la1[46] = jj_gen;
          ;
        }
        jj_consume_token(RIGHTPARAN);
      } catch (ParseException e) {
                error(" invalid formal parameter declaration");
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTFormalParameter FormalParameter() throws ParseException {
 /*@bgen(jjtree) FormalParameter */
  ASTFormalParameter jjtn000 = new ASTFormalParameter(JJTFORMALPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jjtn000.mainType = Type();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COLON:
        jj_consume_token(COLON);
        jjtn000.subType = Type();
        break;
      default:
        jj_la1[47] = jj_gen;
        ;
      }
      jjtn000.variableDeclaratorId = VariableDeclaratorId();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTReturnType ReturnType() throws ParseException {
 /*@bgen(jjtree) ReturnType */
  ASTReturnType jjtn000 = new ASTReturnType(JJTRETURNTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VOID:
        jjtn000.voidType = VoidType();
        break;
      case BOOLEAN:
      case CHAR:
      case INTEGER:
      case FLOAT:
      case DOUBLE:
      case BYTE:
      case SHORT:
      case LONG:
      case STRING:
      case IDENTIFIER:
      case AT:
        jjtn000.type = Type();
        break;
      default:
        jj_la1[48] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTVoidType VoidType() throws ParseException {
 /*@bgen(jjtree) VoidType */
  ASTVoidType jjtn000 = new ASTVoidType(JJTVOIDTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(VOID);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTType Type() throws ParseException {
 /*@bgen(jjtree) Type */
  ASTType jjtn000 = new ASTType(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_8(2147483647)) {
        jjtn000.referenceType = ReferenceType();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case CHAR:
        case INTEGER:
        case FLOAT:
        case DOUBLE:
        case BYTE:
        case SHORT:
        case LONG:
        case STRING:
          jjtn000.primitiveType = PrimitiveType();
          break;
        default:
          jj_la1[49] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTPrimitiveType PrimitiveType() throws ParseException {
 /*@bgen(jjtree) PrimitiveType */
  ASTPrimitiveType jjtn000 = new ASTPrimitiveType(JJTPRIMITIVETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
        jjtn000.t = jj_consume_token(BOOLEAN);
                                       jjtn000.primitiveType = BOOLEAN;
        break;
      case CHAR:
        jjtn000.t = jj_consume_token(CHAR);
                                      jjtn000.primitiveType = CHAR ;
        break;
      case BYTE:
        jjtn000.t = jj_consume_token(BYTE);
                                      jjtn000.primitiveType = BYTE ;
        break;
      case SHORT:
        jjtn000.t = jj_consume_token(SHORT);
                                      jjtn000.primitiveType = SHORT;
        break;
      case INTEGER:
        jjtn000.t = jj_consume_token(INTEGER);
                                      jjtn000.primitiveType = INTEGER;
        break;
      case LONG:
        jjtn000.t = jj_consume_token(LONG);
                                      jjtn000.primitiveType = LONG;
        break;
      case FLOAT:
        jjtn000.t = jj_consume_token(FLOAT);
                                      jjtn000.primitiveType = FLOAT;
        break;
      case DOUBLE:
        jjtn000.t = jj_consume_token(DOUBLE);
                                      jjtn000.primitiveType = DOUBLE;
        break;
      case STRING:
        jjtn000.t = jj_consume_token(STRING);
                                      jjtn000.primitiveType = STRING;
        break;
      default:
        jj_la1[50] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTReferenceType ReferenceType() throws ParseException {
 /*@bgen(jjtree) ReferenceType */
  ASTReferenceType jjtn000 = new ASTReferenceType(JJTREFERENCETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AT:
        jjtn000.metaInstanceType = MetaInstanceType();
        break;
      default:
        jj_la1[51] = jj_gen;
        if (jj_2_9(2147483647)) {
          jjtn000.arrayType = ArrayType();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            jjtn000.classType = ClassType();
            break;
          default:
            jj_la1[52] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTMetaInstanceType MetaInstanceType() throws ParseException {
 /*@bgen(jjtree) MetaInstanceType */
 ASTMetaInstanceType jjtn000 = new ASTMetaInstanceType(JJTMETAINSTANCETYPE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(AT);
      t = jj_consume_token(IDENTIFIER);
                              jjtn000.t= t;
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTClassType ClassType() throws ParseException {
 /*@bgen(jjtree) ClassType */
 ASTClassType jjtn000 = new ASTClassType(JJTCLASSTYPE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t = null;
    try {
      t = jj_consume_token(IDENTIFIER);
                            jjtn000.t = t;
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTArrayType ArrayType() throws ParseException {
 /*@bgen(jjtree) ArrayType */
  ASTArrayType jjtn000 = new ASTArrayType(JJTARRAYTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case CHAR:
      case INTEGER:
      case FLOAT:
      case DOUBLE:
      case BYTE:
      case SHORT:
      case LONG:
      case STRING:
        jjtn000.primitiveType = PrimitiveType();
        label_23:
        while (true) {
          jj_consume_token(LBRACKET);
          jj_consume_token(RBRACKET);
                                                                  jjtn000.dimensions ++;
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACKET:
            ;
            break;
          default:
            jj_la1[53] = jj_gen;
            break label_23;
          }
        }
        break;
      case IDENTIFIER:
        jjtn000.classType = ClassType();
        label_24:
        while (true) {
          jj_consume_token(LBRACKET);
          jj_consume_token(RBRACKET);
                                                          jjtn000.dimensions++;
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACKET:
            ;
            break;
          default:
            jj_la1[54] = jj_gen;
            break label_24;
          }
        }
        break;
      default:
        jj_la1[55] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTExpression Expression() throws ParseException {
 /*@bgen(jjtree) Expression */
  ASTExpression jjtn000 = new ASTExpression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jjtn000.exp = ConditionalOrExpression();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ParentExpression ConditionalOrExpression() throws ParseException {
ParentExpression opOne,opTwo,node;
    node = ConditionalAndExpression();
    label_25:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[56] = jj_gen;
        break label_25;
      }
      jj_consume_token(OR);
      opTwo = ConditionalAndExpression();
                                                                                      ASTOrNode jjtn001 = new ASTOrNode(JJTORNODE);
                                                                                      boolean jjtc001 = true;
                                                                                      jjtree.openNodeScope(jjtn001);
      try {
                                                                                      jjtree.closeNodeScope(jjtn001,  2);
                                                                                      jjtc001 = false;
                                                                                     jjtn001.opOne = node;jjtn001.opTwo =opTwo;node= jjtn001;
      } finally {
                                                                                      if (jjtc001) {
                                                                                        jjtree.closeNodeScope(jjtn001,  2);
                                                                                      }
      }
    }
         {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public ParentExpression ConditionalAndExpression() throws ParseException {
ParentExpression opOne,opTwo,node;
    node = EqualityExpression();
    label_26:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[57] = jj_gen;
        break label_26;
      }
      jj_consume_token(AND);
      opTwo = EqualityExpression();
                                                                          ASTAndNode jjtn001 = new ASTAndNode(JJTANDNODE);
                                                                          boolean jjtc001 = true;
                                                                          jjtree.openNodeScope(jjtn001);
      try {
                                                                          jjtree.closeNodeScope(jjtn001,  2);
                                                                          jjtc001 = false;
                                                                         jjtn001.opOne=node;jjtn001.opTwo = opTwo;node = jjtn001;
      } finally {
                                                                          if (jjtc001) {
                                                                            jjtree.closeNodeScope(jjtn001,  2);
                                                                          }
      }
    }
         {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public ParentExpression EqualityExpression() throws ParseException {
ParentExpression opOne,opTwo,node;
    node = InstanceOfExpression();
    label_27:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUAL:
      case 118:
        ;
        break;
      default:
        jj_la1[58] = jj_gen;
        break label_27;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUAL:
        jj_consume_token(EQUAL);
        opTwo = InstanceOfExpression();
                                                        ASTEqualNode jjtn001 = new ASTEqualNode(JJTEQUALNODE);
                                                        boolean jjtc001 = true;
                                                        jjtree.openNodeScope(jjtn001);
        try {
                                                        jjtree.closeNodeScope(jjtn001,  2);
                                                        jjtc001 = false;
                                                       jjtn001.opOne = node;jjtn001.opTwo = opTwo;node= jjtn001;
        } finally {
                                                        if (jjtc001) {
                                                          jjtree.closeNodeScope(jjtn001,  2);
                                                        }
        }
        break;
      case 118:
        jj_consume_token(118);
        opTwo = InstanceOfExpression();
                                                         ASTNotEqualNode jjtn002 = new ASTNotEqualNode(JJTNOTEQUALNODE);
                                                         boolean jjtc002 = true;
                                                         jjtree.openNodeScope(jjtn002);
        try {
                                                         jjtree.closeNodeScope(jjtn002,  2);
                                                         jjtc002 = false;
                                                        jjtn002.opOne = node;jjtn002.opTwo=opTwo;node= jjtn002;
        } finally {
                                                         if (jjtc002) {
                                                           jjtree.closeNodeScope(jjtn002,  2);
                                                         }
        }
        break;
      default:
        jj_la1[59] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
         {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public ParentExpression InstanceOfExpression() throws ParseException {
ParentExpression opOne,node;
ASTType type;

ParentExpression rel,instanceExpressionNode;
    if (jj_2_10(2147483647)) {
      opOne = RelationalExpression();
      jj_consume_token(INSTANCEOF);
      type = Type();
                                                                      ASTInstanceOfExpression jjtn001 = new ASTInstanceOfExpression(JJTINSTANCEOFEXPRESSION);
                                                                      boolean jjtc001 = true;
                                                                      jjtree.openNodeScope(jjtn001);
      try {
                                                                      jjtree.closeNodeScope(jjtn001,  2);
                                                                      jjtc001 = false;
                                                                     jjtn001.opOne = opOne;jjtn001.type=type; node=jjtn001;
      } finally {
                                                                      if (jjtc001) {
                                                                        jjtree.closeNodeScope(jjtn001,  2);
                                                                      }
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
      case NULL:
      case TRUE:
      case FALSE:
      case Not:
      case THIS:
      case SUPER:
      case IDENTIFIER:
      case LEFTPARAN:
      case PLUS:
      case MINUS:
      case INTEGERLITERAL:
      case FLOATLITERAL:
      case CHARLITERAL:
      case DOUBLELITERAL:
      case LONGLITERAL:
      case STRINGLITERAL:
        node = RelationalExpression();
        break;
      default:
        jj_la1[60] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public ParentExpression RelationalExpression() throws ParseException {
ParentExpression opOne,opTwo,node;
    node = AdditiveExpression();
    label_28:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GT:
      case LT:
      case GTE:
      case LTE:
        ;
        break;
      default:
        jj_la1[61] = jj_gen;
        break label_28;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GT:
        jj_consume_token(GT);
        opTwo = AdditiveExpression();
                                              ASTGTNode jjtn001 = new ASTGTNode(JJTGTNODE);
                                              boolean jjtc001 = true;
                                              jjtree.openNodeScope(jjtn001);
        try {
                                              jjtree.closeNodeScope(jjtn001,  2);
                                              jjtc001 = false;
                                             jjtn001.opOne = node;jjtn001.opTwo = opTwo; node=jjtn001;
        } finally {
                                              if (jjtc001) {
                                                jjtree.closeNodeScope(jjtn001,  2);
                                              }
        }
        break;
      case GTE:
        jj_consume_token(GTE);
        opTwo = AdditiveExpression();
                                              ASTGTEqualNode jjtn002 = new ASTGTEqualNode(JJTGTEQUALNODE);
                                              boolean jjtc002 = true;
                                              jjtree.openNodeScope(jjtn002);
        try {
                                              jjtree.closeNodeScope(jjtn002,  2);
                                              jjtc002 = false;
                                             jjtn002.opOne = node;jjtn002.opTwo = opTwo; node=jjtn002;
        } finally {
                                              if (jjtc002) {
                                                jjtree.closeNodeScope(jjtn002,  2);
                                              }
        }
        break;
      case LT:
        jj_consume_token(LT);
        opTwo = AdditiveExpression();
                                              ASTLTNode jjtn003 = new ASTLTNode(JJTLTNODE);
                                              boolean jjtc003 = true;
                                              jjtree.openNodeScope(jjtn003);
        try {
                                              jjtree.closeNodeScope(jjtn003,  2);
                                              jjtc003 = false;
                                             jjtn003.opOne = node;jjtn003.opTwo = opTwo; node=jjtn003;
        } finally {
                                              if (jjtc003) {
                                                jjtree.closeNodeScope(jjtn003,  2);
                                              }
        }
        break;
      case LTE:
        jj_consume_token(LTE);
        opTwo = AdditiveExpression();
                                               ASTLTEqualNode jjtn004 = new ASTLTEqualNode(JJTLTEQUALNODE);
                                               boolean jjtc004 = true;
                                               jjtree.openNodeScope(jjtn004);
        try {
                                               jjtree.closeNodeScope(jjtn004,  2);
                                               jjtc004 = false;
                                              jjtn004.opOne = node;jjtn004.opTwo = opTwo; node=jjtn004;
        } finally {
                                               if (jjtc004) {
                                                 jjtree.closeNodeScope(jjtn004,  2);
                                               }
        }
        break;
      default:
        jj_la1[62] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
         {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public ParentExpression AdditiveExpression() throws ParseException {
ParentExpression opOne,opTwo,node;
    node = MultiplicativeExpression();
    label_29:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[63] = jj_gen;
        break label_29;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        opTwo = MultiplicativeExpression();
                                                      ASTPlusNode jjtn001 = new ASTPlusNode(JJTPLUSNODE);
                                                      boolean jjtc001 = true;
                                                      jjtree.openNodeScope(jjtn001);
        try {
                                                      jjtree.closeNodeScope(jjtn001,  2);
                                                      jjtc001 = false;
                                                     jjtn001.opOne = node;jjtn001.opTwo = opTwo;node = jjtn001;
        } finally {
                                                      if (jjtc001) {
                                                        jjtree.closeNodeScope(jjtn001,  2);
                                                      }
        }
        break;
      case MINUS:
        jj_consume_token(MINUS);
        opTwo = MultiplicativeExpression();
                                                          ASTSubtractNode jjtn002 = new ASTSubtractNode(JJTSUBTRACTNODE);
                                                          boolean jjtc002 = true;
                                                          jjtree.openNodeScope(jjtn002);
        try {
                                                          jjtree.closeNodeScope(jjtn002,  2);
                                                          jjtc002 = false;
                                                         jjtn002.opOne = node;jjtn002.opTwo = opTwo;node = jjtn002;
        } finally {
                                                          if (jjtc002) {
                                                            jjtree.closeNodeScope(jjtn002,  2);
                                                          }
        }
        break;
      default:
        jj_la1[64] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
         {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public ParentExpression MultiplicativeExpression() throws ParseException {
ParentExpression opOne,opTwo,node;
    node = UnaryExpression();
    label_30:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIV:
      case MOD:
      case MUL:
        ;
        break;
      default:
        jj_la1[65] = jj_gen;
        break label_30;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MUL:
        jj_consume_token(MUL);
        opTwo = UnaryExpression();
                                                  ASTMultiplyNode jjtn001 = new ASTMultiplyNode(JJTMULTIPLYNODE);
                                                  boolean jjtc001 = true;
                                                  jjtree.openNodeScope(jjtn001);
        try {
                                                  jjtree.closeNodeScope(jjtn001,  2);
                                                  jjtc001 = false;
                                                 jjtn001.opOne = node;jjtn001.opTwo = opTwo;node = jjtn001;
        } finally {
                                                  if (jjtc001) {
                                                    jjtree.closeNodeScope(jjtn001,  2);
                                                  }
        }
        break;
      case DIV:
        jj_consume_token(DIV);
        opTwo = UnaryExpression();
                                                  ASTDivsionNode jjtn002 = new ASTDivsionNode(JJTDIVSIONNODE);
                                                  boolean jjtc002 = true;
                                                  jjtree.openNodeScope(jjtn002);
        try {
                                                  jjtree.closeNodeScope(jjtn002,  2);
                                                  jjtc002 = false;
                                                 jjtn002.opOne = node;jjtn002.opTwo = opTwo;node = jjtn002;
        } finally {
                                                  if (jjtc002) {
                                                    jjtree.closeNodeScope(jjtn002,  2);
                                                  }
        }
        break;
      case MOD:
        jj_consume_token(MOD);
        opTwo = UnaryExpression();
                                                  ASTModulusNode jjtn003 = new ASTModulusNode(JJTMODULUSNODE);
                                                  boolean jjtc003 = true;
                                                  jjtree.openNodeScope(jjtn003);
        try {
                                                  jjtree.closeNodeScope(jjtn003,  2);
                                                  jjtc003 = false;
                                                 jjtn003.opOne = node;jjtn003.opTwo = opTwo;node = jjtn003;
        } finally {
                                                  if (jjtc003) {
                                                    jjtree.closeNodeScope(jjtn003,  2);
                                                  }
        }
        break;
      default:
        jj_la1[66] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
         {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public ParentExpression UnaryExpression() throws ParseException {
        ParentExpression opOne,node;
        ParentExpression unaryNotCast;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        node = UnaryExpression();
                                                      ASTUnaryPlusNode jjtn001 = new ASTUnaryPlusNode(JJTUNARYPLUSNODE);
                                                      boolean jjtc001 = true;
                                                      jjtree.openNodeScope(jjtn001);
        try {
                                                      jjtree.closeNodeScope(jjtn001,  1);
                                                      jjtc001 = false;
                                                     jjtn001.opOne= node;
        } finally {
                                                      if (jjtc001) {
                                                        jjtree.closeNodeScope(jjtn001,  1);
                                                      }
        }
        break;
      case MINUS:
        jj_consume_token(MINUS);
        node = UnaryExpression();
                                                        ASTUnaryMinusNode jjtn002 = new ASTUnaryMinusNode(JJTUNARYMINUSNODE);
                                                        boolean jjtc002 = true;
                                                        jjtree.openNodeScope(jjtn002);
        try {
                                                        jjtree.closeNodeScope(jjtn002,  1);
                                                        jjtc002 = false;
                                                       jjtn002.opOne = node;
        } finally {
                                                        if (jjtc002) {
                                                          jjtree.closeNodeScope(jjtn002,  1);
                                                        }
        }
        break;
      default:
        jj_la1[67] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case NEW:
    case NULL:
    case TRUE:
    case FALSE:
    case Not:
    case THIS:
    case SUPER:
    case IDENTIFIER:
    case LEFTPARAN:
    case INTEGERLITERAL:
    case FLOATLITERAL:
    case CHARLITERAL:
    case DOUBLELITERAL:
    case LONGLITERAL:
    case STRINGLITERAL:
      node = UnaryExpressionNotCast();
      break;
    default:
      jj_la1[68] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                 {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public ParentExpression UnaryExpressionNotCast() throws ParseException {
        ParentExpression opOne;
        ParentExpression primaryExpression;
        ParentExpression node;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Not:
      jj_consume_token(Not);
      node = UnaryExpression();
                                                ASTNotNode jjtn001 = new ASTNotNode(JJTNOTNODE);
                                                boolean jjtc001 = true;
                                                jjtree.openNodeScope(jjtn001);
      try {
                                                jjtree.closeNodeScope(jjtn001,  1);
                                                jjtc001 = false;
                                               jjtn001.opOne = node;node=jjtn001;
      } finally {
                                                if (jjtc001) {
                                                  jjtree.closeNodeScope(jjtn001,  1);
                                                }
      }
      break;
    default:
      jj_la1[69] = jj_gen;
      if (jj_2_11(2147483647)) {
        node = CastExpression();
                                         ASTCastNode jjtn002 = new ASTCastNode(JJTCASTNODE);
                                         boolean jjtc002 = true;
                                         jjtree.openNodeScope(jjtn002);
        try {
                                         jjtree.closeNodeScope(jjtn002,  1);
                                         jjtc002 = false;
                                        jjtn002.opOne = node;node=jjtn002;
        } finally {
                                         if (jjtc002) {
                                           jjtree.closeNodeScope(jjtn002,  1);
                                         }
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW:
        case NULL:
        case TRUE:
        case FALSE:
        case THIS:
        case SUPER:
        case IDENTIFIER:
        case LEFTPARAN:
        case INTEGERLITERAL:
        case FLOATLITERAL:
        case CHARLITERAL:
        case DOUBLELITERAL:
        case LONGLITERAL:
        case STRINGLITERAL:
          node = PrimaryExpression();
          break;
        default:
          jj_la1[70] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
         {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public void CastLookAhead() throws ParseException {
    if (jj_2_12(2)) {
      jj_consume_token(LEFTPARAN);
      PrimitiveType();
    } else if (jj_2_13(2147483647)) {
      jj_consume_token(LEFTPARAN);
      Name();
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFTPARAN:
        jj_consume_token(LEFTPARAN);
        Name();
        jj_consume_token(RIGHTPARAN);
        break;
      default:
        jj_la1[71] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public ParentExpression CastExpression() throws ParseException {
 /*@bgen(jjtree) CastExpression */
  ASTCastExpression jjtn000 = new ASTCastExpression(JJTCASTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_14(2147483647)) {
        jj_consume_token(LEFTPARAN);
        jjtn000.type = Type();
        jj_consume_token(RIGHTPARAN);
        jjtn000.expression = UnaryExpression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LEFTPARAN:
          jj_consume_token(LEFTPARAN);
          jjtn000.type = Type();
          jj_consume_token(RIGHTPARAN);
          jjtn000.expression = UnaryExpressionNotCast();
          break;
        default:
          jj_la1[72] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
   {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTPrimaryExpression PrimaryExpression() throws ParseException {
 /*@bgen(jjtree) PrimaryExpression */
  ASTPrimaryExpression jjtn000 = new ASTPrimaryExpression(JJTPRIMARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      PrimaryPrefix();
      label_31:
      while (true) {
        if (jj_2_15(2)) {
          ;
        } else {
          break label_31;
        }
                                         ASTPrimarySuffix jjtn001 = new ASTPrimarySuffix(JJTPRIMARYSUFFIX);
                                         boolean jjtc001 = true;
                                         jjtree.openNodeScope(jjtn001);
        try {
          PrimarySuffix();
        } catch (Throwable jjte001) {
                                         if (jjtc001) {
                                           jjtree.clearNodeScope(jjtn001);
                                           jjtc001 = false;
                                         } else {
                                           jjtree.popNode();
                                         }
                                         if (jjte001 instanceof RuntimeException) {
                                           {if (true) throw (RuntimeException)jjte001;}
                                         }
                                         if (jjte001 instanceof ParseException) {
                                           {if (true) throw (ParseException)jjte001;}
                                         }
                                         {if (true) throw (Error)jjte001;}
        } finally {
                                         if (jjtc001) {
                                           jjtree.closeNodeScope(jjtn001,  2);
                                         }
        }
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public void PrimaryPrefix() throws ParseException {
 ASTName name ;Token t;
    if (jj_2_16(2147483647)) {
      name = Name();
                                 ASTNamePrimaryPrefix jjtn001 = new ASTNamePrimaryPrefix(JJTNAMEPRIMARYPREFIX);
                                 boolean jjtc001 = true;
                                 jjtree.openNodeScope(jjtn001);
      try {
                                 jjtree.closeNodeScope(jjtn001,  1);
                                 jjtc001 = false;
                                jjtn001.name = name;
      } finally {
                                 if (jjtc001) {
                                   jjtree.closeNodeScope(jjtn001,  1);
                                 }
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NULL:
      case TRUE:
      case FALSE:
      case INTEGERLITERAL:
      case FLOATLITERAL:
      case CHARLITERAL:
      case DOUBLELITERAL:
      case LONGLITERAL:
      case STRINGLITERAL:
    ASTLiteralPrimaryPrefix jjtn002 = new ASTLiteralPrimaryPrefix(JJTLITERALPRIMARYPREFIX);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
        try {
          Literal();
        } catch (Throwable jjte002) {
    if (jjtc002) {
      jjtree.clearNodeScope(jjtn002);
      jjtc002 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte002 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte002;}
    }
    if (jjte002 instanceof ParseException) {
      {if (true) throw (ParseException)jjte002;}
    }
    {if (true) throw (Error)jjte002;}
        } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
        }
        break;
      default:
        jj_la1[73] = jj_gen;
        if (jj_2_17(2147483647)) {
          t = jj_consume_token(THIS);
               ASTThisPrimaryPrefix jjtn003 = new ASTThisPrimaryPrefix(JJTTHISPRIMARYPREFIX);
               boolean jjtc003 = true;
               jjtree.openNodeScope(jjtn003);
          try {
               jjtree.closeNodeScope(jjtn003, true);
               jjtc003 = false;
              jjtn003.t = t;
          } finally {
               if (jjtc003) {
                 jjtree.closeNodeScope(jjtn003, true);
               }
          }
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SUPER:
            t = jj_consume_token(SUPER);
               ASTSuperPrimaryPrefix jjtn004 = new ASTSuperPrimaryPrefix(JJTSUPERPRIMARYPREFIX);
               boolean jjtc004 = true;
               jjtree.openNodeScope(jjtn004);
            try {
               jjtree.closeNodeScope(jjtn004, true);
               jjtc004 = false;
              jjtn004.t = t;
            } finally {
               if (jjtc004) {
                 jjtree.closeNodeScope(jjtn004, true);
               }
            }
            break;
          case LEFTPARAN:
            jj_consume_token(LEFTPARAN);
            Expression();
                     ASTParenthesePrimaryPrefix jjtn005 = new ASTParenthesePrimaryPrefix(JJTPARENTHESEPRIMARYPREFIX);
                     boolean jjtc005 = true;
                     jjtree.openNodeScope(jjtn005);
            try {
              jj_consume_token(RIGHTPARAN);
            } finally {
                     if (jjtc005) {
                       jjtree.closeNodeScope(jjtn005,  1);
                     }
            }
            break;
          case NEW:
    ASTAllocationPrimaryPrefix jjtn006 = new ASTAllocationPrimaryPrefix(JJTALLOCATIONPRIMARYPREFIX);
    boolean jjtc006 = true;
    jjtree.openNodeScope(jjtn006);
            try {
              AllocationExpression();
            } catch (Throwable jjte006) {
    if (jjtc006) {
      jjtree.clearNodeScope(jjtn006);
      jjtc006 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte006 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte006;}
    }
    if (jjte006 instanceof ParseException) {
      {if (true) throw (ParseException)jjte006;}
    }
    {if (true) throw (Error)jjte006;}
            } finally {
    if (jjtc006) {
      jjtree.closeNodeScope(jjtn006,  1);
    }
            }
            break;
          default:
            jj_la1[74] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
  }

  final public void PrimarySuffix() throws ParseException {
 Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      jj_consume_token(LBRACKET);
      Expression();
                     ASTArrayExpressionPrimarySuffix jjtn001 = new ASTArrayExpressionPrimarySuffix(JJTARRAYEXPRESSIONPRIMARYSUFFIX);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(RBRACKET);
      } finally {
                     if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001,  1);
                     }
      }
      break;
    case DOT:
      jj_consume_token(DOT);
      t = jj_consume_token(IDENTIFIER);
                         ASTSuffixDotIdentifierNode jjtn002 = new ASTSuffixDotIdentifierNode(JJTSUFFIXDOTIDENTIFIERNODE);
                         boolean jjtc002 = true;
                         jjtree.openNodeScope(jjtn002);
      try {
                         jjtree.closeNodeScope(jjtn002, true);
                         jjtc002 = false;
                        jjtn002.t = t;
      } finally {
                         if (jjtc002) {
                           jjtree.closeNodeScope(jjtn002, true);
                         }
      }
      break;
    case LEFTPARAN:
    ASTArgumentsSuffix jjtn003 = new ASTArgumentsSuffix(JJTARGUMENTSSUFFIX);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
      try {
        Arguments();
      } catch (Throwable jjte003) {
    if (jjtc003) {
      jjtree.clearNodeScope(jjtn003);
      jjtc003 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte003 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte003;}
    }
    if (jjte003 instanceof ParseException) {
      {if (true) throw (ParseException)jjte003;}
    }
    {if (true) throw (Error)jjte003;}
      } finally {
    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003, true);
    }
      }
      break;
    default:
      jj_la1[75] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public ASTName Name() throws ParseException {
 /*@bgen(jjtree) Name */
 ASTName jjtn000 = new ASTName(JJTNAME);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
                         jjtn000.t = t;jjtn000.nameList.add(t.image);
      label_32:
      while (true) {
        if (jj_2_18(2)) {
          ;
        } else {
          break label_32;
        }
        jj_consume_token(DOT);
        t = jj_consume_token(IDENTIFIER);
                                                                                                        jjtn000.nameList.add(t.image);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        {if (true) return jjtn000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public void Literal() throws ParseException {
 Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGERLITERAL:
      t = jj_consume_token(INTEGERLITERAL);
                            ASTIntegerLiteral jjtn001 = new ASTIntegerLiteral(JJTINTEGERLITERAL);
                            boolean jjtc001 = true;
                            jjtree.openNodeScope(jjtn001);
      try {
                            jjtree.closeNodeScope(jjtn001, true);
                            jjtc001 = false;
                           jjtn001.t = t;
      } finally {
                            if (jjtc001) {
                              jjtree.closeNodeScope(jjtn001, true);
                            }
      }
      break;
    case FLOATLITERAL:
      t = jj_consume_token(FLOATLITERAL);
                           ASTFloatLiteral jjtn002 = new ASTFloatLiteral(JJTFLOATLITERAL);
                           boolean jjtc002 = true;
                           jjtree.openNodeScope(jjtn002);
      try {
                           jjtree.closeNodeScope(jjtn002, true);
                           jjtc002 = false;
                          jjtn002.t = t;
      } finally {
                           if (jjtc002) {
                             jjtree.closeNodeScope(jjtn002, true);
                           }
      }
      break;
    case CHARLITERAL:
      t = jj_consume_token(CHARLITERAL);
                           ASTCharLiteral jjtn003 = new ASTCharLiteral(JJTCHARLITERAL);
                           boolean jjtc003 = true;
                           jjtree.openNodeScope(jjtn003);
      try {
                           jjtree.closeNodeScope(jjtn003, true);
                           jjtc003 = false;
                          jjtn003.t = t;
      } finally {
                           if (jjtc003) {
                             jjtree.closeNodeScope(jjtn003, true);
                           }
      }
      break;
    case STRINGLITERAL:
      t = jj_consume_token(STRINGLITERAL);
                           ASTStringLiteral jjtn004 = new ASTStringLiteral(JJTSTRINGLITERAL);
                           boolean jjtc004 = true;
                           jjtree.openNodeScope(jjtn004);
      try {
                           jjtree.closeNodeScope(jjtn004, true);
                           jjtc004 = false;
                          jjtn004.t = t;
      } finally {
                           if (jjtc004) {
                             jjtree.closeNodeScope(jjtn004, true);
                           }
      }
      break;
    case DOUBLELITERAL:
      t = jj_consume_token(DOUBLELITERAL);
                            ASTDoubleLiteral jjtn005 = new ASTDoubleLiteral(JJTDOUBLELITERAL);
                            boolean jjtc005 = true;
                            jjtree.openNodeScope(jjtn005);
      try {
                            jjtree.closeNodeScope(jjtn005, true);
                            jjtc005 = false;
                           jjtn005.t = t;
      } finally {
                            if (jjtc005) {
                              jjtree.closeNodeScope(jjtn005, true);
                            }
      }
      break;
    case LONGLITERAL:
      t = jj_consume_token(LONGLITERAL);
                          ASTLongLiteral jjtn006 = new ASTLongLiteral(JJTLONGLITERAL);
                          boolean jjtc006 = true;
                          jjtree.openNodeScope(jjtn006);
      try {
                          jjtree.closeNodeScope(jjtn006, true);
                          jjtc006 = false;
                         jjtn006.t = t;
      } finally {
                          if (jjtc006) {
                            jjtree.closeNodeScope(jjtn006, true);
                          }
      }
      break;
    case TRUE:
      t = jj_consume_token(TRUE);
                           ASTBooleanLiteral jjtn007 = new ASTBooleanLiteral(JJTBOOLEANLITERAL);
                           boolean jjtc007 = true;
                           jjtree.openNodeScope(jjtn007);
      try {
                           jjtree.closeNodeScope(jjtn007, true);
                           jjtc007 = false;
                          jjtn007.typeName="t";jjtn007.value=true;jjtn007.t = t;
      } finally {
                           if (jjtc007) {
                             jjtree.closeNodeScope(jjtn007, true);
                           }
      }
      break;
    case FALSE:
      t = jj_consume_token(FALSE);
                           ASTBooleanLiteral jjtn008 = new ASTBooleanLiteral(JJTBOOLEANLITERAL);
                           boolean jjtc008 = true;
                           jjtree.openNodeScope(jjtn008);
      try {
                           jjtree.closeNodeScope(jjtn008, true);
                           jjtc008 = false;
                          jjtn008.typeName="t";jjtn008.value=false;jjtn008.t = t;
      } finally {
                           if (jjtc008) {
                             jjtree.closeNodeScope(jjtn008, true);
                           }
      }
      break;
    case NULL:
      t = jj_consume_token(NULL);
                          ASTNullLiteral jjtn009 = new ASTNullLiteral(JJTNULLLITERAL);
                          boolean jjtc009 = true;
                          jjtree.openNodeScope(jjtn009);
      try {
                          jjtree.closeNodeScope(jjtn009, true);
                          jjtc009 = false;
                         jjtn009.t= t;
      } finally {
                          if (jjtc009) {
                            jjtree.closeNodeScope(jjtn009, true);
                          }
      }
      break;
    default:
      jj_la1[76] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public ASTAllocationExpression AllocationExpression() throws ParseException {
 /*@bgen(jjtree) AllocationExpression */
  ASTAllocationExpression jjtn000 = new ASTAllocationExpression(JJTALLOCATIONEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(NEW);
      if (jj_2_19(2147483647)) {
        jjtn000.allocationNode = InstanceAllocation();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case CHAR:
        case INTEGER:
        case FLOAT:
        case DOUBLE:
        case BYTE:
        case SHORT:
        case LONG:
        case STRING:
        case IDENTIFIER:
          jjtn000.allocationNode = ArrayAllocation();
          break;
        default:
          jj_la1[77] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
       jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte000;}
       }
       if (jjte000 instanceof ParseException) {
         {if (true) throw (ParseException)jjte000;}
       }
       {if (true) throw (Error)jjte000;}
    } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTArrayAllocation ArrayAllocation() throws ParseException {
 /*@bgen(jjtree) ArrayAllocation */
  ASTArrayAllocation jjtn000 = new ASTArrayAllocation(JJTARRAYALLOCATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        jjtn000.arrayAllocationNode = InstanceArrayAllocation();
        break;
      case BOOLEAN:
      case CHAR:
      case INTEGER:
      case FLOAT:
      case DOUBLE:
      case BYTE:
      case SHORT:
      case LONG:
      case STRING:
        jjtn000.arrayAllocationNode = PrimitiveArrayAllocation();
        break;
      default:
        jj_la1[78] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTInstanceArrayAllocation InstanceArrayAllocation() throws ParseException {
 /*@bgen(jjtree) InstanceArrayAllocation */
  ASTInstanceArrayAllocation jjtn000 = new ASTInstanceArrayAllocation(JJTINSTANCEARRAYALLOCATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jjtn000.name = Name();
      jjtn000.dimensionParameter = DimensionParameter();
       jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
     {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte000;}
       }
       if (jjte000 instanceof ParseException) {
         {if (true) throw (ParseException)jjte000;}
       }
       {if (true) throw (Error)jjte000;}
    } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTDimensionParameter DimensionParameter() throws ParseException {
 /*@bgen(jjtree) DimensionParameter */
ASTDimensionParameter jjtn000 = new ASTDimensionParameter(JJTDIMENSIONPARAMETER);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);ASTExpression exp ;
    try {
      label_33:
      while (true) {
        jj_consume_token(LBRACKET);
        exp = Expression();
        jj_consume_token(RBRACKET);
                                             jjtn000.expressionList.add(exp);
        if (jj_2_20(2)) {
          ;
        } else {
          break label_33;
        }
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTPrimitiveArrayAllocation PrimitiveArrayAllocation() throws ParseException {
 /*@bgen(jjtree) PrimitiveArrayAllocation */
  ASTPrimitiveArrayAllocation jjtn000 = new ASTPrimitiveArrayAllocation(JJTPRIMITIVEARRAYALLOCATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jjtn000.primitiveType = PrimitiveType();
      jjtn000.dimensionParameter = DimensionParameter();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTInstanceAllocation InstanceAllocation() throws ParseException {
 /*@bgen(jjtree) InstanceAllocation */
  ASTInstanceAllocation jjtn000 = new ASTInstanceAllocation(JJTINSTANCEALLOCATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jjtn000.name = Name();
      jjtn000.arguments = Arguments();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTArguments Arguments() throws ParseException {
 /*@bgen(jjtree) Arguments */
  ASTArguments jjtn000 = new ASTArguments(JJTARGUMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LEFTPARAN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEW:
      case NULL:
      case TRUE:
      case FALSE:
      case Not:
      case THIS:
      case SUPER:
      case IDENTIFIER:
      case LEFTPARAN:
      case PLUS:
      case MINUS:
      case INTEGERLITERAL:
      case FLOATLITERAL:
      case CHARLITERAL:
      case DOUBLELITERAL:
      case LONGLITERAL:
      case STRINGLITERAL:
        jjtn000.argumentsList = ArgumentsList();
        break;
      default:
        jj_la1[79] = jj_gen;
        ;
      }
      jj_consume_token(RIGHTPARAN);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTArgumentsList ArgumentsList() throws ParseException {
 /*@bgen(jjtree) ArgumentsList */
 ASTArgumentsList jjtn000 = new ASTArgumentsList(JJTARGUMENTSLIST);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);ASTExpression e;
    try {
      e = Expression();
                     jjtn000.expressionList.add(e);
      label_34:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[80] = jj_gen;
          break label_34;
        }
        jj_consume_token(COMMA);
        e = Expression();
                                                                         jjtn000.expressionList.add(e);
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTStatement Statement() throws ParseException {
 /*@bgen(jjtree) Statement */
  ASTStatement jjtn000 = new ASTStatement(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_21(2147483647)) {
        jjtn000.pStatement = LabelStatement();
      } else if (jj_2_22(2147483647)) {
        try {
          jjtn000.pStatement = AssignmentStatement();
          jj_consume_token(SEMICOLON);
        } catch (ParseException e) {
                error("incorrect assignement statment");
                skiptoOrEndOfLine(SEMICOLON);
        }
      } else if (jj_2_23(2147483647)) {
        try {
          //jjtThis.localVariableDeclaration
                  jjtn000.pStatement = LocalVariableDeclaration();
          jj_consume_token(SEMICOLON);
        } catch (ParseException e) {
                error("invalid local variable declaration");
                skiptoOrEndOfLine(SEMICOLON);
        }
      } else if (jj_2_24(2147483647)) {
        try {
          jjtn000.pStatement = MethodCallStatement();
          jj_consume_token(SEMICOLON);
        } catch (ParseException e) {
                error("incorrect method call statement");
                skiptoOrEndOfLine(SEMICOLON);
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LBRACE:
          jjtn000.pStatement = Block();
          break;
        case SEMICOLON:
          jjtn000.pStatement = EmptyStatement();
          break;
        case SWITCH:
          try {
            jjtn000.pStatement = SwitchStatement();
          } catch (ParseException e) {
                error("incorrect switch statement");
          }
          break;
        case IF:
          try {
            jjtn000.pStatement = IfStatement();
          } catch (ParseException e) {
                error("incorrect if statement");
          }
          break;
        case WHILE:
          jjtn000.pStatement = WhileStatement();
          break;
        case DO:
          jjtn000.pStatement = DoStatement();
          break;
        case FOR:
          jjtn000.pStatement = ForStatement();
          break;
        case RETURN:
          jjtn000.pStatement = ReturnStatement();
          break;
        case CONTIUNE:
          jjtn000.pStatement = ContinueStatement();
          break;
        case TRY:
          jjtn000.pStatement = TryStatement();
          break;
        case THROW:
          jjtn000.pStatement = ThrowStatement();
          break;
        case REBIND:
          jjtn000.pStatement = RebindStatement();
          break;
        case BREAK:
          jjtn000.pStatement = BreakStatement();
          break;
        case EXECUTE:
          jjtn000.pStatement = ExecuteTimesStatement();
          break;
        default:
          jj_la1[81] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTLabelStatement LabelStatement() throws ParseException {
 /*@bgen(jjtree) LabelStatement */
  ASTLabelStatement jjtn000 = new ASTLabelStatement(JJTLABELSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IDENTIFIER);
      jj_consume_token(COLON);
      jjtn000.block = Block();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTBreakStatement BreakStatement() throws ParseException {
 /*@bgen(jjtree) BreakStatement */
  ASTBreakStatement jjtn000 = new ASTBreakStatement(JJTBREAKSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jjtn000.t = jj_consume_token(BREAK);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        jjtn000.label = jj_consume_token(IDENTIFIER);
        break;
      default:
        jj_la1[82] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTExecuteTimesStatement ExecuteTimesStatement() throws ParseException {
 /*@bgen(jjtree) ExecuteTimesStatement */
  ASTExecuteTimesStatement jjtn000 = new ASTExecuteTimesStatement(JJTEXECUTETIMESSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jjtn000.t = jj_consume_token(EXECUTE);
      jjtn000.expression = Expression();
      jj_consume_token(TIMES);
      jjtn000.statementBody = Statement();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTMethodCallStatement MethodCallStatement() throws ParseException {
 /*@bgen(jjtree) MethodCallStatement */
  ASTMethodCallStatement jjtn000 = new ASTMethodCallStatement(JJTMETHODCALLSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jjtn000.primaryExpression = PrimaryExpression();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
    } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTAssignmentStatement AssignmentStatement() throws ParseException {
 /*@bgen(jjtree) AssignmentStatement */
  ASTAssignmentStatement jjtn000 = new ASTAssignmentStatement(JJTASSIGNMENTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jjtn000.primaryExpression = PrimaryExpression();
      jjtn000.assignmentOperator = AssignmentOperator();
      jjtn000.expression = Expression();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

//Only used for LookAhead in Statemnt
  final public void AssignmentStatementLookAhead() throws ParseException {
    PrimaryExpression();
    AssignmentOperator();
  }

  final public ASTAssignmentOperator AssignmentOperator() throws ParseException {
 /*@bgen(jjtree) AssignmentOperator */
  ASTAssignmentOperator jjtn000 = new ASTAssignmentOperator(JJTASSIGNMENTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN:
        jj_consume_token(ASSIGN);
                      jjtn000.operator= UCSYOperator.ASSIGNMENT;
        break;
      case PLUSASSIGN:
        jj_consume_token(PLUSASSIGN);
                      jjtn000.operator= UCSYOperator.PLUS_ASSIGN;
        break;
      case MINUSASSIGN:
        jj_consume_token(MINUSASSIGN);
                      jjtn000.operator= UCSYOperator.MINUS_ASSIGN;
        break;
      case MULASSIGN:
        jj_consume_token(MULASSIGN);
                      jjtn000.operator= UCSYOperator.MULT_ASSIGN;
        break;
      case DIVASSIGN:
        jj_consume_token(DIVASSIGN);
                      jjtn000.operator= UCSYOperator.DIV_ASSIGN;
        break;
      case MODASSIGN:
        jj_consume_token(MODASSIGN);
                      jjtn000.operator= UCSYOperator.MOD_ASSIGN;
        break;
      default:
        jj_la1[83] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTBlock Block() throws ParseException {
 /*@bgen(jjtree) Block */
        ASTBlock jjtn000 = new ASTBlock(JJTBLOCK);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);ASTStatement s;
    try {
      jj_consume_token(LBRACE);
      label_35:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case CHAR:
        case INTEGER:
        case FLOAT:
        case DOUBLE:
        case BYTE:
        case SHORT:
        case LONG:
        case DO:
        case IF:
        case WHILE:
        case FOR:
        case NEW:
        case NULL:
        case RETURN:
        case BREAK:
        case CONTIUNE:
        case SWITCH:
        case STRING:
        case TRUE:
        case FALSE:
        case TRY:
        case THROW:
        case REBIND:
        case THIS:
        case SUPER:
        case EXECUTE:
        case IDENTIFIER:
        case LEFTPARAN:
        case SEMICOLON:
        case AT:
        case LBRACE:
        case INTEGERLITERAL:
        case FLOATLITERAL:
        case CHARLITERAL:
        case DOUBLELITERAL:
        case LONGLITERAL:
        case STRINGLITERAL:
          ;
          break;
        default:
          jj_la1[84] = jj_gen;
          break label_35;
        }
        s = Statement();
                                   jjtn000.statementList.add(s);
      }
      jj_consume_token(RBRACE);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTEmptyStatement EmptyStatement() throws ParseException {
 /*@bgen(jjtree) EmptyStatement */
  ASTEmptyStatement jjtn000 = new ASTEmptyStatement(JJTEMPTYSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SEMICOLON);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTSwitchStatement SwitchStatement() throws ParseException {
 /*@bgen(jjtree) SwitchStatement */
        ASTSwitchStatement jjtn000 = new ASTSwitchStatement(JJTSWITCHSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);ASTCaseStatement cs;
    try {
      jj_consume_token(SWITCH);
      jj_consume_token(LEFTPARAN);
      jjtn000.expression = Expression();
      jj_consume_token(RIGHTPARAN);
      jj_consume_token(LBRACE);
      label_36:
      while (true) {
        cs = CaseStatement();
                                       jjtn000.caseStatementList.add(cs);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CASE:
          ;
          break;
        default:
          jj_la1[85] = jj_gen;
          break label_36;
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MYDEFAULT:
        jjtn000.defaultStatement = DefaultStatement();
        break;
      default:
        jj_la1[86] = jj_gen;
        ;
      }
      jj_consume_token(RBRACE);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTCaseStatement CaseStatement() throws ParseException {
 /*@bgen(jjtree) CaseStatement */
        ASTCaseStatement jjtn000 = new ASTCaseStatement(JJTCASESTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);ASTStatement s;
    try {
      try {
        jjtn000.t = jj_consume_token(CASE);
        jjtn000.caseExpression = CaseExpression();
        jj_consume_token(COLON);
        label_37:
        while (true) {
          s = Statement();
                                 jjtn000.statementList.add(s);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BOOLEAN:
          case CHAR:
          case INTEGER:
          case FLOAT:
          case DOUBLE:
          case BYTE:
          case SHORT:
          case LONG:
          case DO:
          case IF:
          case WHILE:
          case FOR:
          case NEW:
          case NULL:
          case RETURN:
          case BREAK:
          case CONTIUNE:
          case SWITCH:
          case STRING:
          case TRUE:
          case FALSE:
          case TRY:
          case THROW:
          case REBIND:
          case THIS:
          case SUPER:
          case EXECUTE:
          case IDENTIFIER:
          case LEFTPARAN:
          case SEMICOLON:
          case AT:
          case LBRACE:
          case INTEGERLITERAL:
          case FLOATLITERAL:
          case CHARLITERAL:
          case DOUBLELITERAL:
          case LONGLITERAL:
          case STRINGLITERAL:
            ;
            break;
          default:
            jj_la1[87] = jj_gen;
            break label_37;
          }
        }
      } catch (ParseException e) {
                error("incorrect case statement");
                int set[] = {CASE,DEFAULT};
                skipBeforeSet(set);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTCaseExpression CaseExpression() throws ParseException {
 /*@bgen(jjtree) CaseExpression */
 ASTCaseExpression jjtn000 = new ASTCaseExpression(JJTCASEEXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGERLITERAL:
        t = jj_consume_token(INTEGERLITERAL);
                                     ASTIntegerLiteral jjtn001 = new ASTIntegerLiteral(JJTINTEGERLITERAL);
                                     boolean jjtc001 = true;
                                     jjtree.openNodeScope(jjtn001);
        try {
                                     jjtree.closeNodeScope(jjtn001, true);
                                     jjtc001 = false;
                                    jjtn001.t = t;
        } finally {
                                     if (jjtc001) {
                                       jjtree.closeNodeScope(jjtn001, true);
                                     }
        }
        break;
      case CHARLITERAL:
        t = jj_consume_token(CHARLITERAL);
                                   ASTCharLiteral jjtn002 = new ASTCharLiteral(JJTCHARLITERAL);
                                   boolean jjtc002 = true;
                                   jjtree.openNodeScope(jjtn002);
        try {
                                   jjtree.closeNodeScope(jjtn002, true);
                                   jjtc002 = false;
                                  jjtn002.t = t;
        } finally {
                                   if (jjtc002) {
                                     jjtree.closeNodeScope(jjtn002, true);
                                   }
        }
        break;
      case IDENTIFIER:
        t = jj_consume_token(IDENTIFIER);
                                 ASTCaseIdentifier jjtn003 = new ASTCaseIdentifier(JJTCASEIDENTIFIER);
                                 boolean jjtc003 = true;
                                 jjtree.openNodeScope(jjtn003);
        try {
                                 jjtree.closeNodeScope(jjtn003, true);
                                 jjtc003 = false;
                                jjtn003.t = t;
        } finally {
                                 if (jjtc003) {
                                   jjtree.closeNodeScope(jjtn003, true);
                                 }
        }
        break;
      default:
        jj_la1[88] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTDefaultStatement DefaultStatement() throws ParseException {
 /*@bgen(jjtree) DefaultStatement */
        ASTDefaultStatement jjtn000 = new ASTDefaultStatement(JJTDEFAULTSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);ASTStatement s ;
    try {
      try {
        jj_consume_token(MYDEFAULT);
        jj_consume_token(COLON);
        label_38:
        while (true) {
          s = Statement();
                                  jjtn000.statementList.add(s);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BOOLEAN:
          case CHAR:
          case INTEGER:
          case FLOAT:
          case DOUBLE:
          case BYTE:
          case SHORT:
          case LONG:
          case DO:
          case IF:
          case WHILE:
          case FOR:
          case NEW:
          case NULL:
          case RETURN:
          case BREAK:
          case CONTIUNE:
          case SWITCH:
          case STRING:
          case TRUE:
          case FALSE:
          case TRY:
          case THROW:
          case REBIND:
          case THIS:
          case SUPER:
          case EXECUTE:
          case IDENTIFIER:
          case LEFTPARAN:
          case SEMICOLON:
          case AT:
          case LBRACE:
          case INTEGERLITERAL:
          case FLOATLITERAL:
          case CHARLITERAL:
          case DOUBLELITERAL:
          case LONGLITERAL:
          case STRINGLITERAL:
            ;
            break;
          default:
            jj_la1[89] = jj_gen;
            break label_38;
          }
        }
      } catch (ParseException e) {
                error("in default statement");
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTIfStatement IfStatement() throws ParseException {
 /*@bgen(jjtree) IfStatement */
  ASTIfStatement jjtn000 = new ASTIfStatement(JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IF);
      jj_consume_token(LEFTPARAN);
      jjtn000.expression = Expression();
      jj_consume_token(RIGHTPARAN);
      jjtn000.thenPartStatement = Statement();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        jj_consume_token(ELSE);
        jjtn000.elsePartStatement = Statement();
        break;
      default:
        jj_la1[90] = jj_gen;
        ;
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTWhileStatement WhileStatement() throws ParseException {
 /*@bgen(jjtree) WhileStatement */
  ASTWhileStatement jjtn000 = new ASTWhileStatement(JJTWHILESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      try {
        jj_consume_token(WHILE);
        jj_consume_token(LEFTPARAN);
        jjtn000.expression = Expression();
        jj_consume_token(RIGHTPARAN);
        jjtn000.statement = Statement();
      } catch (ParseException e) {
                error("invalid use of while statement");
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTDoStatement DoStatement() throws ParseException {
 /*@bgen(jjtree) DoStatement */
  ASTDoStatement jjtn000 = new ASTDoStatement(JJTDOSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      try {
        jj_consume_token(DO);
        jjtn000.statement = Statement();
        jj_consume_token(WHILE);
        jj_consume_token(LEFTPARAN);
        jjtn000.expression = Expression();
        jj_consume_token(RIGHTPARAN);
        jj_consume_token(SEMICOLON);
      } catch (ParseException e) {
                error("incorrect do statement");
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTForStatement ForStatement() throws ParseException {
 /*@bgen(jjtree) ForStatement */
  ASTForStatement jjtn000 = new ASTForStatement(JJTFORSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      try {
        jjtn000.t = jj_consume_token(FOR);
        jj_consume_token(LEFTPARAN);
        jjtn000.forInitializer = ForInitializer();
        jj_consume_token(SEMICOLON);
        jjtn000.forExpression = ForExpression();
        jj_consume_token(SEMICOLON);
        jjtn000.forUpdator = ForUpdator();
        jj_consume_token(RIGHTPARAN);
      } catch (ParseException e) {
                error("incorrect for header");
                skiptoOrEndOfLine(RIGHTPARAN);
      }
      jjtn000.statement = Statement();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTForInitializer ForInitializer() throws ParseException {
 /*@bgen(jjtree) ForInitializer */
  ASTForInitializer jjtn000 = new ASTForInitializer(JJTFORINITIALIZER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BOOLEAN:
        case CHAR:
        case INTEGER:
        case FLOAT:
        case DOUBLE:
        case BYTE:
        case SHORT:
        case LONG:
        case STRING:
        case IDENTIFIER:
        case AT:
          jjtn000.forInit = ForInit();
          break;
        default:
          jj_la1[91] = jj_gen;
          ;
        }
      } catch (ParseException e) {
                error("invalid for intitalizing expression");
                skipBefore(SEMICOLON);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTForExpression ForExpression() throws ParseException {
 /*@bgen(jjtree) ForExpression */
  ASTForExpression jjtn000 = new ASTForExpression(JJTFOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW:
        case NULL:
        case TRUE:
        case FALSE:
        case Not:
        case THIS:
        case SUPER:
        case IDENTIFIER:
        case LEFTPARAN:
        case PLUS:
        case MINUS:
        case INTEGERLITERAL:
        case FLOATLITERAL:
        case CHARLITERAL:
        case DOUBLELITERAL:
        case LONGLITERAL:
        case STRINGLITERAL:
          jjtn000.expression = Expression();
          break;
        default:
          jj_la1[92] = jj_gen;
          ;
        }
      } catch (ParseException e) {
                error("invalid for test expression");
                skipBefore(SEMICOLON);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTForUpdator ForUpdator() throws ParseException {
 /*@bgen(jjtree) ForUpdator */
  ASTForUpdator jjtn000 = new ASTForUpdator(JJTFORUPDATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW:
        case NULL:
        case TRUE:
        case FALSE:
        case THIS:
        case SUPER:
        case IDENTIFIER:
        case LEFTPARAN:
        case INTEGERLITERAL:
        case FLOATLITERAL:
        case CHARLITERAL:
        case DOUBLELITERAL:
        case LONGLITERAL:
        case STRINGLITERAL:
          jjtn000.forUpdate = ForUpdate();
          break;
        default:
          jj_la1[93] = jj_gen;
          ;
        }
      } catch (ParseException e) {
                error("invalid for update staement");
                skipBefore(RIGHTPARAN);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTForInit ForInit() throws ParseException {
 /*@bgen(jjtree) ForInit */
  ASTForInit jjtn000 = new ASTForInit(JJTFORINIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jjtn000.localVariableDeclaration = LocalVariableDeclaration();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTLocalVariableDeclaration LocalVariableDeclaration() throws ParseException {
 /*@bgen(jjtree) LocalVariableDeclaration */
        ASTLocalVariableDeclaration jjtn000 = new ASTLocalVariableDeclaration(JJTLOCALVARIABLEDECLARATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);ASTVariableDeclarator varDecl;
    try {
      jjtn000.type = Type();
      varDecl = VariableDeclarator();
                                                              jjtn000.variableDeclaratorList.add(varDecl);
      label_39:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[94] = jj_gen;
          break label_39;
        }
        jj_consume_token(COMMA);
        varDecl = VariableDeclarator();
                                                                                                                                                  jjtn000.variableDeclaratorList.add(varDecl);
      }
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTForUpdate ForUpdate() throws ParseException {
 /*@bgen(jjtree) ForUpdate */
  ASTForUpdate jjtn000 = new ASTForUpdate(JJTFORUPDATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jjtn000.assignmentStatement = AssignmentStatement();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTReturnStatement ReturnStatement() throws ParseException {
 /*@bgen(jjtree) ReturnStatement */
  ASTReturnStatement jjtn000 = new ASTReturnStatement(JJTRETURNSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      try {
        jjtn000.t = jj_consume_token(RETURN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW:
        case NULL:
        case TRUE:
        case FALSE:
        case Not:
        case THIS:
        case SUPER:
        case IDENTIFIER:
        case LEFTPARAN:
        case PLUS:
        case MINUS:
        case INTEGERLITERAL:
        case FLOATLITERAL:
        case CHARLITERAL:
        case DOUBLELITERAL:
        case LONGLITERAL:
        case STRINGLITERAL:
          jjtn000.expression = Expression();
          break;
        default:
          jj_la1[95] = jj_gen;
          ;
        }
        jj_consume_token(SEMICOLON);
      } catch (ParseException e) {
                error("invalid return statement");
                skiptoOrEndOfLine(SEMICOLON);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTContinueStatement ContinueStatement() throws ParseException {
 /*@bgen(jjtree) ContinueStatement */
  ASTContinueStatement jjtn000 = new ASTContinueStatement(JJTCONTINUESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(CONTIUNE);
      jj_consume_token(SEMICOLON);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTTryStatement TryStatement() throws ParseException {
 /*@bgen(jjtree) TryStatement */
        ASTTryStatement jjtn000 = new ASTTryStatement(JJTTRYSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);ASTCatchStatement cs;
    try {
      jj_consume_token(TRY);
      jjtn000.block = Block();
      label_40:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CATCH:
          ;
          break;
        default:
          jj_la1[96] = jj_gen;
          break label_40;
        }
        cs = CatchStatement();
                               jjtn000.catchStatementList.add(cs);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FINALLY:
        jj_consume_token(FINALLY);
        jjtn000.finallyBlock = Block();
        break;
      default:
        jj_la1[97] = jj_gen;
        ;
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTCatchStatement CatchStatement() throws ParseException {
 /*@bgen(jjtree) CatchStatement */
  ASTCatchStatement jjtn000 = new ASTCatchStatement(JJTCATCHSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(CATCH);
      jjtn000.formalParameters = FormalParameters();
      jjtn000.block = Block();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTThrowStatement ThrowStatement() throws ParseException {
 /*@bgen(jjtree) ThrowStatement */
  ASTThrowStatement jjtn000 = new ASTThrowStatement(JJTTHROWSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      try {
        jj_consume_token(THROW);
        jjtn000.expression = Expression();
        jj_consume_token(SEMICOLON);
      } catch (ParseException e) {
                error("invalid throw satement");
                skiptoOrEndOfLine(SEMICOLON);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTRebindStatement RebindStatement() throws ParseException {
 /*@bgen(jjtree) RebindStatement */
  ASTRebindStatement jjtn000 = new ASTRebindStatement(JJTREBINDSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(REBIND);
      jjtn000.destinationExpression = Name();
      jj_consume_token(WITH);
      jjtn000.rebindMethodNameToken = jj_consume_token(IDENTIFIER);
      jj_consume_token(OF);
      jjtn000.rebindClassToken = jj_consume_token(IDENTIFIER);
      jj_consume_token(SEMICOLON);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  final private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  final private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  final private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  final private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  final private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  final private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  final private boolean jj_3R_51() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3_20() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_55()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_241() {
    Token xsp;
    if (jj_3_20()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_20()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_3R_47()) return true;
    return false;
  }

  final private boolean jj_3R_123() {
    if (jj_3R_51()) return true;
    return false;
  }

  final private boolean jj_3_18() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_122() {
    if (jj_3R_47()) return true;
    return false;
  }

  final private boolean jj_3R_230() {
    if (jj_3R_52()) return true;
    if (jj_3R_241()) return true;
    return false;
  }

  final private boolean jj_3R_89() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_122()) {
    jj_scanpos = xsp;
    if (jj_3R_123()) return true;
    }
    return false;
  }

  final private boolean jj_3R_196() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(LEFTPARAN)) return true;
    if (jj_3R_213()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_3R_214()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_3R_215()) return true;
    if (jj_scan_token(RIGHTPARAN)) return true;
    if (jj_3R_141()) return true;
    return false;
  }

  final private boolean jj_3R_99() {
    if (jj_scan_token(NATIVE)) return true;
    return false;
  }

  final private boolean jj_3R_98() {
    if (jj_scan_token(REBINDABLE)) return true;
    return false;
  }

  final private boolean jj_3R_97() {
    if (jj_scan_token(MULTI)) return true;
    return false;
  }

  final private boolean jj_3R_221() {
    if (jj_3R_231()) return true;
    return false;
  }

  final private boolean jj_3R_96() {
    if (jj_scan_token(ABSTRACT)) return true;
    return false;
  }

  final private boolean jj_3R_95() {
    if (jj_scan_token(FINAL)) return true;
    return false;
  }

  final private boolean jj_3R_145() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_89()) return true;
    return false;
  }

  final private boolean jj_3R_94() {
    if (jj_scan_token(OVERRIDE)) return true;
    return false;
  }

  final private boolean jj_3R_220() {
    if (jj_3R_230()) return true;
    return false;
  }

  final private boolean jj_3R_205() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_220()) {
    jj_scanpos = xsp;
    if (jj_3R_221()) return true;
    }
    return false;
  }

  final private boolean jj_3R_93() {
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  final private boolean jj_3_19() {
    if (jj_3R_54()) return true;
    return false;
  }

  final private boolean jj_3R_132() {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  final private boolean jj_3R_60() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_101() {
    if (jj_3R_89()) return true;
    return false;
  }

  final private boolean jj_3R_100() {
    if (jj_3R_132()) return true;
    return false;
  }

  final private boolean jj_3R_182() {
    if (jj_3R_205()) return true;
    return false;
  }

  final private boolean jj_3R_195() {
    if (jj_scan_token(DO)) return true;
    if (jj_3R_141()) return true;
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LEFTPARAN)) return true;
    if (jj_3R_55()) return true;
    if (jj_scan_token(RIGHTPARAN)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_181() {
    if (jj_3R_54()) return true;
    return false;
  }

  final private boolean jj_3R_61() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) return true;
    }
    return false;
  }

  final private boolean jj_3R_144() {
    if (jj_scan_token(NEW)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_181()) {
    jj_scanpos = xsp;
    if (jj_3R_182()) return true;
    }
    return false;
  }

  final private boolean jj_3R_180() {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  final private boolean jj_3R_179() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  final private boolean jj_3R_133() {
    if (jj_3R_89()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_145()) jj_scanpos = xsp;
    if (jj_3R_124()) return true;
    return false;
  }

  final private boolean jj_3R_178() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  final private boolean jj_3R_45() {
    if (jj_scan_token(FUNCTOR)) return true;
    if (jj_3R_61()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LEFTPARAN)) return true;
    return false;
  }

  final private boolean jj_3R_194() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LEFTPARAN)) return true;
    if (jj_3R_55()) return true;
    if (jj_scan_token(RIGHTPARAN)) return true;
    if (jj_3R_141()) return true;
    return false;
  }

  final private boolean jj_3R_177() {
    if (jj_scan_token(LONGLITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_63() {
    if (jj_3R_60()) return true;
    return false;
  }

  final private boolean jj_3R_176() {
    if (jj_scan_token(DOUBLELITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_43() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_63()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_61()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LEFTPARAN)) return true;
    return false;
  }

  final private boolean jj_3R_102() {
    if (jj_3R_133()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_134()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_175() {
    if (jj_scan_token(STRINGLITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_212() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_141()) return true;
    return false;
  }

  final private boolean jj_3R_174() {
    if (jj_scan_token(CHARLITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_193() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LEFTPARAN)) return true;
    if (jj_3R_55()) return true;
    if (jj_scan_token(RIGHTPARAN)) return true;
    if (jj_3R_141()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_212()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_173() {
    if (jj_scan_token(FLOATLITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_172() {
    if (jj_scan_token(INTEGERLITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_62() {
    if (jj_scan_token(LEFTPARAN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_102()) jj_scanpos = xsp;
    if (jj_scan_token(RIGHTPARAN)) return true;
    return false;
  }

  final private boolean jj_3R_143() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_172()) {
    jj_scanpos = xsp;
    if (jj_3R_173()) {
    jj_scanpos = xsp;
    if (jj_3R_174()) {
    jj_scanpos = xsp;
    if (jj_3R_175()) {
    jj_scanpos = xsp;
    if (jj_3R_176()) {
    jj_scanpos = xsp;
    if (jj_3R_177()) {
    jj_scanpos = xsp;
    if (jj_3R_178()) {
    jj_scanpos = xsp;
    if (jj_3R_179()) {
    jj_scanpos = xsp;
    if (jj_3R_180()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_238() {
    if (jj_3R_141()) return true;
    return false;
  }

  final private boolean jj_3R_52() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_18()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_225() {
    if (jj_scan_token(MYDEFAULT)) return true;
    if (jj_scan_token(COLON)) return true;
    Token xsp;
    if (jj_3R_238()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_238()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_244() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_85() {
    if (jj_3R_44()) return true;
    return false;
  }

  final private boolean jj_3R_243() {
    if (jj_scan_token(CHARLITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_242() {
    if (jj_scan_token(INTEGERLITERAL)) return true;
    return false;
  }

  final private boolean jj_3R_84() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_219() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_142()) return true;
    return false;
  }

  final private boolean jj_3R_83() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_55()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_53() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_17() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  final private boolean jj_3_15() {
    if (jj_3R_53()) return true;
    return false;
  }

  final private boolean jj_3R_236() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_242()) {
    jj_scanpos = xsp;
    if (jj_3R_243()) {
    jj_scanpos = xsp;
    if (jj_3R_244()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_131() {
    if (jj_3R_144()) return true;
    return false;
  }

  final private boolean jj_3R_130() {
    if (jj_scan_token(LEFTPARAN)) return true;
    if (jj_3R_55()) return true;
    if (jj_scan_token(RIGHTPARAN)) return true;
    return false;
  }

  final private boolean jj_3_16() {
    if (jj_3R_52()) return true;
    return false;
  }

  final private boolean jj_3R_129() {
    if (jj_scan_token(SUPER)) return true;
    return false;
  }

  final private boolean jj_3R_237() {
    if (jj_3R_141()) return true;
    return false;
  }

  final private boolean jj_3R_128() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  final private boolean jj_3R_125() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_142()) return true;
    return false;
  }

  final private boolean jj_3R_127() {
    if (jj_3R_143()) return true;
    return false;
  }

  final private boolean jj_3R_92() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_126()) {
    jj_scanpos = xsp;
    if (jj_3R_127()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) {
    jj_scanpos = xsp;
    if (jj_3R_129()) {
    jj_scanpos = xsp;
    if (jj_3R_130()) {
    jj_scanpos = xsp;
    if (jj_3R_131()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_126() {
    if (jj_3R_52()) return true;
    return false;
  }

  final private boolean jj_3R_59() {
    if (jj_3R_92()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_15()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_14() {
    if (jj_scan_token(LEFTPARAN)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  final private boolean jj_3R_204() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_142()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_219()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_224() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_236()) return true;
    if (jj_scan_token(COLON)) return true;
    Token xsp;
    if (jj_3R_237()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_237()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_211() {
    if (jj_3R_225()) return true;
    return false;
  }

  final private boolean jj_3R_171() {
    if (jj_3R_55()) return true;
    return false;
  }

  final private boolean jj_3R_234() {
    if (jj_scan_token(LEFTPARAN)) return true;
    if (jj_3R_89()) return true;
    if (jj_scan_token(RIGHTPARAN)) return true;
    if (jj_3R_136()) return true;
    return false;
  }

  final private boolean jj_3R_210() {
    if (jj_3R_224()) return true;
    return false;
  }

  final private boolean jj_3_13() {
    if (jj_scan_token(LEFTPARAN)) return true;
    if (jj_3R_52()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_170() {
    if (jj_3R_204()) return true;
    return false;
  }

  final private boolean jj_3R_223() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_234()) {
    jj_scanpos = xsp;
    if (jj_3R_235()) return true;
    }
    return false;
  }

  final private boolean jj_3R_235() {
    if (jj_scan_token(LEFTPARAN)) return true;
    if (jj_3R_89()) return true;
    if (jj_scan_token(RIGHTPARAN)) return true;
    if (jj_3R_186()) return true;
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_3R_50()) return true;
    return false;
  }

  final private boolean jj_3R_73() {
    if (jj_scan_token(LEFTPARAN)) return true;
    if (jj_3R_52()) return true;
    if (jj_scan_token(RIGHTPARAN)) return true;
    return false;
  }

  final private boolean jj_3R_72() {
    if (jj_scan_token(LEFTPARAN)) return true;
    if (jj_3R_52()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_192() {
    if (jj_scan_token(SWITCH)) return true;
    if (jj_scan_token(LEFTPARAN)) return true;
    if (jj_3R_55()) return true;
    if (jj_scan_token(RIGHTPARAN)) return true;
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    if (jj_3R_210()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_210()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_211()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_142() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_170()) {
    jj_scanpos = xsp;
    if (jj_3R_171()) return true;
    }
    return false;
  }

  final private boolean jj_3_12() {
    if (jj_scan_token(LEFTPARAN)) return true;
    if (jj_3R_51()) return true;
    return false;
  }

  final private boolean jj_3R_50() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_208() {
    if (jj_3R_223()) return true;
    return false;
  }

  final private boolean jj_3R_209() {
    if (jj_3R_59()) return true;
    return false;
  }

  final private boolean jj_3R_207() {
    if (jj_scan_token(Not)) return true;
    if (jj_3R_136()) return true;
    return false;
  }

  final private boolean jj_3R_42() {
    if (jj_scan_token(ABSTRACT)) return true;
    if (jj_3R_61()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_62()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_191() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_124() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_115() {
    if (jj_3R_141()) return true;
    return false;
  }

  final private boolean jj_3R_186() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_207()) {
    jj_scanpos = xsp;
    if (jj_3R_208()) {
    jj_scanpos = xsp;
    if (jj_3R_209()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_185() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_136()) return true;
    return false;
  }

  final private boolean jj_3R_184() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_136()) return true;
    return false;
  }

  final private boolean jj_3R_147() {
    if (jj_3R_186()) return true;
    return false;
  }

  final private boolean jj_3R_87() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_115()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_90() {
    if (jj_3R_124()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_125()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_121() {
    if (jj_scan_token(MODASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_120() {
    if (jj_scan_token(DIVASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_119() {
    if (jj_scan_token(MULASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_118() {
    if (jj_scan_token(MINUSASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_117() {
    if (jj_scan_token(PLUSASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_116() {
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  final private boolean jj_3R_146() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_184()) {
    jj_scanpos = xsp;
    if (jj_3R_185()) return true;
    }
    return false;
  }

  final private boolean jj_3R_136() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_146()) {
    jj_scanpos = xsp;
    if (jj_3R_147()) return true;
    }
    return false;
  }

  final private boolean jj_3R_150() {
    if (jj_scan_token(MOD)) return true;
    if (jj_3R_136()) return true;
    return false;
  }

  final private boolean jj_3R_149() {
    if (jj_scan_token(DIV)) return true;
    if (jj_3R_136()) return true;
    return false;
  }

  final private boolean jj_3R_88() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) {
    jj_scanpos = xsp;
    if (jj_3R_118()) {
    jj_scanpos = xsp;
    if (jj_3R_119()) {
    jj_scanpos = xsp;
    if (jj_3R_120()) {
    jj_scanpos = xsp;
    if (jj_3R_121()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_137() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_148()) {
    jj_scanpos = xsp;
    if (jj_3R_149()) {
    jj_scanpos = xsp;
    if (jj_3R_150()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_148() {
    if (jj_scan_token(MUL)) return true;
    if (jj_3R_136()) return true;
    return false;
  }

  final private boolean jj_3R_57() {
    if (jj_3R_59()) return true;
    if (jj_3R_88()) return true;
    return false;
  }

  final private boolean jj_3R_108() {
    if (jj_3R_136()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_137()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_139() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_108()) return true;
    return false;
  }

  final private boolean jj_3R_46() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_62()) return true;
    return false;
  }

  final private boolean jj_3R_189() {
    if (jj_3R_59()) return true;
    if (jj_3R_88()) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  final private boolean jj_3R_109() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_138()) {
    jj_scanpos = xsp;
    if (jj_3R_139()) return true;
    }
    return false;
  }

  final private boolean jj_3R_138() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_108()) return true;
    return false;
  }

  final private boolean jj_3R_190() {
    if (jj_3R_59()) return true;
    return false;
  }

  final private boolean jj_3R_91() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_90()) return true;
    return false;
  }

  final private boolean jj_3R_70() {
    if (jj_3R_108()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_109()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_203() {
    if (jj_scan_token(EXECUTE)) return true;
    if (jj_3R_55()) return true;
    if (jj_scan_token(TIMES)) return true;
    if (jj_3R_141()) return true;
    return false;
  }

  final private boolean jj_3R_113() {
    if (jj_scan_token(LTE)) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_201() {
    if (jj_scan_token(REBIND)) return true;
    if (jj_3R_52()) return true;
    if (jj_scan_token(WITH)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(OF)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_3R_46()) return true;
    if (jj_scan_token(BEFORE)) return true;
    return false;
  }

  final private boolean jj_3R_112() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_111() {
    if (jj_scan_token(GTE)) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_202() {
    if (jj_scan_token(BREAK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(78)) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_71() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) {
    jj_scanpos = xsp;
    if (jj_3R_112()) {
    jj_scanpos = xsp;
    if (jj_3R_113()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_110() {
    if (jj_scan_token(GT)) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_49() {
    if (jj_3R_70()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_71()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_56() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_3R_49()) return true;
    if (jj_scan_token(INSTANCEOF)) return true;
    return false;
  }

  final private boolean jj_3R_200() {
    if (jj_scan_token(THROW)) return true;
    if (jj_3R_55()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_169() {
    if (jj_3R_203()) return true;
    return false;
  }

  final private boolean jj_3R_168() {
    if (jj_3R_202()) return true;
    return false;
  }

  final private boolean jj_3R_188() {
    if (jj_3R_49()) return true;
    return false;
  }

  final private boolean jj_3R_167() {
    if (jj_3R_201()) return true;
    return false;
  }

  final private boolean jj_3R_229() {
    if (jj_scan_token(CATCH)) return true;
    if (jj_3R_62()) return true;
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3R_187() {
    if (jj_3R_49()) return true;
    if (jj_scan_token(INSTANCEOF)) return true;
    if (jj_3R_89()) return true;
    return false;
  }

  final private boolean jj_3R_166() {
    if (jj_3R_200()) return true;
    return false;
  }

  final private boolean jj_3R_151() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_187()) {
    jj_scanpos = xsp;
    if (jj_3R_188()) return true;
    }
    return false;
  }

  final private boolean jj_3R_206() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_140()) return true;
    return false;
  }

  final private boolean jj_3R_165() {
    if (jj_3R_199()) return true;
    return false;
  }

  final private boolean jj_3R_183() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_114()) return true;
    return false;
  }

  final private boolean jj_3R_164() {
    if (jj_3R_198()) return true;
    return false;
  }

  final private boolean jj_3R_163() {
    if (jj_3R_197()) return true;
    return false;
  }

  final private boolean jj_3R_233() {
    if (jj_scan_token(118)) return true;
    if (jj_3R_151()) return true;
    return false;
  }

  final private boolean jj_3R_162() {
    if (jj_3R_196()) return true;
    return false;
  }

  final private boolean jj_3R_232() {
    if (jj_scan_token(EQUAL)) return true;
    if (jj_3R_151()) return true;
    return false;
  }

  final private boolean jj_3R_222() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_232()) {
    jj_scanpos = xsp;
    if (jj_3R_233()) return true;
    }
    return false;
  }

  final private boolean jj_3R_218() {
    if (jj_scan_token(FINALLY)) return true;
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3R_161() {
    if (jj_3R_195()) return true;
    return false;
  }

  final private boolean jj_3R_217() {
    if (jj_3R_229()) return true;
    return false;
  }

  final private boolean jj_3R_160() {
    if (jj_3R_194()) return true;
    return false;
  }

  final private boolean jj_3R_199() {
    if (jj_scan_token(TRY)) return true;
    if (jj_3R_87()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_217()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_218()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_216() {
    if (jj_3R_55()) return true;
    return false;
  }

  final private boolean jj_3R_106() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_140() {
    if (jj_3R_151()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_222()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_159() {
    if (jj_3R_193()) return true;
    return false;
  }

  final private boolean jj_3R_107() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_198() {
    if (jj_scan_token(CONTIUNE)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_158() {
    if (jj_3R_192()) return true;
    return false;
  }

  final private boolean jj_3R_114() {
    if (jj_3R_140()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_206()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_157() {
    if (jj_3R_191()) return true;
    return false;
  }

  final private boolean jj_3R_156() {
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3_24() {
    if (jj_3R_59()) return true;
    return false;
  }

  final private boolean jj_3R_86() {
    if (jj_3R_114()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_183()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_135() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  final private boolean jj_3R_197() {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_216()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_155() {
    if (jj_3R_190()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3_23() {
    if (jj_3R_58()) return true;
    return false;
  }

  final private boolean jj_3R_240() {
    if (jj_3R_189()) return true;
    return false;
  }

  final private boolean jj_3_22() {
    if (jj_3R_57()) return true;
    return false;
  }

  final private boolean jj_3R_55() {
    if (jj_3R_86()) return true;
    return false;
  }

  final private boolean jj_3_21() {
    if (jj_3R_56()) return true;
    return false;
  }

  final private boolean jj_3R_69() {
    if (jj_3R_105()) return true;
    Token xsp;
    if (jj_3R_107()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_107()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_68() {
    if (jj_3R_51()) return true;
    Token xsp;
    if (jj_3R_106()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_106()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_154() {
    if (jj_3R_58()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_3R_45()) return true;
    return false;
  }

  final private boolean jj_3R_153() {
    if (jj_3R_189()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  final private boolean jj_3R_58() {
    if (jj_3R_89()) return true;
    if (jj_3R_90()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_91()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_152() {
    if (jj_3R_56()) return true;
    return false;
  }

  final private boolean jj_3R_141() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_152()) {
    jj_scanpos = xsp;
    if (jj_3R_153()) {
    jj_scanpos = xsp;
    if (jj_3R_154()) {
    jj_scanpos = xsp;
    if (jj_3R_155()) {
    jj_scanpos = xsp;
    if (jj_3R_156()) {
    jj_scanpos = xsp;
    if (jj_3R_157()) {
    jj_scanpos = xsp;
    if (jj_3R_158()) {
    jj_scanpos = xsp;
    if (jj_3R_159()) {
    jj_scanpos = xsp;
    if (jj_3R_160()) {
    jj_scanpos = xsp;
    if (jj_3R_161()) {
    jj_scanpos = xsp;
    if (jj_3R_162()) {
    jj_scanpos = xsp;
    if (jj_3R_163()) {
    jj_scanpos = xsp;
    if (jj_3R_164()) {
    jj_scanpos = xsp;
    if (jj_3R_165()) {
    jj_scanpos = xsp;
    if (jj_3R_166()) {
    jj_scanpos = xsp;
    if (jj_3R_167()) {
    jj_scanpos = xsp;
    if (jj_3R_168()) {
    jj_scanpos = xsp;
    if (jj_3R_169()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) return true;
    }
    return false;
  }

  final private boolean jj_3R_239() {
    if (jj_3R_58()) return true;
    return false;
  }

  final private boolean jj_3R_105() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_103() {
    if (jj_3R_55()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_135()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_228() {
    if (jj_3R_240()) return true;
    return false;
  }

  final private boolean jj_3R_104() {
    if (jj_scan_token(AT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_67() {
    if (jj_3R_105()) return true;
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_3R_48()) return true;
    return false;
  }

  final private boolean jj_3R_215() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_228()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_3R_43()) return true;
    return false;
  }

  final private boolean jj_3R_65() {
    if (jj_3R_104()) return true;
    return false;
  }

  final private boolean jj_3_5() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(74)) {
    jj_scanpos = xsp;
    if (jj_scan_token(75)) return true;
    }
    if (jj_3R_44()) return true;
    return false;
  }

  final private boolean jj_3R_64() {
    if (jj_3R_103()) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_3R_42()) return true;
    return false;
  }

  final private boolean jj_3R_66() {
    if (jj_3R_48()) return true;
    return false;
  }

  final private boolean jj_3R_41() {
    if (jj_3R_60()) return true;
    return false;
  }

  final private boolean jj_3_2() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_41()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LEFTPARAN)) return true;
    return false;
  }

  final private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_44() {
    if (jj_scan_token(LEFTPARAN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_64()) jj_scanpos = xsp;
    if (jj_scan_token(RIGHTPARAN)) return true;
    return false;
  }

  final private boolean jj_3R_227() {
    if (jj_3R_55()) return true;
    return false;
  }

  final private boolean jj_3R_82() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  final private boolean jj_3R_81() {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  final private boolean jj_3R_54() {
    if (jj_3R_52()) return true;
    if (jj_3R_44()) return true;
    return false;
  }

  final private boolean jj_3R_80() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  final private boolean jj_3R_214() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_227()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_79() {
    if (jj_scan_token(LONG)) return true;
    return false;
  }

  final private boolean jj_3R_78() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  final private boolean jj_3R_77() {
    if (jj_scan_token(SHORT)) return true;
    return false;
  }

  final private boolean jj_3R_76() {
    if (jj_scan_token(BYTE)) return true;
    return false;
  }

  final private boolean jj_3R_231() {
    if (jj_3R_51()) return true;
    if (jj_3R_241()) return true;
    return false;
  }

  final private boolean jj_3R_75() {
    if (jj_scan_token(CHAR)) return true;
    return false;
  }

  final private boolean jj_3R_74() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  final private boolean jj_3R_134() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_133()) return true;
    return false;
  }

  final private boolean jj_3R_226() {
    if (jj_3R_239()) return true;
    return false;
  }

  final private boolean jj_3R_213() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_226()) jj_scanpos = xsp;
    return false;
  }

  public UCSYTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[98];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
      jj_la1_3();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1fffc0,0x78000,0x1fffc0,0x78000,0x1077c0,0x0,0x0,0x7fc0,0x0,0x8007fc0,0x8007fc0,0x180000,0x78000,0x180000,0x100000,0x180000,0xfb6077c0,0xfb6077c0,0x0,0x1077c0,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x18000000,0x0,0x180000,0x0,0x77c0,0x0,0x7fc0,0x77c0,0x77c0,0x0,0x0,0x0,0x0,0x77c0,0x0,0x0,0x0,0x0,0x18000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x18000000,0x0,0x18000000,0x0,0x0,0x10000000,0x8000000,0x0,0x10000000,0x77c0,0x77c0,0x18000000,0x0,0xe3600000,0x0,0x0,0xfb6077c0,0x0,0x0,0xfb6077c0,0x0,0xfb6077c0,0x800000,0x77c0,0x18000000,0x18000000,0x0,0x18000000,0x0,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x505c200,0x0,0x0,0x505c200,0x400c000,0x8000000,0x8000000,0x2000000,0x80000,0x0,0x0,0x0,0x400c000,0x4a64008,0x0,0x4a04008,0x0,0x64008,0x0,0x0,0x8,0x0,0x8,0x8,0x4a04000,0x0,0x4a04000,0x4000,0x4a04000,0x102439,0x102439,0x0,0x4008,0x4000,0x0,0x90000000,0x0,0x0,0x0,0x0,0x130,0x0,0x4a04000,0x0,0x8,0x0,0x8,0x8,0x8,0x0,0x0,0x0,0x0,0x8,0x80,0x40,0x0,0x0,0x130,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x130,0x100,0x30,0x0,0x0,0x30,0x0,0x0,0x30,0x8,0x8,0x130,0x0,0x102401,0x0,0x0,0x102439,0x2,0x4,0x102439,0x0,0x102439,0x0,0x8,0x130,0x30,0x0,0x130,0x800,0x1000,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x10,0x20,0x40,0x20000000,0x20000000,0x40,0x0,0x4,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x4200,0x0,0x4200,0x0,0x4000,0x0,0x4,0x4000,0x4,0x4000,0x4000,0x200,0x0,0x200,0x0,0x200,0x1000dc00,0x1000dc00,0xc00,0x4000,0x0,0x0,0x100,0x0,0x0,0x4000,0x80000000,0x180cc00,0x0,0x200,0x0,0x4000,0x40000000,0x4000,0x0,0x0,0x0,0x4000,0x0,0x0,0x4000,0x0,0x0,0x200000,0x200000,0x180cc00,0x1e0000,0x1e0000,0x1800000,0x1800000,0xe000000,0xe000000,0x1800000,0x180cc00,0x0,0xcc00,0x8000,0x8000,0x0,0x8800,0x20008000,0x0,0x4000,0x4000,0x180cc00,0x0,0x10001000,0x4000,0x80000000,0x1000dc00,0x0,0x0,0x1000dc00,0x4000,0x1000dc00,0x0,0x4000,0x180cc00,0xcc00,0x0,0x180cc00,0x0,0x0,};
   }
   private static void jj_la1_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x20,0x20,0x0,0x40,0x0,0x40,0x0,0x40,0x20,0x0,0x40,0x0,0x40,0x40,0x0,0x0,0x0,0x0,0x0,0x3d40c0,0x3d40c0,0x0,0x40,0x0,0x20,0x0,0x20,0x20,0x0,0x0,0x3d4080,0x20,0x0,0x20,0x40,0x0,0x40,0x0,0x0,0x40,0x0,0x200,0x200,0x0,0x0,0x0,0x400000,0x400000,0x3d4000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3d4000,0x0,0x3d4000,0x0,0x0,0x3d4000,0x0,0x200,0x3d4000,0x0,0x0,0x3d4000,0x20,0x80,0x0,0x1f,0x3d40c0,0x0,0x0,0x3d40c0,0x44000,0x3d40c0,0x0,0x40,0x3d4000,0x3d4000,0x20,0x3d4000,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[24];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public UCSY(java.io.InputStream stream) {
     this(stream, null);
  }
  public UCSY(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new UCSYTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 98; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 98; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public UCSY(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new UCSYTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 98; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 98; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public UCSY(UCSYTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 98; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(UCSYTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 98; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[119];
    for (int i = 0; i < 119; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 98; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 119; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 24; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

        }
