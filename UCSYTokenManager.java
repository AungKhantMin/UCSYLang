/* Generated By:JJTree&JavaCC: Do not edit this line. UCSYTokenManager.java */
import java.io.*;
import java.io.*;
import javax.swing.*;
import javax.swing.event.*;
import javax.swing.tree.*;
import java.awt.*;
import java.util.*;
import javax.swing.text.*;

public class UCSYTokenManager implements UCSYConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x802000000L) != 0L)
            return 21;
         if ((active1 & 0x20000000L) != 0L)
            return 88;
         if ((active0 & 0xffffffffffffffc0L) != 0L || (active1 & 0x3fffL) != 0L)
         {
            jjmatchedKind = 78;
            return 1;
         }
         return -1;
      case 1:
         if ((active0 & 0xffffff7ffb9ffbc0L) != 0L || (active1 & 0x3f7fL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 78;
               jjmatchedPos = 1;
            }
            return 1;
         }
         if ((active0 & 0x8004600400L) != 0L || (active1 & 0x80L) != 0L)
            return 1;
         return -1;
      case 2:
         if ((active0 & 0x210005400a040100L) != 0L || (active1 & 0x100L) != 0L)
            return 1;
         if ((active0 & 0xdefffa3ff19bfec0L) != 0L || (active1 & 0x3e7fL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 78;
               jjmatchedPos = 2;
            }
            return 1;
         }
         return -1;
      case 3:
         if ((active0 & 0x9ffefa2de11fa640L) != 0L || (active1 & 0x3b3fL) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 3;
            return 1;
         }
         if ((active0 & 0x4001001210805880L) != 0L || (active1 & 0x440L) != 0L)
            return 1;
         return -1;
      case 4:
         if ((active0 & 0x9fbe800da01f8440L) != 0L || (active1 & 0x113eL) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 78;
               jjmatchedPos = 4;
            }
            return 1;
         }
         if ((active0 & 0x407a2041002200L) != 0L || (active1 & 0x2a01L) != 0L)
            return 1;
         return -1;
      case 5:
         if ((active0 & 0x97ce900480070040L) != 0L || (active1 & 0x111cL) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 78;
               jjmatchedPos = 5;
            }
            return 1;
         }
         if ((active0 & 0x830000920188400L) != 0L || (active1 & 0x22L) != 0L)
            return 1;
         return -1;
      case 6:
         if ((active0 & 0x87ea800080060000L) != 0L || (active1 & 0x10cL) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 6;
            return 1;
         }
         if ((active0 & 0x1004100400010040L) != 0L || (active1 & 0x1010L) != 0L)
            return 1;
         return -1;
      case 7:
         if ((active0 & 0x8360800000020000L) != 0L || (active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 7;
            return 1;
         }
         if ((active0 & 0x48a000080040000L) != 0L || (active1 & 0x104L) != 0L)
            return 1;
         return -1;
      case 8:
         if ((active0 & 0x260000000000000L) != 0L || (active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 8;
            return 1;
         }
         if ((active0 & 0x8100800000020000L) != 0L)
            return 1;
         return -1;
      case 9:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 9;
            return 1;
         }
         if ((active0 & 0x220000000000000L) != 0L || (active1 & 0x8L) != 0L)
            return 1;
         return -1;
      case 10:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 10;
            return 1;
         }
         return -1;
      case 11:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 11;
            return 1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000000000000L);
      case 37:
         jjmatchedKind = 90;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000000L);
      case 40:
         return jjStopAtPos(0, 79);
      case 41:
         return jjStopAtPos(0, 80);
      case 42:
         jjmatchedKind = 91;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000000000L);
      case 43:
         jjmatchedKind = 87;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000L);
      case 44:
         return jjStopAtPos(0, 101);
      case 45:
         jjmatchedKind = 88;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000000L);
      case 46:
         return jjStartNfaWithStates_0(0, 93, 88);
      case 47:
         jjmatchedKind = 89;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000000L);
      case 58:
         return jjStopAtPos(0, 94);
      case 59:
         return jjStopAtPos(0, 92);
      case 60:
         jjmatchedKind = 82;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x500000L);
      case 61:
         jjmatchedKind = 95;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000L);
      case 62:
         jjmatchedKind = 81;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000L);
      case 64:
         return jjStopAtPos(0, 102);
      case 91:
         return jjStopAtPos(0, 105);
      case 93:
         return jjStopAtPos(0, 106);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x2c00004000000000L, 0x1L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x40001040L, 0x2L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x80a0280000080L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x8002000400200400L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x800000L, 0x1000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x4502002000200L, 0x140L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x300000000440100L, 0x2cL);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x4000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x41000000000000L, 0x200L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x10018080000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x80008000000000L, 0x80L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x38000L, 0x10L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x30000020000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x800900102000L, 0x800L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x241004000000L, 0x2400L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x800L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x4000000001000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 103);
      case 125:
         return jjStopAtPos(0, 104);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 61:
         if ((active1 & 0x80000L) != 0L)
            return jjStopAtPos(1, 83);
         else if ((active1 & 0x100000L) != 0L)
            return jjStopAtPos(1, 84);
         else if ((active1 & 0x200000L) != 0L)
            return jjStopAtPos(1, 85);
         else if ((active1 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 96);
         else if ((active1 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 97);
         else if ((active1 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 98);
         else if ((active1 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 99);
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 100);
         else if ((active1 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 118);
         break;
      case 62:
         if ((active1 & 0x400000L) != 0L)
            return jjStopAtPos(1, 86);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000082200080000L, active1, 0x10L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x8033000428000000L, active1, 0x2L);
      case 102:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(1, 22, 1);
         else if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(1, 71, 1);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x200001002080L, active1, 0x400L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000d00000000000L, active1, 0x2000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000020000800200L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000000L, active1, 0x20L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x100004000040100L, active1, 0xcL);
      case 111:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(1, 26, 1);
         return jjMoveStringLiteralDfa2_0(active0, 0x8010082004c40L, active1, 0x100L);
      case 114:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 39, 1);
         return jjMoveStringLiteralDfa2_0(active0, 0x41040030000L, active1, 0x40L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x800100000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x44000010008000L, active1, 0xa00L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x800020000100080L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x30000000008000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000000L, active1, 0x10L);
      case 100:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 38, 1);
         break;
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000040000000L, active1, 0x1040L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000L, active1, 0x2L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x101010800L, active1, 0x400L);
      case 108:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 61, 1);
         return jjMoveStringLiteralDfa3_0(active0, 0x42002010000000L, active1, 0x200L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x100cd00080004000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x22240L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000000L, active1, 0x820L);
      case 114:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x200800000000L, active1, 0x100L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000200800000L, active1, 0x8L);
      case 116:
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 40, 1);
         return jjMoveStringLiteralDfa3_0(active0, 0x41010800200c1000L, active1, 0x1L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000400L, active1, 0L);
      case 119:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(2, 27, 1);
         break;
      case 121:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 42, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 48, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x500440000200L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x400L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x4080000000000L, active1, 0x1000L);
      case 100:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 11, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 12, 1);
         else if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 23, 1);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 33, 1);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 36, 1);
         else if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(3, 70, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x102000000040000L, active1, 0x2805L);
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000L, active1, 0L);
      case 103:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 14, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000L, active1, 0L);
      case 104:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 62, 1);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x30000800080000L, active1, 0L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10L);
      case 108:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 28, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x200000001008040L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000200000000000L, active1, 0x22L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000000L, active1, 0L);
      case 114:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(3, 7, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000002000L, active1, 0L);
      case 115:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 74, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x22000000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x440000180120000L, active1, 0x208L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000L, active1, 0x118L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000L, active1, 0L);
      case 101:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 24, 1);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 37, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000020040L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000L, active1, 0L);
      case 104:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 43, 1);
         break;
      case 105:
         if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x40000080108000L, active1, 0L);
      case 107:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 30, 1);
         break;
      case 108:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x1000900000000400L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x30000800000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000L, active1, 0L);
      case 114:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(4, 64, 1);
         else if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(4, 75, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x8580000020040000L, active1, 0x26L);
      case 115:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 41, 1);
         else if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 77, 1);
         break;
      case 116:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(4, 9, 1);
         else if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 13, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x804000000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000L, active1, 0x1000L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000L, active1, 0L);
      case 119:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 45, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x8402000000000040L, active1, 0L);
      case 99:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 15, 1);
         else if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 20, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x20000L, active1, 0L);
      case 100:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x60000000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(5, 10, 1);
         else if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(5, 19, 1);
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(5, 65, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x1000800000000000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000000L, active1, 0L);
      case 103:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(5, 35, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10L);
      case 104:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(5, 32, 1);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000000L, active1, 0x4L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x100400000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(5, 29, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x80040000L, active1, 0x8L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000L, active1, 0x100L);
      case 115:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 59, 1);
         break;
      case 116:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(5, 69, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x10000L, active1, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x120000000040000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000000000L, active1, 0x8L);
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000000L, active1, 0x100L);
      case 101:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(6, 16, 1);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(6, 68, 1);
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(6, 76, 1);
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(6, 6, 1);
         break;
      case 114:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 50, 1);
         break;
      case 115:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 60, 1);
         break;
      case 116:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(6, 34, 1);
         return jjMoveStringLiteralDfa7_0(active0, 0x8002800000020000L, active1, 0x4L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000L, active1, 0L);
      case 121:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 44, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(7, 31, 1);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 49, 1);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 55, 1);
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000020000L, active1, 0x8L);
      case 108:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(7, 18, 1);
         break;
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000000L, active1, 0L);
      case 115:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 51, 1);
         else if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(7, 66, 1);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(7, 72, 1);
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000000000L, active1, 0L);
      case 116:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 58, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(8, 17, 1);
         break;
      case 101:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 56, 1);
         break;
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 47, 1);
         break;
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x8L);
      case 112:
         return jjMoveStringLiteralDfa9_0(active0, 0x40000000000000L, active1, 0L);
      case 115:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 63, 1);
         break;
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x40000000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 53, 1);
         break;
      case 102:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(9, 67, 1);
         break;
      case 115:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 57, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x40000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa12_0(active0, 0x40000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 104:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 54, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 88;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 21:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(34, 35);
                  else if (curChar == 47)
                     jjCheckNAddStates(0, 2);
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 88:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(3, 6);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 112)
                        kind = 112;
                     jjCheckNAddStates(7, 9);
                  }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(10, 23);
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(48, 53);
                  else if (curChar == 47)
                     jjAddStates(24, 26);
                  else if (curChar == 34)
                     jjCheckNAddStates(27, 29);
                  else if (curChar == 39)
                     jjAddStates(30, 31);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 110)
                        kind = 110;
                     jjCheckNAddStates(32, 36);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 110)
                        kind = 110;
                     jjCheckNAddTwoStates(41, 44);
                  }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 2:
                  if (curChar == 39)
                     jjAddStates(30, 31);
                  break;
               case 3:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(4);
                  break;
               case 4:
                  if (curChar == 39 && kind > 114)
                     kind = 114;
                  break;
               case 6:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(4);
                  break;
               case 7:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(8, 4);
                  break;
               case 8:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(4);
                  break;
               case 9:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 10:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(8);
                  break;
               case 11:
                  if (curChar == 34)
                     jjCheckNAddStates(27, 29);
                  break;
               case 12:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(27, 29);
                  break;
               case 14:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(27, 29);
                  break;
               case 15:
                  if (curChar == 34 && kind > 117)
                     kind = 117;
                  break;
               case 16:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(37, 40);
                  break;
               case 17:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(27, 29);
                  break;
               case 18:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 19:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(17);
                  break;
               case 20:
                  if (curChar == 47)
                     jjAddStates(24, 26);
                  break;
               case 22:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 23:
                  if ((0x2400L & l) != 0L && kind > 107)
                     kind = 107;
                  break;
               case 24:
                  if (curChar == 10 && kind > 107)
                     kind = 107;
                  break;
               case 25:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(27, 28);
                  break;
               case 27:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(27, 28);
                  break;
               case 28:
                  if (curChar == 42)
                     jjCheckNAddStates(41, 43);
                  break;
               case 29:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(30, 28);
                  break;
               case 30:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(30, 28);
                  break;
               case 31:
                  if (curChar == 47 && kind > 108)
                     kind = 108;
                  break;
               case 32:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 33:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(34, 35);
                  break;
               case 34:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(34, 35);
                  break;
               case 35:
                  if (curChar == 42)
                     jjCheckNAddStates(44, 46);
                  break;
               case 36:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(37, 35);
                  break;
               case 37:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(37, 35);
                  break;
               case 38:
                  if (curChar == 47 && kind > 109)
                     kind = 109;
                  break;
               case 39:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAddStates(32, 36);
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAddTwoStates(40, 41);
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 111)
                     kind = 111;
                  jjCheckNAdd(42);
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(43, 44);
                  break;
               case 46:
                  if (curChar != 48)
                     break;
                  if (kind > 110)
                     kind = 110;
                  jjCheckNAddTwoStates(41, 44);
                  break;
               case 47:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(48, 53);
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 112)
                     kind = 112;
                  jjCheckNAddStates(7, 9);
                  break;
               case 50:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(51);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 112)
                     kind = 112;
                  jjCheckNAddTwoStates(51, 52);
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(3, 6);
                  break;
               case 55:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(56);
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(47, 49);
                  break;
               case 59:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(10, 23);
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(60, 61);
                  break;
               case 61:
                  if (curChar != 46)
                     break;
                  if (kind > 112)
                     kind = 112;
                  jjCheckNAddStates(50, 52);
                  break;
               case 62:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 112)
                     kind = 112;
                  jjCheckNAddStates(50, 52);
                  break;
               case 64:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(65);
                  break;
               case 65:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 112)
                     kind = 112;
                  jjCheckNAddTwoStates(65, 52);
                  break;
               case 66:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(66, 67);
                  break;
               case 68:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(69);
                  break;
               case 69:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 112)
                     kind = 112;
                  jjCheckNAddTwoStates(69, 52);
                  break;
               case 70:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(53, 55);
                  break;
               case 72:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(73);
                  break;
               case 73:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(73, 52);
                  break;
               case 74:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(74, 75);
                  break;
               case 75:
                  if (curChar == 46)
                     jjCheckNAddStates(56, 59);
                  break;
               case 76:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(56, 59);
                  break;
               case 78:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(79);
                  break;
               case 79:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(60, 62);
                  break;
               case 80:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(80, 81);
                  break;
               case 82:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(83);
                  break;
               case 83:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(63, 65);
                  break;
               case 84:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(66, 68);
                  break;
               case 86:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(87);
                  break;
               case 87:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(87, 57);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAdd(1);
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAdd(1);
                  break;
               case 3:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(4);
                  break;
               case 5:
                  if (curChar == 92)
                     jjAddStates(69, 71);
                  break;
               case 6:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(4);
                  break;
               case 12:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(27, 29);
                  break;
               case 13:
                  if (curChar == 92)
                     jjAddStates(72, 74);
                  break;
               case 14:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(27, 29);
                  break;
               case 22:
                  jjAddStates(0, 2);
                  break;
               case 27:
                  jjCheckNAddTwoStates(27, 28);
                  break;
               case 29:
               case 30:
                  jjCheckNAddTwoStates(30, 28);
                  break;
               case 34:
                  jjCheckNAddTwoStates(34, 35);
                  break;
               case 36:
               case 37:
                  jjCheckNAddTwoStates(37, 35);
                  break;
               case 41:
                  if (curChar == 76 && kind > 110)
                     kind = 110;
                  break;
               case 44:
                  if (curChar != 76)
                     break;
                  if (kind > 116)
                     kind = 116;
                  jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 45:
                  if (curChar == 76 && kind > 116)
                     kind = 116;
                  break;
               case 49:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(75, 76);
                  break;
               case 52:
                  if ((0x5000000050L & l) != 0L && kind > 112)
                     kind = 112;
                  break;
               case 54:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(77, 78);
                  break;
               case 57:
                  if ((0x5000000050L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 58:
                  if (curChar == 68 && kind > 115)
                     kind = 115;
                  break;
               case 63:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(79, 80);
                  break;
               case 67:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(81, 82);
                  break;
               case 71:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(83, 84);
                  break;
               case 77:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(85, 86);
                  break;
               case 81:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(87, 88);
                  break;
               case 85:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(89, 90);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 12:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(27, 29);
                  break;
               case 22:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(0, 2);
                  break;
               case 27:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(27, 28);
                  break;
               case 29:
               case 30:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(30, 28);
                  break;
               case 34:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(34, 35);
                  break;
               case 36:
               case 37:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(37, 35);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 88 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   22, 23, 25, 53, 54, 57, 58, 48, 49, 52, 60, 61, 66, 67, 70, 71, 
   52, 74, 75, 80, 81, 84, 85, 57, 21, 32, 33, 12, 13, 15, 3, 5, 
   40, 41, 42, 43, 44, 12, 13, 17, 15, 28, 29, 31, 35, 36, 38, 56, 
   57, 58, 62, 63, 52, 70, 71, 52, 76, 77, 57, 58, 79, 57, 58, 83, 
   57, 58, 84, 85, 57, 6, 7, 9, 14, 16, 18, 50, 51, 55, 56, 64, 
   65, 68, 69, 72, 73, 78, 79, 82, 83, 86, 87, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, "\142\157\157\154\145\141\156", 
"\143\150\141\162", "\151\156\164", "\146\154\157\141\164", "\144\157\165\142\154\145", 
"\166\157\151\144", "\142\171\164\145", "\163\150\157\162\164", "\154\157\156\147", 
"\160\165\142\154\151\143", "\160\162\151\166\141\164\145", "\160\162\157\164\145\143\164\145\144", 
"\151\156\164\145\162\156\141\154", "\156\141\164\151\166\145", "\163\164\141\164\151\143", "\144\157", 
"\151\146", "\145\154\163\145", "\167\150\151\154\145", "\146\157\162", "\164\157", 
"\156\145\167", "\156\165\154\154", "\162\145\164\165\162\156", "\142\162\145\141\153", 
"\143\157\156\164\151\156\165\145", "\163\167\151\164\143\150", "\143\141\163\145", 
"\144\145\146\141\165\154\164", "\163\164\162\151\156\147", "\164\162\165\145", "\146\141\154\163\145", 
"\141\156\144", "\157\162", "\156\157\164", "\143\154\141\163\163", "\164\162\171", 
"\143\141\164\143\150", "\146\151\156\141\154\154\171", "\164\150\162\157\167", 
"\146\151\156\141\154", "\163\151\156\147\154\145\164\157\156", "\155\145\164\141", 
"\144\145\154\145\147\141\164\145", "\146\165\156\143\164\157\162", "\143\157\156\146\157\162\155\163", 
"\162\145\142\151\156\144", "\162\145\142\151\156\144\141\142\154\145", 
"\155\165\154\164\151\144\151\163\160\141\164\143\150", "\157\166\145\162\162\151\144\145", "\151\156\164\145\162\146\141\143\145", 
"\151\155\160\154\145\155\145\156\164\163", "\141\142\163\164\162\141\143\164", "\141\144\141\160\164\163", 
"\150\141\156\144\154\145\163", "\141\154\154", "\167\151\164\150", "\144\145\143\157\162\141\164\145\163", 
"\141\146\164\145\162", "\142\145\146\157\162\145", "\151\156\150\145\162\151\164\163", 
"\151\156\163\164\141\156\143\145\157\146", "\160\141\143\153\141\147\145", "\151\155\160\157\162\164", 
"\146\162\145\145", "\157\146", "\146\157\162\167\141\162\144\163", "\155\165\154\164\151", 
"\164\150\151\163", "\163\165\160\145\162", "\145\170\145\143\165\164\145", 
"\164\151\155\145\163", null, "\50", "\51", "\76", "\74", "\76\75", "\74\75", "\75\75", "\74\76", 
"\53", "\55", "\57", "\45", "\52", "\73", "\56", "\72", "\75", "\53\75", "\55\75", 
"\45\75", "\57\75", "\52\75", "\54", "\100", "\173", "\175", "\133", "\135", null, null, 
null, null, null, null, null, null, null, null, null, "\41\75", };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0xffffffffffffffc1L, 0x7dc7ffffffffffL, 
};
static final long[] jjtoSkip = {
   0x3eL, 0x380000000000L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x380000000000L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[88];
private final int[] jjstateSet = new int[176];
protected char curChar;
public UCSYTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public UCSYTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 88; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
