/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. .\UCSY.jj */
/*@egen*/options
{                                  
	STATIC = false;
	
}

PARSER_BEGIN(UCSY)
import java.io.*;
import java.io.*;
import javax.swing.*;
import javax.swing.event.*;
import javax.swing.tree.*;
import java.awt.*;
import java.util.*;
import javax.swing.text.*;
public class UCSY/*@bgen(jjtree)*/implements UCSYTreeConstants/*@egen*/
	{/*@bgen(jjtree)*/
  protected JJTUCSYState jjtree = new JJTUCSYState();

/*@egen*/
	static MutableAttributeSet PLAIN = new SimpleAttributeSet();
	static JEditorPane compileOutput;
	boolean syntaxError = false;
	boolean staticSemanticError = false;
	int syntaxErrorCount = 0;
	int staticSemanticErrorCount = 0;
		public static void main(String[]args)throws Exception
		{
			try 
         	{ 
         	          
             UIManager.setLookAndFeel("com.birosoft.liquid.LiquidLookAndFeel");
            } catch (Exception e) 
        	{
          
         	}
			UCSY parser;
			parser = new UCSY(new FileInputStream(args[0]));
			parser.compile();
			
		}
	}
PARSER_END(UCSY)
SKIP:
{
	 " "
	|"\t"
	|"\r"
	|"\n"
	|"\f"
}
TOKEN:
{
   <BOOLEAN:"boolean">
 | <CHAR:"char">
 | <INTEGER:"int">
 | <FLOAT:"float">
 | <DOUBLE:"double">
 | <VOID:"void">
 | <BYTE:"byte">
 | <SHORT:"short">
 | <LONG:"long">
 | <PUBLIC:"public">
 | <PRIVATE:"private">
 | <PROTECTED:"protected">
 | <INTERNAL:"internal">
 | <NATIVE: "native">
 | <STATIC:"static">
 | <DO:"do">
 | <IF:"if">
 | <ELSE:"else">
 | <WHILE:"while">
 | <FOR:"for">
 ///| <FOREACH:"foreach">
 | <TO:"to">
 | <NEW: "new">
 | <NULL: "null">
 | <RETURN:"return">
 | <BREAK: "break">
 | <CONTIUNE : "continue">
 | <SWITCH:"switch">
 | <CASE:"case">
 | <MYDEFAULT:"default">
 | <STRING: "string">
 | <TRUE:"true">
 | <FALSE:"false">
 | <AND:"and">
 | <OR:"or">
 | <Not:"not">
 | <CLASS:"class">
 | <TRY:"try">
 | <CATCH:"catch">
 | <FINALLY:"finally">
 | <THROW: "throw">
 ///|<THROWS: "throws">
 | <FINAL:"final">
 | <SINGLETON: "singleton">
 | <META: "meta">
 | <DELEGATE: "delegate">
 | <FUNCTOR:"functor">
 | <CONFORMS:"conforms">
 | <REBIND: "rebind">
 | <REBINDABLE: "rebindable">
 | <MULTIDISPATCH: "multidispatch">
 | <OVERRIDE: "override">
 | <INTERFACE: "interface">
 | <IMPLEMENTS : "implements">
 | <ABSTRACT: "abstract">
 | <ADAPTS :"adapts">
 | <HANDLES: "handles">
 | <ALL :"all">
 | <WITH: "with">
 | <DECORATE: "decorates">
 | <AFTER: "after">
 | <BEFORE: "before">
 | <INHERITS :"inherits">
 | <INSTANCEOF: "instanceof">
 | <PACKAGE: "package">
 | <IMPORT: "import">
 | <FREE: "free">
 | <OF: "of">
 | <FORWARDS: "forwards">
 | <MULTI:"multi">
 | <THIS :"this">
 | <SUPER: "super">
 | <EXECUTE:"execute">
 | <TIMES:"times"> 
 
 | <IDENTIFIER: (["a"-"z"]|["A"-"Z"])(["a"-"z"]|["A"-"Z"]|["0"-"9"]|"_")* > 
}
TOKEN:
{
	<LEFTPARAN:"(">
	| <RIGHTPARAN:")">
	| <GT:">">
	| <LT:"<">
	| <GTE:">=">
	| <LTE: "<=">
	| <EQUAL: "==">
	| <NOTEQUAL: "<>">
	| <PLUS: "+">
	| <MINUS: "-">
	| <DIV: "/">
	| <MOD:"%">
	| <MUL : "*">
	| <SEMICOLON: ";">
	| <DOT: ".">
	| <COLON: ":">
	| <ASSIGN:"=">
	| <PLUSASSIGN:"+=">
	| <MINUSASSIGN:"-=">
	| <MODASSIGN: "%=">
	| <DIVASSIGN: "/=">
	| <MULASSIGN: "*=">
	| <COMMA: ",">
	| <AT: "@">
	| <LBRACE: "{">
	| <RBRACE: "}">
	| <LBRACKET: "[">
	| <RBRACKET: "]">
}
SPECIAL_TOKEN : /* COMMENTS */
{
  <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
| <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}
TOKEN:
{
	<INTEGERLITERAL:<DECIMAL_LITERAL> ("L")?>
	|
	<DECIMAL_LITERAL:["1"-"9"](["0"-"9"])*
					|"0">
	
	|
	<FLOATLITERAL:
	  (["0"-"9"])+ "." (["0"-"9"])* (<DECIMAL_EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<DECIMAL_EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <DECIMAL_EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<DECIMAL_EXPONENT>)? ["f","F","d","D"]
    >
    |
    
    < #DECIMAL_EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
	|< CHARLITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
  >
	| <DOUBLELITERAL:<FLOATLITERAL>"D">

	|<STRINGLITERAL: "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\"">
}

JAVACODE
void compile()     
{
	ASTStart root = Start();
	ParseTree guiTree = new ParseTree();
	guiTree.display(root);
	Debug.parser = this;
	
	if(!syntaxError)
	{
		
		TypeAnalysisVisitor collectTypeInfoVisitor = new TypeAnalysisVisitor(this);
		root.jjtAccept( collectTypeInfoVisitor,root);	
		TypeCheckVisitor typeCheckVisitor = new TypeCheckVisitor(this);
		root.jjtAccept( typeCheckVisitor, root );
		CommonInheritedAttribute.parser = this;
	}
	
	if(successFullyCompiled())
	{	
		inform("Congrulation:program compiled successfully");
		SymbolTable.reset();
		CodeGenerator.parser = this;
		CommonInheritedAttribute.parser = this;
		CodeGenerationVisitor codeGen = new CodeGenerationVisitor(this);
		root.jjtAccept( codeGen, root );
	}
	else
	{	
		inform((syntaxErrorCount+ staticSemanticErrorCount) + " errors ");
	}
	
}

JAVACODE
boolean successFullyCompiled()     
{
	return !syntaxError && !staticSemanticError;
}

JAVACODE 
void skipBefore(int kind)     
{
	Token t;
	while((t = getToken(1)).kind != kind && t.kind!=0)
  	{
  	 getNextToken();
  	//jj_consume_token(t.kind);
  	//inform("That is skip before");
  	}
}

JAVACODE 
void skipBeforeSet(int []kindArray)     
{
	Token t;
	boolean exit = false;
	while(!exit)
	{
		t = getToken(1);
		
		for(int i=0;i<kindArray.length;i++)
		{
			if(t.kind == kindArray[i])
			{
				exit = true;
				return;
			}
			if(t.kind==0)
				return;
		}
		getNextToken();
	}
}

JAVACODE 
void skipto(int kind)     

{
 
  Token t;
  do
  {
    t = getNextToken();
    //System.out.println ("GOOOO");
    if(t.kind ==0)
    	return;
  } while (t.kind != kind  );
  
    
}

JAVACODE
void skiptoSet(int arr[])     
{
	Token t;
	boolean exit = false;
	while(!exit)
	{
		t = getNextToken();
		for(int i=0;i<arr.length;i++)
		{
			if(t.kind == arr[i])
				return;
			if(t.kind == 0)
				return;
		}
	}
}

JAVACODE
void skiptoOrEndOfLine(int kind)     
{
  Token t;
  Token original = getToken(0);
  do
  {
    t = getNextToken();
    if(t.beginLine > original.beginLine)
    	return;
    
  } while (t.kind != kind && t.kind != 0 );
}

JAVACODE
void setCompileOutput(JEditorPane compile)     
{
	compileOutput = compile ;
}

JAVACODE
void error(String s)      
 {
 		Token t = getToken(0);
 		int line = t.beginLine;
 		int col = t.beginColumn;
 		syntaxError = true ;
 		syntaxErrorCount ++;
  		if(compileOutput == null)
        	System.out.println ("Error at line : " + line+" Col: "+col+" "+s);
        else
        {
        	try
        	{
        	compileOutput.getDocument().insertString(compileOutput.getDocument().getLength(),"Error at line : " + line+" Col: "+col+" "+s+"\n",PLAIN);
        	//compileOutput.setText("Error at line : " + line+" Col: "+col+" "+s);
        	}
        	catch(Exception e)
        	{
        	}
        
    	}
}

JAVACODE 
void inform(String s)     
{
  	if(compileOutput == null)
  	{
  		System.out.println ( s );
  	}
  	else
  	{
  		
  		try
        {
        	compileOutput.getDocument().insertString(compileOutput.getDocument().getLength(),s+"\n",PLAIN);
        	//compileOutput.setText("Error at line : " + line+" Col: "+col+" "+s);
        }
        catch(Exception e)
        {
        }
  	}
}

JAVACODE
void reportSSError(int line,String s)     
{
	staticSemanticError = true;
	staticSemanticErrorCount ++;
	if(compileOutput == null)
  	{
  		System.out.println ("Error at line "+line+" " +s);
  	}
  	else
  	{
  		
  		try
        {
        	compileOutput.getDocument().insertString(compileOutput.getDocument().getLength(),"Error at line "+ line+" " +s+"\n",PLAIN);
        	//compileOutput.setText("Error at line : " + line+" Col: "+col+" "+s);
        }
        catch(Exception e)
        {
        }
  	}
}

JAVACODE
int getTokenDistance(int kind)     
{
	int length = 0;
	Token t ;
	
	while(((t = getToken(++length)).kind != kind) )
  	{
  		///System.out.println ("Token image "+t.image);
  	 	if(t.kind == 0)
  	 	{
  	 		length = 214748364;
  	 		return length;
  	 	}
  		
  	}
  	return length;
}

JAVACODE
int getTokenDistanceSet(int []kindArray)      
{
	int length = 0 ;
	Token t;
	
	
	boolean found = false;
	while(!found)
	{
		t = getToken(++length);
	
		for(int i=0;i<kindArray.length;i++)
		{
			if(t.kind == kindArray[i])
				found =true;
			if(t.kind ==0 )
				return 214748364;
		}
		
	}
	return length;
}
ASTStart Start():
{/*@bgen(jjtree) Start */
        ASTStart jjtn000 = new ASTStart(JJTSTART);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	ASTTypeDeclaration typeDecl;
}
{/*@bgen(jjtree) Start */
        try {
/*@egen*/
	try
	{
	[ PackageDeclaration() ]
	( ImportDeclaration() )*
	
	

	(typeDecl = TypeDeclaration(){jjtn000.addTypeDeclaration(typeDecl);} ) +
	}
	catch(ParseException e)
	{
		
		error(" class,interface,meta class declaration or functor declaration excepted");
		
		
	}
	{return jjtn000;}
	<EOF>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
	
}

void PackageDeclaration():
{/*@bgen(jjtree) PackageDeclaration */
  ASTPackageDeclaration jjtn000 = new ASTPackageDeclaration(JJTPACKAGEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PackageDeclaration */
        try {
/*@egen*/
	try
	{
	"package" Name() ("."Name())* ";"
	}
	catch(ParseException e)
	{
		
		error (" ivalid package declaration");
		int lookAhead1[] = {IMPORT,CLASS,FINAL,SINGLETON,META,FUNCTOR,INTERFACE,ABSTRACT,FREE};
		
		skipBeforeSet(lookAhead1);
		
		//Error Revovery
		label_1:
    	while (true) {
      	switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      	case IMPORT:
        	;
        break;
      	default:
        jj_la1[1] = jj_gen;
        break label_1;
      	}
      ImportDeclaration();
      }
      label_2:
      while (true) 
      {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) 
        {
        case CLASS:
        case FINAL:
        case SINGLETON:
        case META:
        case FUNCTOR:
        case INTERFACE:
        case ABSTRACT:
        case FREE:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        TypeDeclaration();
    
      }
      jj_consume_token(0);
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ImportDeclaration():
{/*@bgen(jjtree) ImportDeclaration */
  ASTImportDeclaration jjtn000 = new ASTImportDeclaration(JJTIMPORTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ImportDeclaration */
        try {
/*@egen*/
	try
	{
	"import" Name() (LOOKAHEAD(2) "."  )*["." "*"] ";"
	}
	catch(ParseException e)
	{
		
		error(" invalid import declaration ");
		
		int lookAhead2[] = {CLASS,FINAL,SINGLETON,META,FUNCTOR,INTERFACE,ABSTRACT,FREE};
		skipBeforeSet(lookAhead2);
		
		label_2:
        while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CLASS:
        case FINAL:
        case SINGLETON:
        case META:
        case FUNCTOR:
        case INTERFACE:
        case ABSTRACT:
        case FREE:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        TypeDeclaration();
      }
      jj_consume_token(0);
	 }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
	
}

ASTTypeDeclaration TypeDeclaration():
{/*@bgen(jjtree) TypeDeclaration */
  ASTTypeDeclaration jjtn000 = new ASTTypeDeclaration(JJTTYPEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TypeDeclaration */
        try {
/*@egen*/
	(
	jjtn000.typeDeclaration = ClassDeclaration()
	|
	jjtn000.typeDeclaration = InterfaceDeclaration()
	| 
	jjtn000.typeDeclaration = MetaClassDeclaration()
	|
	jjtn000.typeDeclaration = FreeClassDeclaration()
	|
	jjtn000.typeDeclaration = FunctorDeclaration() ";"
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{return jjtn000;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

ASTClassDeclaration ClassDeclaration():
{/*@bgen(jjtree) ClassDeclaration */
 ASTClassDeclaration jjtn000 = new ASTClassDeclaration(JJTCLASSDECLARATION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t=null;}
{/*@bgen(jjtree) ClassDeclaration */
        try {
/*@egen*/
	(
	try
	{
	jjtn000.classHeader = ClassHeader()
	}
	catch(ParseException e)
	{
		
		error(" Invalid class header declaration");
		skipBefore(LBRACE);
		
	}
	jjtn000.classBody = ClassBody()
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

ASTClassHeader ClassHeader():
{/*@bgen(jjtree) ClassHeader */
 ASTClassHeader jjtn000 = new ASTClassHeader(JJTCLASSHEADER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t = null;}
{/*@bgen(jjtree) ClassHeader */
         try {
/*@egen*/
			
	 (
	 [jjtn000.classModifier = ClassModifier()] "class" jjtn000.t = <IDENTIFIER> {jjtn000.className = jjtn000.t.image;}	
	 [ jjtn000.inheritsClause = InheritsClause() | jjtn000.adaptsClause = AdaptsClause() ] 
	 [jjtn000.implementsClause = ImplementsClause()]                                                   
	 [jjtn000.conformsClause = ConformsClause()]
	 )/*@bgen(jjtree)*/
         {
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
         }
/*@egen*/
	 {return jjtn000;}/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
	 
	 
}
ASTImplementsClause ImplementsClause():
{/*@bgen(jjtree) ImplementsClause */
ASTImplementsClause jjtn000 = new ASTImplementsClause(JJTIMPLEMENTSCLAUSE);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
/*@egen*/
ASTIdentifier id;}
{/*@bgen(jjtree) ImplementsClause */
        try {
/*@egen*/
	("implements" id = Identifier(){jjtn000.identifierList.add(id);} (  "," id = Identifier(){jjtn000.identifierList.add(id);}) * )/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
ASTIdentifier Identifier():
{/*@bgen(jjtree) Identifier */
        ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) Identifier */
        try {
/*@egen*/
	(jjtn000.t = <IDENTIFIER> )/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
ASTConformsClause ConformsClause():
{/*@bgen(jjtree) ConformsClause */
        ASTConformsClause jjtn000 = new ASTConformsClause(JJTCONFORMSCLAUSE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	ASTIdentifier id; 
}
{/*@bgen(jjtree) ConformsClause */
        try {
/*@egen*/
	( "conforms"id =Identifier() {jjtn000.conformsIdentifier.add(id);} ( "," id = Identifier() {jjtn000.conformsIdentifier.add(id);})* )/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
ASTInheritsClause InheritsClause():
{/*@bgen(jjtree) InheritsClause */
  ASTInheritsClause jjtn000 = new ASTInheritsClause(JJTINHERITSCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) InheritsClause */
         try {
/*@egen*/
	 ("inherits" jjtn000.identifier = Identifier() )/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/	 
}
ASTAdaptsClause AdaptsClause():
{/*@bgen(jjtree) AdaptsClause */
        ASTAdaptsClause jjtn000 = new ASTAdaptsClause(JJTADAPTSCLAUSE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	ASTSignatureToCall sToCall ;
}
{/*@bgen(jjtree) AdaptsClause */
        try {
/*@egen*/	
	(
	try
	{
	"adapts" jjtn000.identifierInterface = Identifier() "with"  jjtn000.identifierClass = Identifier() sToCall = SignatureToCall(){jjtn000.signatureToCall.add(sToCall);} ( "," sToCall = SignatureToCall() {jjtn000.signatureToCall.add(sToCall);} )*
	}
	catch(ParseException e)
	{
		
		error(" malform adapts clause in class declaration");
	}
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{return jjtn000;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

ASTSignatureToCall SignatureToCall():
{/*@bgen(jjtree) SignatureToCall */
  ASTSignatureToCall jjtn000 = new ASTSignatureToCall(JJTSIGNATURETOCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) SignatureToCall */
        try {
/*@egen*/
	(jjtn000.signature = MethodSignature() "to" jjtn000.methodCall = MethodCall() )/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{return jjtn000;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
	
}

ASTClassModifier ClassModifier():
{/*@bgen(jjtree) ClassModifier */
  ASTClassModifier jjtn000 = new ASTClassModifier(JJTCLASSMODIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ClassModifier */
        try {
/*@egen*/
	(
	"final"  { jjtn000.modifier    |= UCSYClassAttribute.FINAL ;}
	|
	"abstract" { jjtn000.modifier  |= UCSYClassAttribute.ABSTRACT;}
	|
	"singleton" { jjtn000.modifier |= UCSYClassAttribute.SINGLETON;}
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
	
}

ASTClassBody ClassBody():
{/*@bgen(jjtree) ClassBody */
 ASTClassBody jjtn000 = new ASTClassBody(JJTCLASSBODY);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/ASTMemberDeclaration m;}
{/*@bgen(jjtree) ClassBody */
        try {
/*@egen*/
	(
	"{"
	( m = MemberDeclaration(){jjtn000.member.add(m);} )	*
	"}"
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

ASTFreeClassDeclaration FreeClassDeclaration():
{/*@bgen(jjtree) FreeClassDeclaration */
  ASTFreeClassDeclaration jjtn000 = new ASTFreeClassDeclaration(JJTFREECLASSDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FreeClassDeclaration */
        try {
/*@egen*/
	(
	try
	{
	jjtn000.freeClassHeader = FreeClassHeader()
	}
	catch(ParseException e)
	{
		error("Invalid free class header declaration");
		skipBefore(LBRACE);
	}
	jjtn000.freeClassBody = FreeClassBody()
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{	
		return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

ASTFreeClassHeader FreeClassHeader():
{/*@bgen(jjtree) FreeClassHeader */
 ASTFreeClassHeader jjtn000 = new ASTFreeClassHeader(JJTFREECLASSHEADER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token f,p;}
{/*@bgen(jjtree) FreeClassHeader */
        try {
/*@egen*/
	(
	"free" "class" f=<IDENTIFIER>{jjtn000.freeClassToken = f;} "of" p=<IDENTIFIER>{jjtn000.parentClassToken = p;}
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

ASTFreeClassBody FreeClassBody():
{/*@bgen(jjtree) FreeClassBody */
        ASTFreeClassBody jjtn000 = new ASTFreeClassBody(JJTFREECLASSBODY);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	ASTMethodDeclaration m;
}
{/*@bgen(jjtree) FreeClassBody */
        try {
/*@egen*/
	(	
	"{"
	( [AccessModifier()]  m = MethodDeclaration() {jjtn000.methodDeclarationList.add(m);})+
	"}"
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

ASTMemberDeclaration MemberDeclaration():
{/*@bgen(jjtree) MemberDeclaration */
  ASTMemberDeclaration jjtn000 = new ASTMemberDeclaration(JJTMEMBERDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MemberDeclaration */
        try {
/*@egen*/
	(
	[jjtn000.accessModifier =  AccessModifier()]
	
	(    LOOKAHEAD( (MethodModifier()) * <IDENTIFIER> "(")
		jjtn000.memberDeclaration = ConstructorDeclaration()
	|
		LOOKAHEAD( AbstractMethodDeclaration())
		jjtn000.memberDeclaration = AbstractMethodDeclaration()
	|
		LOOKAHEAD( MethodDeclarationLookAhead())
		jjtn000.memberDeclaration = MethodDeclaration()
	
	|
		jjtn000.memberDeclaration = FieldDeclaration()
	 
	|
		jjtn000.memberDeclaration = DelegateDeclaration()
	)
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/	
}

ASTFunctorDeclaration FunctorDeclaration():
{/*@bgen(jjtree) FunctorDeclaration */
 ASTFunctorDeclaration jjtn000 = new ASTFunctorDeclaration(JJTFUNCTORDECLARATION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) FunctorDeclaration */
        try {
/*@egen*/
	(
	 try
	 {
	 "functor" jjtn000.returnType = ReturnType() t=<IDENTIFIER>{jjtn000.t=t;} jjtn000.formalParameters = FormalParameters()
	 }
	 catch(ParseException e)
	 {
	 	error("malformed functor declaration ");
	 	skipto(SEMICOLON);
	 }
	 )/*@bgen(jjtree)*/
         {
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
         }
/*@egen*/
	 {
	 	return jjtn000;
	 }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


ASTInterfaceDeclaration InterfaceDeclaration():
{/*@bgen(jjtree) InterfaceDeclaration */
  ASTInterfaceDeclaration jjtn000 = new ASTInterfaceDeclaration(JJTINTERFACEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) InterfaceDeclaration */
        try {
/*@egen*/
	(
	try
	{
	jjtn000.interfaceHeader = InterfaceHeader()
	}
	catch(ParseException e)
	{
		
		error( " in interface declaration clause");
		skipBefore(LBRACE);
	}
	jjtn000.interfaceBody = InterfaceBody()
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

ASTInterfaceHeader InterfaceHeader():
{/*@bgen(jjtree) InterfaceHeader */
 ASTInterfaceHeader jjtn000 = new ASTInterfaceHeader(JJTINTERFACEHEADER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t, k, j;}
{/*@bgen(jjtree) InterfaceHeader */
        try {
/*@egen*/
	(
	"interface" t =<IDENTIFIER>{jjtn000.t = t;} ["inherits" k=<IDENTIFIER>{jjtn000.interfaceParentName.add(k.image);} ("," j=<IDENTIFIER>{jjtn000.interfaceParentName.add(j.image);})* ]
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

ASTInterfaceBody InterfaceBody():
{/*@bgen(jjtree) InterfaceBody */
ASTInterfaceBody jjtn000 = new ASTInterfaceBody(JJTINTERFACEBODY);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
/*@egen*/
ASTInterfaceMethodDeclaration d;
}
{/*@bgen(jjtree) InterfaceBody */
        try {
/*@egen*/
	(
	"{"	
		(d = InterfaceMethodDeclaration() {jjtn000.interfaceMethodDeclarationList.add(d);}) *
	"}"	
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

ASTInterfaceMethodDeclaration InterfaceMethodDeclaration():
{/*@bgen(jjtree) InterfaceMethodDeclaration */
  ASTInterfaceMethodDeclaration jjtn000 = new ASTInterfaceMethodDeclaration(JJTINTERFACEMETHODDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) InterfaceMethodDeclaration */
        try {
/*@egen*/
	(
	try
	{
	jjtn000.interfaceMethodHeader = InterfaceMethodHeader() ";"
	}
	catch(ParseException e)
	{
		Token t = getToken(0);	
		error(" in interface method header declaration");
		int lookAhead1[] = {RBRACE};
		int lookAhead2[] = {BOOLEAN,CHAR,INTEGER,FLOAT,DOUBLE,VOID,BYTE,SHORT,LONG,STRING,AT,IDENTIFIER};
		int lookAhead3[] = {CLASS,FINAL,SINGLETON,META,FUNCTOR,INTERFACE,FREE,EOF};
		
		
		
		int d1 = getTokenDistanceSet( lookAhead1 );
		///System.out.println ("Call d1");
		int d2 = getTokenDistanceSet( lookAhead2 );
		///System.out.println ("D1 "+d1+" d2 "+d2+" d3 ");
		int d3 = getTokenDistanceSet( lookAhead3 );
		//System.out.println ("Going Goingeee");
		
		
		
		if(d1< d2)
		{
			///System.out.println ("Go lookAhead1 2");
			skipBeforeSet( lookAhead1 );
			return null;
			
		}
		else if(d2 < d3 )
		{
			///System.out.println ("Case 3");
			skipBeforeSet( lookAhead2 );
			label_11:
    		while (true) {
      		InterfaceMethodDeclaration();
      		switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      		case BOOLEAN:
      		case CHAR:
      		case INTEGER:
     		case FLOAT:
      		case DOUBLE:
      		case VOID:
      		case BYTE:
      		case SHORT:
      		case LONG:
      		case STRING:
      		case IDENTIFIER:
      		case AT:
        	;
        	break;
      		default:
        	jj_la1[21] = jj_gen;
        	break label_11;
      		}//switch
      
      	 }//while
      	}
      	 else
      	 {
      	 	skipBeforeSet( lookAhead3 );
      	 	label_2:
      		while (true) {
        	switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        	case CLASS:
        	case FINAL:
        	case SINGLETON:
        	case META:
        	case FUNCTOR:
        	case INTERFACE:
        	case ABSTRACT:
        	case FREE:
          	;
          	break;
        	default:
          	jj_la1[2] = jj_gen;
          	break label_2;
        	}
        TypeDeclaration();
      }
      jj_consume_token(0);	 
	}
	}
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{return jjtn000;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

ASTMetaClassDeclaration MetaClassDeclaration():
{/*@bgen(jjtree) MetaClassDeclaration */
  ASTMetaClassDeclaration jjtn000 = new ASTMetaClassDeclaration(JJTMETACLASSDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MetaClassDeclaration */
        try {
/*@egen*/
	(
	try
	{
		jjtn000.metaClassHeader = MetaClassHeader()
	}
	catch(ParseException e)
	{
		
		error(" invalid meta class header declaration");
		skipBefore(LBRACE);
	}
	jjtn000.metaClassBody = MetaClassBody()
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

ASTInterfaceMethodHeader InterfaceMethodHeader():
{/*@bgen(jjtree) InterfaceMethodHeader */
        ASTInterfaceMethodHeader jjtn000 = new ASTInterfaceMethodHeader(JJTINTERFACEMETHODHEADER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) InterfaceMethodHeader */
        try {
/*@egen*/
	(
	jjtn000.returnType = ReturnType() t=<IDENTIFIER>{jjtn000.t = t;} jjtn000.formalParameters = FormalParameters() 
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

ASTAbstractMethodDeclaration AbstractMethodDeclaration():
{/*@bgen(jjtree) AbstractMethodDeclaration */
        ASTAbstractMethodDeclaration jjtn000 = new ASTAbstractMethodDeclaration(JJTABSTRACTMETHODDECLARATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) AbstractMethodDeclaration */
        try {
/*@egen*/
	(
	try
	{
	"abstract"{ jjtn000.modifier = UCSYClassAttribute.ABSTRACT;} jjtn000.returnType = ReturnType() t=<IDENTIFIER>{jjtn000.t=t;} jjtn000.formalParameters = FormalParameters() ";"
	}
	catch(ParseException e)
	{
		error(" invalid abstract method declaration");
		skiptoOrEndOfLine(SEMICOLON);
	}
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

ASTMetaClassHeader MetaClassHeader():
{/*@bgen(jjtree) MetaClassHeader */
 ASTMetaClassHeader jjtn000 = new ASTMetaClassHeader(JJTMETACLASSHEADER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t,k;}
{/*@bgen(jjtree) MetaClassHeader */
        try {
/*@egen*/
	(
	"meta" "class" t = <IDENTIFIER>{jjtn000.t=t;} [ "inherits" jjtn000.parent=<IDENTIFIER>] "default" k=<IDENTIFIER>{jjtn000.defaultClassName=k.image;}
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

ASTMetaClassBody MetaClassBody():
{/*@bgen(jjtree) MetaClassBody */
        ASTMetaClassBody jjtn000 = new ASTMetaClassBody(JJTMETACLASSBODY);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	ASTAbstractConstructor ac;
	ASTInterfaceMethodDeclaration in;
}
{/*@bgen(jjtree) MetaClassBody */
        try {
/*@egen*/
	(
	"{"
	
		(	
			
			ac = AbstractConstructor(){jjtn000.abstractConstructorList.add(ac);}
			|
			
			in = InterfaceMethodDeclaration() {jjtn000.interfaceMethodDeclarationList.add(in);}
			
			
		) +
	
		
	"}"	
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
	
}

ASTAbstractConstructor AbstractConstructor():
{/*@bgen(jjtree) AbstractConstructor */
  ASTAbstractConstructor jjtn000 = new ASTAbstractConstructor(JJTABSTRACTCONSTRUCTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) AbstractConstructor */
        try {
/*@egen*/	
	(
	try
	{
	jjtn000.t= "new" jjtn000.formalParameters = FormalParameters() ";"
	}
	catch(ParseException e)
	{
		
		error( " invalid abstract constructor");
		//throw e;
		
		int lookAhead1[] = {RBRACE};
		int lookAhead2[] = {NEW,BOOLEAN,CHAR,INTEGER,FLOAT,DOUBLE,VOID,BYTE,SHORT,LONG,STRING,AT,IDENTIFIER};
		
		int d1 = getTokenDistanceSet( lookAhead1 ); 
		int d2 = getTokenDistanceSet( lookAhead2 );	
		
		if(d1<d2)
		{
			skipBeforeSet(lookAhead1);
			
		}
		else
		{	skipBeforeSet(lookAhead2);
		}
	}
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
void MethodDeclarationLookAhead()     :
{}
{
	( MethodModifier()) * ReturnType() <IDENTIFIER> "("
}

void FunctorDeclarationLookAhead()     :
{}
{
	 "functor" ReturnType() <IDENTIFIER> "("
}

ASTAccessModifier AccessModifier():
{/*@bgen(jjtree) AccessModifier */
  ASTAccessModifier jjtn000 = new ASTAccessModifier(JJTACCESSMODIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) AccessModifier */
        try {
/*@egen*/
	(
	"public"     {jjtn000.modifier |= UCSYClassAttribute.PUBLIC;}
	|
	"private"    {jjtn000.modifier |= UCSYClassAttribute.PRIVATE;}
	|
	"protected"  {jjtn000.modifier |= UCSYClassAttribute.PROTECTED;}
	|
	"internal"   {jjtn000.modifier |= UCSYClassAttribute.INTERNAL;}
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

ASTMethodModifier MethodModifier():
{/*@bgen(jjtree) MethodModifier */
  ASTMethodModifier jjtn000 = new ASTMethodModifier(JJTMETHODMODIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MethodModifier */
        try {
/*@egen*/
	 
	(
	 "static"	   {jjtn000.modifier |= UCSYClassAttribute.STATIC;}
	| "override"   {jjtn000.modifier |= UCSYClassAttribute.OVERRIDE;}
	| "final"	   {jjtn000.modifier |= UCSYClassAttribute.FINAL;}
	| "abstract"   {jjtn000.modifier |= UCSYClassAttribute.ABSTRACT;}	
	| "multi"      {jjtn000.modifier |= UCSYClassAttribute.MULTI;}
	| "rebindable" {jjtn000.modifier |= UCSYClassAttribute.REBINDABLE;}
	| "native"     {jjtn000.modifier |= UCSYClassAttribute.NATIVE;}
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
ASTFieldModifier FieldModifier():
{/*@bgen(jjtree) FieldModifier */
  ASTFieldModifier jjtn000 = new ASTFieldModifier(JJTFIELDMODIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FieldModifier */
        try {
/*@egen*/
	(
	"static" {jjtn000.fieldModifier |= UCSYClassAttribute.STATIC;}
	|
	 "final" {jjtn000.fieldModifier |= UCSYClassAttribute.FINAL; }	
	 )/*@bgen(jjtree)*/
         {
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
         }
/*@egen*/
	 {
	 	return jjtn000;
	 }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
ASTConstructorDeclaration ConstructorDeclaration():
{/*@bgen(jjtree) ConstructorDeclaration */
        ASTConstructorDeclaration jjtn000 = new ASTConstructorDeclaration(JJTCONSTRUCTORDECLARATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t = null;
	ASTStatement stat;
}
{/*@bgen(jjtree) ConstructorDeclaration */
        try {
/*@egen*/
	(
	try
	{
		
	[jjtn000.methodModifier = MethodModifier()] t=<IDENTIFIER>{jjtn000.t= t;} jjtn000.formalParameters = FormalParameters()
	}
	catch(ParseException e)
	{
		error("Ivalid constructor header declaration");
		
		skipBefore(LBRACE);
	}
	"{"
		(
		LOOKAHEAD( (("this"|"super") Arguments() ))
		
		(jjtn000.explicitConstructorCall = ExplicitConstructorCall()
		(stat= Statement(){jjtn000.statementList.add(stat);} ) *
		)
		|
		(stat= Statement(){jjtn000.statementList.add(stat);} ) *
		)
	"}"
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

ASTExplicitConstructorCall ExplicitConstructorCall():
{/*@bgen(jjtree) ExplicitConstructorCall */
  ASTExplicitConstructorCall jjtn000 = new ASTExplicitConstructorCall(JJTEXPLICITCONSTRUCTORCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) ExplicitConstructorCall */
        try {
/*@egen*/
	(
	("this" {jjtn000.thisCall = true;}| "super"{jjtn000.superCall= true;} ) jjtn000.arguments = Arguments() ";"
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

ASTFieldDeclaration FieldDeclaration():
{/*@bgen(jjtree) FieldDeclaration */
  ASTFieldDeclaration jjtn000 = new ASTFieldDeclaration(JJTFIELDDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FieldDeclaration */
        try {
/*@egen*/
	(
	try
	{
		LOOKAHEAD( FunctorDeclarationLookAhead()) jjtn000.functorDeclaration = FunctorDeclaration() ";"
	|
		jjtn000.normalFieldDeclaration = NormalFieldDeclaration()	
	}
	catch(ParseException e)
	{
		error("Incorrect field or functor declaration");
		skiptoOrEndOfLine( SEMICOLON );
	}
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
		
}

ASTNormalFieldDeclaration NormalFieldDeclaration():
{/*@bgen(jjtree) NormalFieldDeclaration */
ASTNormalFieldDeclaration jjtn000 = new ASTNormalFieldDeclaration(JJTNORMALFIELDDECLARATION);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
/*@egen*/
ASTFieldModifier m;
ASTVariableDeclarator varDecl;
}
{/*@bgen(jjtree) NormalFieldDeclaration */
        try {
/*@egen*/
	( (m =FieldModifier(){jjtn000.fieldModifier.add(m);}) * jjtn000.type = Type() varDecl = VariableDeclarator() {jjtn000.variableDeclarator.add(varDecl);}("," varDecl = VariableDeclarator() {jjtn000.variableDeclarator.add(varDecl);}) * ";" )/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{return jjtn000;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

ASTDelegateDeclaration DelegateDeclaration():
{/*@bgen(jjtree) DelegateDeclaration */
  ASTDelegateDeclaration jjtn000 = new ASTDelegateDeclaration(JJTDELEGATEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DelegateDeclaration */
        try {
/*@egen*/
	(
	
	try
	{
	 "delegate" jjtn000.type = Type() jjtn000.t = <IDENTIFIER> 
	( 
	  		jjtn000.delegateClause = HandleAllClause()
	  		
		|   
			jjtn000.delegateClause = ForwardsClause()
	 	|   
	 		jjtn000.delegateClause = DecoratesClause()
	
	)
	";"
	}
	catch(ParseException e)
	{
		error("incorrect delegat declaration");
		skiptoOrEndOfLine(SEMICOLON);
		
	}			
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

ASTHandleAllClause HandleAllClause():
{/*@bgen(jjtree) HandleAllClause */
  ASTHandleAllClause jjtn000 = new ASTHandleAllClause(JJTHANDLEALLCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) HandleAllClause */
        try {
/*@egen*/
	"handles" "all"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

ASTForwardsClause ForwardsClause():
{/*@bgen(jjtree) ForwardsClause */
        ASTForwardsClause jjtn000 = new ASTForwardsClause(JJTFORWARDSCLAUSE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	ASTSignatureToCall sToCall;
}
{/*@bgen(jjtree) ForwardsClause */
        try {
/*@egen*/
	(
	"forwards" sToCall = SignatureToCall(){jjtn000.signatureToCallList.add( sToCall );} ( "," sToCall = SignatureToCall(){jjtn000.signatureToCallList.add( sToCall );} )* 
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

ASTDecoratesClause DecoratesClause():
{/*@bgen(jjtree) DecoratesClause */
        ASTDecoratesClause jjtn000 = new ASTDecoratesClause(JJTDECORATESCLAUSE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	ASTBeforeCallOrAfterCall bOrACall;
}
{/*@bgen(jjtree) DecoratesClause */
        try {
/*@egen*/
	(
	"decorates"  bOrACall = BeforeCallOrAfterCall(){jjtn000.beforeCallOrAfterCallList.add( bOrACall );} ( "," bOrACall = BeforeCallOrAfterCall(){jjtn000.beforeCallOrAfterCallList.add( bOrACall );})* 
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

ASTBeforeCallOrAfterCall BeforeCallOrAfterCall():
{/*@bgen(jjtree) BeforeCallOrAfterCall */
  ASTBeforeCallOrAfterCall jjtn000 = new ASTBeforeCallOrAfterCall(JJTBEFORECALLORAFTERCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) BeforeCallOrAfterCall */
        try {
/*@egen*/
	(
	LOOKAHEAD(MethodSignature() "before")
	jjtn000.beforeOrAfter = BeforeCall()
	|
	jjtn000.beforeOrAfter = AfterCall()
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
ASTAfterCall AfterCall():
{/*@bgen(jjtree) AfterCall */
  ASTAfterCall jjtn000 = new ASTAfterCall(JJTAFTERCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) AfterCall */
        try {
/*@egen*/
	jjtn000.methodSignature = MethodSignature()	"after" jjtn000.methodCall = MethodCall()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

ASTBeforeCall BeforeCall():
{/*@bgen(jjtree) BeforeCall */
  ASTBeforeCall jjtn000 = new ASTBeforeCall(JJTBEFORECALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BeforeCall */
        try {
/*@egen*/
	jjtn000.methodSignature = MethodSignature()
	
	"before" jjtn000.methodCall = MethodCall()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

ASTMethodSignature MethodSignature():
{/*@bgen(jjtree) MethodSignature */
  ASTMethodSignature jjtn000 = new ASTMethodSignature(JJTMETHODSIGNATURE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MethodSignature */
        try {
/*@egen*/
	(
	try
	{
	 jjtn000.t = <IDENTIFIER> jjtn000.formalParameters = FormalParameters() 
	}
	catch(ParseException e)
	{
		error(" invalid method signature");
	}
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

ASTMethodCall MethodCall():
{/*@bgen(jjtree) MethodCall */
  ASTMethodCall jjtn000 = new ASTMethodCall(JJTMETHODCALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MethodCall */
        try {
/*@egen*/
	(
	try
	{
	jjtn000.t = <IDENTIFIER> jjtn000.arguments = Arguments() 
	}
	catch(ParseException e)
	{
		error("Invalid method call");
		skiptoOrEndOfLine(RIGHTPARAN);
	}
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

ASTVariableDeclarator VariableDeclarator():
{/*@bgen(jjtree) VariableDeclarator */
  ASTVariableDeclarator jjtn000 = new ASTVariableDeclarator(JJTVARIABLEDECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VariableDeclarator */
        try {
/*@egen*/
	(
	jjtn000.variableDeclaratorId = VariableDeclaratorId() ["=" jjtn000.variableInitializer = VariableInitializer() ]
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

ASTVariableDeclaratorId VariableDeclaratorId():
{/*@bgen(jjtree) VariableDeclaratorId */
ASTVariableDeclaratorId jjtn000 = new ASTVariableDeclaratorId(JJTVARIABLEDECLARATORID);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
/*@egen*/
Token t = null;
}
{/*@bgen(jjtree) VariableDeclaratorId */
        try {
/*@egen*/
	(
	t = <IDENTIFIER> {jjtn000.t = t;}
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

ASTVariableInitializer VariableInitializer():
{/*@bgen(jjtree) VariableInitializer */
  ASTVariableInitializer jjtn000 = new ASTVariableInitializer(JJTVARIABLEINITIALIZER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VariableInitializer */
        try {
/*@egen*/
	(
	try
	{
		jjtn000.expression = ArrayInitializer()
	|
		jjtn000.expression = Expression()
	}
	catch(ParseException e)
	{
		error("incorrect variable intializer");
	}
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

ASTArrayInitializer ArrayInitializer():
{/*@bgen(jjtree) ArrayInitializer */
  ASTArrayInitializer jjtn000 = new ASTArrayInitializer(JJTARRAYINITIALIZER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArrayInitializer */
        try {
/*@egen*/
	(
	try
	{
	"{" VariableInitializer() ("," VariableInitializer() ) * "}"
	}
	catch(ParseException e)
	{
		error("incorrect array intializer");
	}
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{	
		return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

ASTMethodDeclaration MethodDeclaration():
{/*@bgen(jjtree) MethodDeclaration */
  ASTMethodDeclaration jjtn000 = new ASTMethodDeclaration(JJTMETHODDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MethodDeclaration */
        try {
/*@egen*/
	(
	 jjtn000.methodHeader = MethodHeader() jjtn000.block = Block()
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
	
}

ASTMethodHeader MethodHeader():
{/*@bgen(jjtree) MethodHeader */
ASTMethodHeader jjtn000 = new ASTMethodHeader(JJTMETHODHEADER);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
/*@egen*/
Token t=null;
ASTMethodModifier m;
}
{/*@bgen(jjtree) MethodHeader */
        try {
/*@egen*/
	(
	try
	{
	( m = MethodModifier(){jjtn000.modifierList.add(m);} )* jjtn000.returnType = ReturnType() jjtn000.t = <IDENTIFIER> jjtn000.formalParameters = FormalParameters()
	}
	catch(ParseException e)
	{
		error(" incorrect method header declaration");
		skiptoOrEndOfLine(RIGHTPARAN);
	}
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

ASTFormalParameters FormalParameters():
{/*@bgen(jjtree) FormalParameters */
        ASTFormalParameters jjtn000 = new ASTFormalParameters(JJTFORMALPARAMETERS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	ASTFormalParameter par;
}
{/*@bgen(jjtree) FormalParameters */
        try {
/*@egen*/
	(
	try
	{
	"(" [ par = FormalParameter() {jjtn000.formalParameterList.add( par );} (","par = FormalParameter(){jjtn000.formalParameterList.add( par );} )* ]")"
	}
	catch(ParseException e)
	{
		error(" invalid formal parameter declaration");
	}
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
ASTFormalParameter FormalParameter():
{/*@bgen(jjtree) FormalParameter */
  ASTFormalParameter jjtn000 = new ASTFormalParameter(JJTFORMALPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FormalParameter */
        try {
/*@egen*/
	(
	jjtn000.mainType = Type() [":" jjtn000.subType = Type() ] jjtn000.variableDeclaratorId = VariableDeclaratorId() 
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

ASTReturnType ReturnType():
{/*@bgen(jjtree) ReturnType */
  ASTReturnType jjtn000 = new ASTReturnType(JJTRETURNTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ReturnType */
        try {
/*@egen*/
	(
		jjtn000.voidType = VoidType()
	|
		jjtn000.type = Type()
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

ASTVoidType VoidType():
{/*@bgen(jjtree) VoidType */
  ASTVoidType jjtn000 = new ASTVoidType(JJTVOIDTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VoidType */
        try {
/*@egen*/
	(

	"void"
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

ASTType Type():
{/*@bgen(jjtree) Type */
  ASTType jjtn000 = new ASTType(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Type */
        try {
/*@egen*/
	(
	LOOKAHEAD(ReferenceType())
	jjtn000.referenceType =	ReferenceType()
	|
	jjtn000.primitiveType =	PrimitiveType()
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
		
}

ASTPrimitiveType PrimitiveType():
{/*@bgen(jjtree) PrimitiveType */
  ASTPrimitiveType jjtn000 = new ASTPrimitiveType(JJTPRIMITIVETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PrimitiveType */
        try {
/*@egen*/
	(
		jjtn000.t = "boolean" {jjtn000.primitiveType = BOOLEAN;}
	|
		jjtn000.t ="char"    {jjtn000.primitiveType = CHAR ;}
	|
		jjtn000.t ="byte"    {jjtn000.primitiveType = BYTE ;}
	| 
		jjtn000.t ="short"   {jjtn000.primitiveType = SHORT;}
	|
		jjtn000.t ="int"     {jjtn000.primitiveType = INTEGER; }
	| 
		jjtn000.t ="long"    {jjtn000.primitiveType = LONG;}
	|
		jjtn000.t ="float"   {jjtn000.primitiveType = FLOAT;}
	|	
		jjtn000.t ="double"  {jjtn000.primitiveType = DOUBLE;}
	| 
		jjtn000.t ="string"  {jjtn000.primitiveType = STRING;}
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
		
}

ASTReferenceType ReferenceType():
{/*@bgen(jjtree) ReferenceType */
  ASTReferenceType jjtn000 = new ASTReferenceType(JJTREFERENCETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ReferenceType */
        try {
/*@egen*/
	(
		jjtn000.metaInstanceType = MetaInstanceType()
	|
	LOOKAHEAD(ArrayType())
		jjtn000.arrayType = ArrayType()
	|
		jjtn000.classType = ClassType()
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
ASTMetaInstanceType MetaInstanceType():
{/*@bgen(jjtree) MetaInstanceType */
 ASTMetaInstanceType jjtn000 = new ASTMetaInstanceType(JJTMETAINSTANCETYPE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) MetaInstanceType */
        try {
/*@egen*/
	("@" t = <IDENTIFIER>{jjtn000.t= t;})/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
ASTClassType ClassType():
{/*@bgen(jjtree) ClassType */
 ASTClassType jjtn000 = new ASTClassType(JJTCLASSTYPE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t = null;}
{/*@bgen(jjtree) ClassType */
        try {
/*@egen*/
	(
	t  = <IDENTIFIER> { jjtn000.t = t;}
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
	
}

ASTArrayType ArrayType():
{/*@bgen(jjtree) ArrayType */
  ASTArrayType jjtn000 = new ASTArrayType(JJTARRAYTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArrayType */
        try {
/*@egen*/
	(
		jjtn000.primitiveType = PrimitiveType() ("[" "]" {jjtn000.dimensions ++;}) +
	|
		jjtn000.classType = ClassType() ("[" "]" {jjtn000.dimensions++;}) +
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


ASTExpression Expression():
{/*@bgen(jjtree) Expression */
  ASTExpression jjtn000 = new ASTExpression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Expression */
        try {
/*@egen*/
	(
	 jjtn000.exp = ConditionalOrExpression() 
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

ParentExpression ConditionalOrExpression()     :
{
ParentExpression opOne,opTwo,node;

}
{
	node = ConditionalAndExpression() ( "or" opTwo = ConditionalAndExpression()/*@bgen(jjtree) #OrNode( 2) */
                                                                                    {
                                                                                      ASTOrNode jjtn001 = new ASTOrNode(JJTORNODE);
                                                                                      boolean jjtc001 = true;
                                                                                      jjtree.openNodeScope(jjtn001);
                                                                                    }
                                                                                    try {
/*@egen*//*@bgen(jjtree)*/
                                                                                    {
                                                                                      jjtree.closeNodeScope(jjtn001,  2);
                                                                                      jjtc001 = false;
                                                                                    }
/*@egen*/ {jjtn001.opOne = node;jjtn001.opTwo =opTwo;node= jjtn001;}/*@bgen(jjtree)*/
                                                                                    } finally {
                                                                                      if (jjtc001) {
                                                                                        jjtree.closeNodeScope(jjtn001,  2);
                                                                                      }
                                                                                    }
/*@egen*/)*
	{return node;}
}

ParentExpression ConditionalAndExpression()     :
{
ParentExpression opOne,opTwo,node;
}
{
	node = EqualityExpression() ("and" opTwo = EqualityExpression()/*@bgen(jjtree) #AndNode( 2) */
                                                                        {
                                                                          ASTAndNode jjtn001 = new ASTAndNode(JJTANDNODE);
                                                                          boolean jjtc001 = true;
                                                                          jjtree.openNodeScope(jjtn001);
                                                                        }
                                                                        try {
/*@egen*//*@bgen(jjtree)*/
                                                                        {
                                                                          jjtree.closeNodeScope(jjtn001,  2);
                                                                          jjtc001 = false;
                                                                        }
/*@egen*/ {jjtn001.opOne=node;jjtn001.opTwo = opTwo;node = jjtn001;}/*@bgen(jjtree)*/
                                                                        } finally {
                                                                          if (jjtc001) {
                                                                            jjtree.closeNodeScope(jjtn001,  2);
                                                                          }
                                                                        }
/*@egen*/ )*
	{return node;}
}

ParentExpression EqualityExpression()     :
{
ParentExpression opOne,opTwo,node;
}
{
	
	node = InstanceOfExpression() 
	(
		  "==" opTwo = InstanceOfExpression()/*@bgen(jjtree) #EqualNode( 2) */
                                                      {
                                                        ASTEqualNode jjtn001 = new ASTEqualNode(JJTEQUALNODE);
                                                        boolean jjtc001 = true;
                                                        jjtree.openNodeScope(jjtn001);
                                                      }
                                                      try {
/*@egen*//*@bgen(jjtree)*/
                                                      {
                                                        jjtree.closeNodeScope(jjtn001,  2);
                                                        jjtc001 = false;
                                                      }
/*@egen*/ {jjtn001.opOne = node;jjtn001.opTwo = opTwo;node= jjtn001;}/*@bgen(jjtree)*/
                                                      } finally {
                                                        if (jjtc001) {
                                                          jjtree.closeNodeScope(jjtn001,  2);
                                                        }
                                                      }
/*@egen*/
		|
		  "!="	opTwo = InstanceOfExpression()/*@bgen(jjtree) #NotEqualNode( 2) */
                                                       {
                                                         ASTNotEqualNode jjtn002 = new ASTNotEqualNode(JJTNOTEQUALNODE);
                                                         boolean jjtc002 = true;
                                                         jjtree.openNodeScope(jjtn002);
                                                       }
                                                       try {
/*@egen*//*@bgen(jjtree)*/
                                                       {
                                                         jjtree.closeNodeScope(jjtn002,  2);
                                                         jjtc002 = false;
                                                       }
/*@egen*/ {jjtn002.opOne = node;jjtn002.opTwo=opTwo;node= jjtn002;}/*@bgen(jjtree)*/
                                                       } finally {
                                                         if (jjtc002) {
                                                           jjtree.closeNodeScope(jjtn002,  2);
                                                         }
                                                       }
/*@egen*/ 
			 
	)*
	
	{return node;}
}

ParentExpression InstanceOfExpression()     :
{
ParentExpression opOne,node;
ASTType type;

ParentExpression rel,instanceExpressionNode;
}
{
	
	(
	LOOKAHEAD(RelationalExpression() "instanceof") 
	opOne = RelationalExpression() "instanceof" type = Type()/*@bgen(jjtree) #InstanceOfExpression( 2) */
                                                                    {
                                                                      ASTInstanceOfExpression jjtn001 = new ASTInstanceOfExpression(JJTINSTANCEOFEXPRESSION);
                                                                      boolean jjtc001 = true;
                                                                      jjtree.openNodeScope(jjtn001);
                                                                    }
                                                                    try {
/*@egen*//*@bgen(jjtree)*/
                                                                    {
                                                                      jjtree.closeNodeScope(jjtn001,  2);
                                                                      jjtc001 = false;
                                                                    }
/*@egen*/   {jjtn001.opOne = opOne;jjtn001.type=type; node=jjtn001;}/*@bgen(jjtree)*/
                                                                    } finally {
                                                                      if (jjtc001) {
                                                                        jjtree.closeNodeScope(jjtn001,  2);
                                                                      }
                                                                    }
/*@egen*/
	|
	 node =RelationalExpression()
	 )
	 {return node;}
	
	
}


ParentExpression RelationalExpression()     :
{
ParentExpression opOne,opTwo,node;
}
{
	
	node = AdditiveExpression() 
	(
	   ">" opTwo = AdditiveExpression()/*@bgen(jjtree) #GTNode( 2) */
                                            {
                                              ASTGTNode jjtn001 = new ASTGTNode(JJTGTNODE);
                                              boolean jjtc001 = true;
                                              jjtree.openNodeScope(jjtn001);
                                            }
                                            try {
/*@egen*//*@bgen(jjtree)*/
                                            {
                                              jjtree.closeNodeScope(jjtn001,  2);
                                              jjtc001 = false;
                                            }
/*@egen*/ {jjtn001.opOne = node;jjtn001.opTwo = opTwo; node=jjtn001;}/*@bgen(jjtree)*/
                                            } finally {
                                              if (jjtc001) {
                                                jjtree.closeNodeScope(jjtn001,  2);
                                              }
                                            }
/*@egen*/
	 |
	   ">=" opTwo =AdditiveExpression()/*@bgen(jjtree) #GTEqualNode( 2) */
                                            {
                                              ASTGTEqualNode jjtn002 = new ASTGTEqualNode(JJTGTEQUALNODE);
                                              boolean jjtc002 = true;
                                              jjtree.openNodeScope(jjtn002);
                                            }
                                            try {
/*@egen*//*@bgen(jjtree)*/
                                            {
                                              jjtree.closeNodeScope(jjtn002,  2);
                                              jjtc002 = false;
                                            }
/*@egen*/ {jjtn002.opOne = node;jjtn002.opTwo = opTwo; node=jjtn002;}/*@bgen(jjtree)*/
                                            } finally {
                                              if (jjtc002) {
                                                jjtree.closeNodeScope(jjtn002,  2);
                                              }
                                            }
/*@egen*/
	 |
	   "<" opTwo = AdditiveExpression()/*@bgen(jjtree) #LTNode( 2) */
                                            {
                                              ASTLTNode jjtn003 = new ASTLTNode(JJTLTNODE);
                                              boolean jjtc003 = true;
                                              jjtree.openNodeScope(jjtn003);
                                            }
                                            try {
/*@egen*//*@bgen(jjtree)*/
                                            {
                                              jjtree.closeNodeScope(jjtn003,  2);
                                              jjtc003 = false;
                                            }
/*@egen*/ {jjtn003.opOne = node;jjtn003.opTwo = opTwo; node=jjtn003;}/*@bgen(jjtree)*/
                                            } finally {
                                              if (jjtc003) {
                                                jjtree.closeNodeScope(jjtn003,  2);
                                              }
                                            }
/*@egen*/
	 |
	   "<=" opTwo = AdditiveExpression()/*@bgen(jjtree) #LTEqualNode( 2) */
                                             {
                                               ASTLTEqualNode jjtn004 = new ASTLTEqualNode(JJTLTEQUALNODE);
                                               boolean jjtc004 = true;
                                               jjtree.openNodeScope(jjtn004);
                                             }
                                             try {
/*@egen*//*@bgen(jjtree)*/
                                             {
                                               jjtree.closeNodeScope(jjtn004,  2);
                                               jjtc004 = false;
                                             }
/*@egen*/ {jjtn004.opOne = node;jjtn004.opTwo = opTwo; node=jjtn004;}/*@bgen(jjtree)*/
                                             } finally {
                                               if (jjtc004) {
                                                 jjtree.closeNodeScope(jjtn004,  2);
                                               }
                                             }
/*@egen*/
		
	)*
	{return node;}
}

ParentExpression AdditiveExpression()     :
{
ParentExpression opOne,opTwo,node;
}
{
	node = MultiplicativeExpression()
	(
	      "+" opTwo = MultiplicativeExpression()/*@bgen(jjtree) #PlusNode( 2) */
                                                    {
                                                      ASTPlusNode jjtn001 = new ASTPlusNode(JJTPLUSNODE);
                                                      boolean jjtc001 = true;
                                                      jjtree.openNodeScope(jjtn001);
                                                    }
                                                    try {
/*@egen*//*@bgen(jjtree)*/
                                                    {
                                                      jjtree.closeNodeScope(jjtn001,  2);
                                                      jjtc001 = false;
                                                    }
/*@egen*/{jjtn001.opOne = node;jjtn001.opTwo = opTwo;node = jjtn001;}/*@bgen(jjtree)*/
                                                    } finally {
                                                      if (jjtc001) {
                                                        jjtree.closeNodeScope(jjtn001,  2);
                                                      }
                                                    }
/*@egen*/
		|
		  "-" opTwo = MultiplicativeExpression()/*@bgen(jjtree) #SubtractNode( 2) */
                                                        {
                                                          ASTSubtractNode jjtn002 = new ASTSubtractNode(JJTSUBTRACTNODE);
                                                          boolean jjtc002 = true;
                                                          jjtree.openNodeScope(jjtn002);
                                                        }
                                                        try {
/*@egen*//*@bgen(jjtree)*/
                                                        {
                                                          jjtree.closeNodeScope(jjtn002,  2);
                                                          jjtc002 = false;
                                                        }
/*@egen*/{jjtn002.opOne = node;jjtn002.opTwo = opTwo;node = jjtn002;}/*@bgen(jjtree)*/
                                                        } finally {
                                                          if (jjtc002) {
                                                            jjtree.closeNodeScope(jjtn002,  2);
                                                          }
                                                        }
/*@egen*/
	)*
	{return node;}
}

ParentExpression MultiplicativeExpression()     :
{
ParentExpression opOne,opTwo,node;
}
{
	
	node = UnaryExpression()
	( 
	
		  "*" opTwo = UnaryExpression()/*@bgen(jjtree) #MultiplyNode( 2) */
                                                {
                                                  ASTMultiplyNode jjtn001 = new ASTMultiplyNode(JJTMULTIPLYNODE);
                                                  boolean jjtc001 = true;
                                                  jjtree.openNodeScope(jjtn001);
                                                }
                                                try {
/*@egen*//*@bgen(jjtree)*/
                                                {
                                                  jjtree.closeNodeScope(jjtn001,  2);
                                                  jjtc001 = false;
                                                }
/*@egen*/ {jjtn001.opOne = node;jjtn001.opTwo = opTwo;node = jjtn001;}/*@bgen(jjtree)*/
                                                } finally {
                                                  if (jjtc001) {
                                                    jjtree.closeNodeScope(jjtn001,  2);
                                                  }
                                                }
/*@egen*/ 
		| 
		  "/" opTwo = UnaryExpression()/*@bgen(jjtree) #DivsionNode( 2) */
                                                {
                                                  ASTDivsionNode jjtn002 = new ASTDivsionNode(JJTDIVSIONNODE);
                                                  boolean jjtc002 = true;
                                                  jjtree.openNodeScope(jjtn002);
                                                }
                                                try {
/*@egen*//*@bgen(jjtree)*/
                                                {
                                                  jjtree.closeNodeScope(jjtn002,  2);
                                                  jjtc002 = false;
                                                }
/*@egen*/ {jjtn002.opOne = node;jjtn002.opTwo = opTwo;node = jjtn002;}/*@bgen(jjtree)*/
                                                } finally {
                                                  if (jjtc002) {
                                                    jjtree.closeNodeScope(jjtn002,  2);
                                                  }
                                                }
/*@egen*/ 
		| 
		  "%" opTwo = UnaryExpression()/*@bgen(jjtree) #ModulusNode( 2) */
                                                {
                                                  ASTModulusNode jjtn003 = new ASTModulusNode(JJTMODULUSNODE);
                                                  boolean jjtc003 = true;
                                                  jjtree.openNodeScope(jjtn003);
                                                }
                                                try {
/*@egen*//*@bgen(jjtree)*/
                                                {
                                                  jjtree.closeNodeScope(jjtn003,  2);
                                                  jjtc003 = false;
                                                }
/*@egen*/ {jjtn003.opOne = node;jjtn003.opTwo = opTwo;node = jjtn003;}/*@bgen(jjtree)*/
                                                } finally {
                                                  if (jjtc003) {
                                                    jjtree.closeNodeScope(jjtn003,  2);
                                                  }
                                                }
/*@egen*/ 
	
	) *
	{return node;}
	
}

ParentExpression UnaryExpression()      :
{
	ParentExpression opOne,node;
	ParentExpression unaryNotCast;
}
{
	
	(
	(
			"+" node = UnaryExpression()/*@bgen(jjtree) #UnaryPlusNode( 1) */
                                                    {
                                                      ASTUnaryPlusNode jjtn001 = new ASTUnaryPlusNode(JJTUNARYPLUSNODE);
                                                      boolean jjtc001 = true;
                                                      jjtree.openNodeScope(jjtn001);
                                                    }
                                                    try {
/*@egen*//*@bgen(jjtree)*/
                                                    {
                                                      jjtree.closeNodeScope(jjtn001,  1);
                                                      jjtc001 = false;
                                                    }
/*@egen*/{jjtn001.opOne= node;}/*@bgen(jjtree)*/
                                                    } finally {
                                                      if (jjtc001) {
                                                        jjtree.closeNodeScope(jjtn001,  1);
                                                      }
                                                    }
/*@egen*/
		|
			"-" node = UnaryExpression()/*@bgen(jjtree) #UnaryMinusNode( 1) */
                                                      {
                                                        ASTUnaryMinusNode jjtn002 = new ASTUnaryMinusNode(JJTUNARYMINUSNODE);
                                                        boolean jjtc002 = true;
                                                        jjtree.openNodeScope(jjtn002);
                                                      }
                                                      try {
/*@egen*//*@bgen(jjtree)*/
                                                      {
                                                        jjtree.closeNodeScope(jjtn002,  1);
                                                        jjtc002 = false;
                                                      }
/*@egen*/  {jjtn002.opOne = node;}/*@bgen(jjtree)*/
                                                      } finally {
                                                        if (jjtc002) {
                                                          jjtree.closeNodeScope(jjtn002,  1);
                                                        }
                                                      }
/*@egen*/
	)
	|
		node = UnaryExpressionNotCast()
	)
		{return node;}
	
	
}

ParentExpression UnaryExpressionNotCast()     :
{
	ParentExpression opOne;
	ParentExpression primaryExpression;
	ParentExpression node;
}
{
	(
		"not" node = UnaryExpression()/*@bgen(jjtree) #NotNode( 1) */
                                              {
                                                ASTNotNode jjtn001 = new ASTNotNode(JJTNOTNODE);
                                                boolean jjtc001 = true;
                                                jjtree.openNodeScope(jjtn001);
                                              }
                                              try {
/*@egen*//*@bgen(jjtree)*/
                                              {
                                                jjtree.closeNodeScope(jjtn001,  1);
                                                jjtc001 = false;
                                              }
/*@egen*/{jjtn001.opOne = node;node=jjtn001;}/*@bgen(jjtree)*/
                                              } finally {
                                                if (jjtc001) {
                                                  jjtree.closeNodeScope(jjtn001,  1);
                                                }
                                              }
/*@egen*/
	|
		LOOKAHEAD(CastLookAhead())
		node = CastExpression()/*@bgen(jjtree) #CastNode( 1) */
                                       {
                                         ASTCastNode jjtn002 = new ASTCastNode(JJTCASTNODE);
                                         boolean jjtc002 = true;
                                         jjtree.openNodeScope(jjtn002);
                                       }
                                       try {
/*@egen*//*@bgen(jjtree)*/
                                       {
                                         jjtree.closeNodeScope(jjtn002,  1);
                                         jjtc002 = false;
                                       }
/*@egen*/{jjtn002.opOne = node;node=jjtn002;}/*@bgen(jjtree)*/
                                       } finally {
                                         if (jjtc002) {
                                           jjtree.closeNodeScope(jjtn002,  1);
                                         }
                                       }
/*@egen*/
	|
	    node = PrimaryExpression()
	 )
	{return node;}
}

void CastLookAhead()     :
{}
{
	LOOKAHEAD(2)
	"(" PrimitiveType()
	|
	  LOOKAHEAD("(" Name() "[")
	"(" Name() "[" "]"
	|
	"(" Name() ")" 
}
ParentExpression CastExpression():
{/*@bgen(jjtree) CastExpression */
  ASTCastExpression jjtn000 = new ASTCastExpression(JJTCASTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/

}
{/*@bgen(jjtree) CastExpression */
        try {
/*@egen*/
	(
	 LOOKAHEAD("(" PrimitiveType())
  "(" jjtn000.type =Type() ")" jjtn000.expression = UnaryExpression()
|
  "(" jjtn000.type = Type() ")" jjtn000.expression = UnaryExpressionNotCast() 
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {return jjtn000;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

ASTPrimaryExpression PrimaryExpression():
{/*@bgen(jjtree) PrimaryExpression */
  ASTPrimaryExpression jjtn000 = new ASTPrimaryExpression(JJTPRIMARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/

}
{/*@bgen(jjtree) PrimaryExpression */
        try {
/*@egen*/
	(
	PrimaryPrefix() ( LOOKAHEAD(2)/*@bgen(jjtree) #PrimarySuffix( 2) */
                                       {
                                         ASTPrimarySuffix jjtn001 = new ASTPrimarySuffix(JJTPRIMARYSUFFIX);
                                         boolean jjtc001 = true;
                                         jjtree.openNodeScope(jjtn001);
                                       }
                                       try {
/*@egen*/ PrimarySuffix()/*@bgen(jjtree)*/
                                       } catch (Throwable jjte001) {
                                         if (jjtc001) {
                                           jjtree.clearNodeScope(jjtn001);
                                           jjtc001 = false;
                                         } else {
                                           jjtree.popNode();
                                         }
                                         if (jjte001 instanceof RuntimeException) {
                                           throw (RuntimeException)jjte001;
                                         }
                                         if (jjte001 instanceof ParseException) {
                                           throw (ParseException)jjte001;
                                         }
                                         throw (Error)jjte001;
                                       } finally {
                                         if (jjtc001) {
                                           jjtree.closeNodeScope(jjtn001,  2);
                                         }
                                       }
/*@egen*/)*
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
 
}
void PrimaryPrefix()     :
{ASTName name ;Token t;}
{
LOOKAHEAD(Name()) name =Name()/*@bgen(jjtree) #NamePrimaryPrefix( 1) */
                               {
                                 ASTNamePrimaryPrefix jjtn001 = new ASTNamePrimaryPrefix(JJTNAMEPRIMARYPREFIX);
                                 boolean jjtc001 = true;
                                 jjtree.openNodeScope(jjtn001);
                               }
                               try {
/*@egen*//*@bgen(jjtree)*/
                               {
                                 jjtree.closeNodeScope(jjtn001,  1);
                                 jjtc001 = false;
                               }
/*@egen*/ {jjtn001.name = name;}/*@bgen(jjtree)*/
                               } finally {
                                 if (jjtc001) {
                                   jjtree.closeNodeScope(jjtn001,  1);
                                 }
                               }
/*@egen*/
|/*@bgen(jjtree) LiteralPrimaryPrefix */
  {
    ASTLiteralPrimaryPrefix jjtn002 = new ASTLiteralPrimaryPrefix(JJTLITERALPRIMARYPREFIX);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
  }
  try {
/*@egen*/
  Literal()/*@bgen(jjtree)*/
  } catch (Throwable jjte002) {
    if (jjtc002) {
      jjtree.clearNodeScope(jjtn002);
      jjtc002 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte002 instanceof RuntimeException) {
      throw (RuntimeException)jjte002;
    }
    if (jjte002 instanceof ParseException) {
      throw (ParseException)jjte002;
    }
    throw (Error)jjte002;
  } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
  }
/*@egen*/
|
  LOOKAHEAD( "this" )
  
  t = "this"/*@bgen(jjtree) ThisPrimaryPrefix */
             {
               ASTThisPrimaryPrefix jjtn003 = new ASTThisPrimaryPrefix(JJTTHISPRIMARYPREFIX);
               boolean jjtc003 = true;
               jjtree.openNodeScope(jjtn003);
             }
             try {
/*@egen*//*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn003, true);
               jjtc003 = false;
             }
/*@egen*/ {jjtn003.t = t;}/*@bgen(jjtree)*/
             } finally {
               if (jjtc003) {
                 jjtree.closeNodeScope(jjtn003, true);
               }
             }
/*@egen*/
|
  t="super"/*@bgen(jjtree) SuperPrimaryPrefix */
             {
               ASTSuperPrimaryPrefix jjtn004 = new ASTSuperPrimaryPrefix(JJTSUPERPRIMARYPREFIX);
               boolean jjtc004 = true;
               jjtree.openNodeScope(jjtn004);
             }
             try {
/*@egen*//*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn004, true);
               jjtc004 = false;
             }
/*@egen*/  {jjtn004.t = t;}/*@bgen(jjtree)*/
             } finally {
               if (jjtc004) {
                 jjtree.closeNodeScope(jjtn004, true);
               }
             }
/*@egen*/
|
  "(" Expression()/*@bgen(jjtree) #ParenthesePrimaryPrefix( 1) */
                   {
                     ASTParenthesePrimaryPrefix jjtn005 = new ASTParenthesePrimaryPrefix(JJTPARENTHESEPRIMARYPREFIX);
                     boolean jjtc005 = true;
                     jjtree.openNodeScope(jjtn005);
                   }
                   try {
/*@egen*/ ")"/*@bgen(jjtree)*/
                   } finally {
                     if (jjtc005) {
                       jjtree.closeNodeScope(jjtn005,  1);
                     }
                   }
/*@egen*/
|/*@bgen(jjtree) #AllocationPrimaryPrefix( 1) */
  {
    ASTAllocationPrimaryPrefix jjtn006 = new ASTAllocationPrimaryPrefix(JJTALLOCATIONPRIMARYPREFIX);
    boolean jjtc006 = true;
    jjtree.openNodeScope(jjtn006);
  }
  try {
/*@egen*/
  AllocationExpression()/*@bgen(jjtree)*/
  } catch (Throwable jjte006) {
    if (jjtc006) {
      jjtree.clearNodeScope(jjtn006);
      jjtc006 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte006 instanceof RuntimeException) {
      throw (RuntimeException)jjte006;
    }
    if (jjte006 instanceof ParseException) {
      throw (ParseException)jjte006;
    }
    throw (Error)jjte006;
  } finally {
    if (jjtc006) {
      jjtree.closeNodeScope(jjtn006,  1);
    }
  }
/*@egen*/

 
}

void PrimarySuffix()     :
{Token t;}
{
  "[" Expression()/*@bgen(jjtree) #ArrayExpressionPrimarySuffix( 1) */
                   {
                     ASTArrayExpressionPrimarySuffix jjtn001 = new ASTArrayExpressionPrimarySuffix(JJTARRAYEXPRESSIONPRIMARYSUFFIX);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
                   }
                   try {
/*@egen*/ "]"/*@bgen(jjtree)*/
                   } finally {
                     if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001,  1);
                     }
                   }
/*@egen*/
|
  "." t = <IDENTIFIER>/*@bgen(jjtree) SuffixDotIdentifierNode */
                       {
                         ASTSuffixDotIdentifierNode jjtn002 = new ASTSuffixDotIdentifierNode(JJTSUFFIXDOTIDENTIFIERNODE);
                         boolean jjtc002 = true;
                         jjtree.openNodeScope(jjtn002);
                       }
                       try {
/*@egen*//*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn002, true);
                         jjtc002 = false;
                       }
/*@egen*/ {jjtn002.t = t;}/*@bgen(jjtree)*/
                       } finally {
                         if (jjtc002) {
                           jjtree.closeNodeScope(jjtn002, true);
                         }
                       }
/*@egen*/
|/*@bgen(jjtree) ArgumentsSuffix */
  {
    ASTArgumentsSuffix jjtn003 = new ASTArgumentsSuffix(JJTARGUMENTSSUFFIX);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
  }
  try {
/*@egen*/
  Arguments()/*@bgen(jjtree)*/
  } catch (Throwable jjte003) {
    if (jjtc003) {
      jjtree.clearNodeScope(jjtn003);
      jjtc003 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte003 instanceof RuntimeException) {
      throw (RuntimeException)jjte003;
    }
    if (jjte003 instanceof ParseException) {
      throw (ParseException)jjte003;
    }
    throw (Error)jjte003;
  } finally {
    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003, true);
    }
  }
/*@egen*/   
}

ASTName Name():
{/*@bgen(jjtree) Name */
 ASTName jjtn000 = new ASTName(JJTNAME);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Name */
        try {
/*@egen*/
	(
	t = <IDENTIFIER>{jjtn000.t = t;jjtn000.nameList.add(t.image);} (LOOKAHEAD(2) "." t=<IDENTIFIER>{jjtn000.nameList.add(t.image);}) * 
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
	return jjtn000;
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
	
}

void Literal()     :
{Token t = null;}
{
     t = <INTEGERLITERAL>/*@bgen(jjtree) IntegerLiteral */
                          {
                            ASTIntegerLiteral jjtn001 = new ASTIntegerLiteral(JJTINTEGERLITERAL);
                            boolean jjtc001 = true;
                            jjtree.openNodeScope(jjtn001);
                          }
                          try {
/*@egen*//*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn001, true);
                            jjtc001 = false;
                          }
/*@egen*/ {jjtn001.t = t;}/*@bgen(jjtree)*/
                          } finally {
                            if (jjtc001) {
                              jjtree.closeNodeScope(jjtn001, true);
                            }
                          }
/*@egen*/
     |
     t = <FLOATLITERAL>/*@bgen(jjtree) FloatLiteral */
                         {
                           ASTFloatLiteral jjtn002 = new ASTFloatLiteral(JJTFLOATLITERAL);
                           boolean jjtc002 = true;
                           jjtree.openNodeScope(jjtn002);
                         }
                         try {
/*@egen*//*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn002, true);
                           jjtc002 = false;
                         }
/*@egen*/  {jjtn002.t = t;}/*@bgen(jjtree)*/
                         } finally {
                           if (jjtc002) {
                             jjtree.closeNodeScope(jjtn002, true);
                           }
                         }
/*@egen*/
     |
     t = <CHARLITERAL>/*@bgen(jjtree) CharLiteral */
                         {
                           ASTCharLiteral jjtn003 = new ASTCharLiteral(JJTCHARLITERAL);
                           boolean jjtc003 = true;
                           jjtree.openNodeScope(jjtn003);
                         }
                         try {
/*@egen*//*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn003, true);
                           jjtc003 = false;
                         }
/*@egen*/   {jjtn003.t = t;}/*@bgen(jjtree)*/
                         } finally {
                           if (jjtc003) {
                             jjtree.closeNodeScope(jjtn003, true);
                           }
                         }
/*@egen*/
     |
     t = <STRINGLITERAL>/*@bgen(jjtree) StringLiteral */
                         {
                           ASTStringLiteral jjtn004 = new ASTStringLiteral(JJTSTRINGLITERAL);
                           boolean jjtc004 = true;
                           jjtree.openNodeScope(jjtn004);
                         }
                         try {
/*@egen*//*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn004, true);
                           jjtc004 = false;
                         }
/*@egen*/ {jjtn004.t = t;}/*@bgen(jjtree)*/
                         } finally {
                           if (jjtc004) {
                             jjtree.closeNodeScope(jjtn004, true);
                           }
                         }
/*@egen*/
     
     |
     t = <DOUBLELITERAL>/*@bgen(jjtree) DoubleLiteral */
                          {
                            ASTDoubleLiteral jjtn005 = new ASTDoubleLiteral(JJTDOUBLELITERAL);
                            boolean jjtc005 = true;
                            jjtree.openNodeScope(jjtn005);
                          }
                          try {
/*@egen*//*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn005, true);
                            jjtc005 = false;
                          }
/*@egen*/  {jjtn005.t = t;}/*@bgen(jjtree)*/
                          } finally {
                            if (jjtc005) {
                              jjtree.closeNodeScope(jjtn005, true);
                            }
                          }
/*@egen*/
     |
     t = <LONGLITERAL>/*@bgen(jjtree) LongLiteral */
                        {
                          ASTLongLiteral jjtn006 = new ASTLongLiteral(JJTLONGLITERAL);
                          boolean jjtc006 = true;
                          jjtree.openNodeScope(jjtn006);
                        }
                        try {
/*@egen*//*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn006, true);
                          jjtc006 = false;
                        }
/*@egen*/  {jjtn006.t = t;}/*@bgen(jjtree)*/
                        } finally {
                          if (jjtc006) {
                            jjtree.closeNodeScope(jjtn006, true);
                          }
                        }
/*@egen*/
     |
     
       t="true"/*@bgen(jjtree) BooleanLiteral */
                         {
                           ASTBooleanLiteral jjtn007 = new ASTBooleanLiteral(JJTBOOLEANLITERAL);
                           boolean jjtc007 = true;
                           jjtree.openNodeScope(jjtn007);
                         }
                         try {
/*@egen*//*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn007, true);
                           jjtc007 = false;
                         }
/*@egen*/          {jjtn007.typeName="t";jjtn007.value=true;jjtn007.t = t;}/*@bgen(jjtree)*/
                         } finally {
                           if (jjtc007) {
                             jjtree.closeNodeScope(jjtn007, true);
                           }
                         }
/*@egen*/
     |
       t="false"/*@bgen(jjtree) BooleanLiteral */
                         {
                           ASTBooleanLiteral jjtn008 = new ASTBooleanLiteral(JJTBOOLEANLITERAL);
                           boolean jjtc008 = true;
                           jjtree.openNodeScope(jjtn008);
                         }
                         try {
/*@egen*//*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn008, true);
                           jjtc008 = false;
                         }
/*@egen*/         {jjtn008.typeName="t";jjtn008.value=false;jjtn008.t = t;}/*@bgen(jjtree)*/
                         } finally {
                           if (jjtc008) {
                             jjtree.closeNodeScope(jjtn008, true);
                           }
                         }
/*@egen*/
     |
       t="null"/*@bgen(jjtree) NullLiteral */
                        {
                          ASTNullLiteral jjtn009 = new ASTNullLiteral(JJTNULLLITERAL);
                          boolean jjtc009 = true;
                          jjtree.openNodeScope(jjtn009);
                        }
                        try {
/*@egen*//*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn009, true);
                          jjtc009 = false;
                        }
/*@egen*/         {jjtn009.t= t;}/*@bgen(jjtree)*/
                        } finally {
                          if (jjtc009) {
                            jjtree.closeNodeScope(jjtn009, true);
                          }
                        }
/*@egen*/
       
}

ASTAllocationExpression AllocationExpression():
{/*@bgen(jjtree) AllocationExpression */
  ASTAllocationExpression jjtn000 = new ASTAllocationExpression(JJTALLOCATIONEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AllocationExpression */
     try {
/*@egen*/
     "new"
     (
          LOOKAHEAD(InstanceAllocation())jjtn000.allocationNode = InstanceAllocation()
         |
          jjtn000.allocationNode  =ArrayAllocation()
     )/*@bgen(jjtree)*/
     {
       jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
     }
/*@egen*/
     {
     	return jjtn000;
     }/*@bgen(jjtree)*/
     } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         throw (RuntimeException)jjte000;
       }
       if (jjte000 instanceof ParseException) {
         throw (ParseException)jjte000;
       }
       throw (Error)jjte000;
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
/*@egen*/
}

ASTArrayAllocation ArrayAllocation():
{/*@bgen(jjtree) ArrayAllocation */
  ASTArrayAllocation jjtn000 = new ASTArrayAllocation(JJTARRAYALLOCATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArrayAllocation */
        try {
/*@egen*/
	(
        jjtn000.arrayAllocationNode = InstanceArrayAllocation()
      |
         jjtn000.arrayAllocationNode = PrimitiveArrayAllocation()
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
    	return jjtn000;
   	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
         
}

ASTInstanceArrayAllocation InstanceArrayAllocation():
{/*@bgen(jjtree) InstanceArrayAllocation */
  ASTInstanceArrayAllocation jjtn000 = new ASTInstanceArrayAllocation(JJTINSTANCEARRAYALLOCATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) InstanceArrayAllocation */
     try {
/*@egen*/
     (
     jjtn000.name = Name() jjtn000.dimensionParameter= DimensionParameter()
     )/*@bgen(jjtree)*/
     {
       jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
     }
/*@egen*/
     {
     return jjtn000;
     }/*@bgen(jjtree)*/
     } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         throw (RuntimeException)jjte000;
       }
       if (jjte000 instanceof ParseException) {
         throw (ParseException)jjte000;
       }
       throw (Error)jjte000;
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
/*@egen*/
}

ASTDimensionParameter DimensionParameter():
{/*@bgen(jjtree) DimensionParameter */
ASTDimensionParameter jjtn000 = new ASTDimensionParameter(JJTDIMENSIONPARAMETER);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
/*@egen*/
ASTExpression exp ;
}
{/*@bgen(jjtree) DimensionParameter */
    try {
/*@egen*/
    (
    ( LOOKAHEAD(2)"[" exp = Expression() "]"{jjtn000.expressionList.add(exp);} )+
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
    return jjtn000;
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

ASTPrimitiveArrayAllocation PrimitiveArrayAllocation():
{/*@bgen(jjtree) PrimitiveArrayAllocation */
  ASTPrimitiveArrayAllocation jjtn000 = new ASTPrimitiveArrayAllocation(JJTPRIMITIVEARRAYALLOCATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PrimitiveArrayAllocation */
        try {
/*@egen*/
	(
    jjtn000.primitiveType = PrimitiveType() jjtn000.dimensionParameter = DimensionParameter()
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
    	return jjtn000;
    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

ASTInstanceAllocation InstanceAllocation():
{/*@bgen(jjtree) InstanceAllocation */
  ASTInstanceAllocation jjtn000 = new ASTInstanceAllocation(JJTINSTANCEALLOCATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) InstanceAllocation */
        try {
/*@egen*/
	(
     jjtn000.name = Name()   jjtn000.arguments = Arguments() 
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
    	return jjtn000;
    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

ASTArguments Arguments():
{/*@bgen(jjtree) Arguments */
  ASTArguments jjtn000 = new ASTArguments(JJTARGUMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Arguments */
  try {
/*@egen*/
	
  "(" [ jjtn000.argumentsList = ArgumentsList() ]  ")"/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
  	return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

ASTArgumentsList ArgumentsList():
{/*@bgen(jjtree) ArgumentsList */
 ASTArgumentsList jjtn000 = new ASTArgumentsList(JJTARGUMENTSLIST);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/ASTExpression e;}
{/*@bgen(jjtree) ArgumentsList */
        try {
/*@egen*/
	(
    e =Expression() {jjtn000.expressionList.add(e);}( "," e=Expression(){jjtn000.expressionList.add(e);} )*
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
    	return jjtn000;
    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


ASTStatement Statement():
{/*@bgen(jjtree) Statement */
  ASTStatement jjtn000 = new ASTStatement(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Statement */
                try {
/*@egen*/
		(
		LOOKAHEAD(LabelStatement())
		jjtn000.pStatement = LabelStatement()
		|
		LOOKAHEAD(AssignmentStatementLookAhead())
		try
		{
       	
    	 jjtn000.pStatement = AssignmentStatement() ";"
    	}
    	catch(ParseException e)
    	{
    		error("incorrect assignement statment");
    		skiptoOrEndOfLine(SEMICOLON);
    	}
      |
      	LOOKAHEAD(LocalVariableDeclaration())
    	try
    	{
    	//jjtThis.localVariableDeclaration
    	jjtn000.pStatement = LocalVariableDeclaration() ";"
    	}
    	catch(ParseException e)
    	{
    		error("invalid local variable declaration");
    		skiptoOrEndOfLine(SEMICOLON);
 	   	}
      |	
    	LOOKAHEAD(PrimaryExpression())
    	try
    	{
    	  jjtn000.pStatement = MethodCallStatement() ";"
    	}
    	catch(ParseException e)
    	{
    		error("incorrect method call statement");
    		skiptoOrEndOfLine(SEMICOLON);
    	}
   
    |
    	jjtn000.pStatement = Block()
    |
    	jjtn000.pStatement = EmptyStatement()
    
    |
    	try
    	{
    	jjtn000.pStatement = SwitchStatement()
    	}
    	catch(ParseException e)
    	{
    		error("incorrect switch statement");
    	}
    |
    	try
    	{
    	jjtn000.pStatement = IfStatement()
    	}
    	catch(ParseException e)
    	{
    		error("incorrect if statement");
    	}
    |
    	jjtn000.pStatement = WhileStatement()
    |
    	jjtn000.pStatement = DoStatement()
    |
    	jjtn000.pStatement = ForStatement()
    |
    	jjtn000.pStatement = ReturnStatement()
    |
    	jjtn000.pStatement = ContinueStatement()
    |
    	jjtn000.pStatement = TryStatement()
    | 
    	jjtn000.pStatement = ThrowStatement()
    |
    	jjtn000.pStatement = RebindStatement()
    |
    	 jjtn000.pStatement = BreakStatement()
    |   
    	jjtn000.pStatement  = ExecuteTimesStatement()
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
    	return jjtn000;
    }/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/
}
ASTLabelStatement LabelStatement():
{/*@bgen(jjtree) LabelStatement */
  ASTLabelStatement jjtn000 = new ASTLabelStatement(JJTLABELSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LabelStatement */
        try {
/*@egen*/
	<IDENTIFIER> ":" jjtn000.block = Block()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
ASTBreakStatement BreakStatement():
{/*@bgen(jjtree) BreakStatement */
  ASTBreakStatement jjtn000 = new ASTBreakStatement(JJTBREAKSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) BreakStatement */
        try {
/*@egen*/
	jjtn000.t = "break" [ jjtn000.label = <IDENTIFIER>] ";"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
ASTExecuteTimesStatement ExecuteTimesStatement():
{/*@bgen(jjtree) ExecuteTimesStatement */
  ASTExecuteTimesStatement jjtn000 = new ASTExecuteTimesStatement(JJTEXECUTETIMESSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ExecuteTimesStatement */
        try {
/*@egen*/
	jjtn000.t = "execute" jjtn000.expression =Expression() "times" jjtn000.statementBody = Statement()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/ 
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
ASTMethodCallStatement MethodCallStatement():
{/*@bgen(jjtree) MethodCallStatement */
  ASTMethodCallStatement jjtn000 = new ASTMethodCallStatement(JJTMETHODCALLSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MethodCallStatement */
         try {
/*@egen*/
	
	 jjtn000.primaryExpression = PrimaryExpression()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
}
ASTAssignmentStatement AssignmentStatement():
{/*@bgen(jjtree) AssignmentStatement */
  ASTAssignmentStatement jjtn000 = new ASTAssignmentStatement(JJTASSIGNMENTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AssignmentStatement */
        try {
/*@egen*/	(
	jjtn000.primaryExpression = PrimaryExpression() jjtn000.assignmentOperator = AssignmentOperator() jjtn000.expression = Expression() 
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

//Only used for LookAhead in Statemnt

void AssignmentStatementLookAhead()     :
{}
{
	PrimaryExpression() AssignmentOperator()
}
ASTAssignmentOperator AssignmentOperator():
{/*@bgen(jjtree) AssignmentOperator */
  ASTAssignmentOperator jjtn000 = new ASTAssignmentOperator(JJTASSIGNMENTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AssignmentOperator */
        try {
/*@egen*/
	(
		"="  {jjtn000.operator= UCSYOperator.ASSIGNMENT;}
	|
		"+=" {jjtn000.operator= UCSYOperator.PLUS_ASSIGN;}
	|
		"-=" {jjtn000.operator= UCSYOperator.MINUS_ASSIGN;}
	|
		"*=" {jjtn000.operator= UCSYOperator.MULT_ASSIGN;}
	|
		"/=" {jjtn000.operator= UCSYOperator.DIV_ASSIGN;}
	|
		"%=" {jjtn000.operator= UCSYOperator.MOD_ASSIGN;}
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
ASTBlock Block():
{/*@bgen(jjtree) Block */
        ASTBlock jjtn000 = new ASTBlock(JJTBLOCK);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	ASTStatement s;
}
{/*@bgen(jjtree) Block */
        try {
/*@egen*/
	(
	"{"
		( s = Statement() {jjtn000.statementList.add(s);}) *
	"}"
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
ASTEmptyStatement EmptyStatement():
{/*@bgen(jjtree) EmptyStatement */
  ASTEmptyStatement jjtn000 = new ASTEmptyStatement(JJTEMPTYSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) EmptyStatement */
        try {
/*@egen*/
	";"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

ASTSwitchStatement SwitchStatement():
{/*@bgen(jjtree) SwitchStatement */
        ASTSwitchStatement jjtn000 = new ASTSwitchStatement(JJTSWITCHSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	ASTCaseStatement cs;
}
{/*@bgen(jjtree) SwitchStatement */
        try {
/*@egen*/
	(
	"switch" "(" jjtn000.expression = Expression() ")"	
	"{"
		(cs = CaseStatement() {jjtn000.caseStatementList.add(cs);})+
		
		
		[jjtn000.defaultStatement = DefaultStatement()]
	"}"
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

ASTCaseStatement CaseStatement():
{/*@bgen(jjtree) CaseStatement */
        ASTCaseStatement jjtn000 = new ASTCaseStatement(JJTCASESTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	ASTStatement s;
}
{/*@bgen(jjtree) CaseStatement */
        try {
/*@egen*/
	(
	try
	{
	jjtn000.t ="case" jjtn000.caseExpression = CaseExpression() ":"
		( s =Statement(){jjtn000.statementList.add(s);} )+	
	///"break"";"
	}
	catch(ParseException e)
	{
		error("incorrect case statement");
		int set[] = {CASE,DEFAULT};
		skipBeforeSet(set);
	}
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

ASTCaseExpression CaseExpression():
{/*@bgen(jjtree) CaseExpression */
 ASTCaseExpression jjtn000 = new ASTCaseExpression(JJTCASEEXPRESSION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t = null;}
{/*@bgen(jjtree) CaseExpression */
        try {
/*@egen*/
	(
		 t=<INTEGERLITERAL>/*@bgen(jjtree) IntegerLiteral */
                                   {
                                     ASTIntegerLiteral jjtn001 = new ASTIntegerLiteral(JJTINTEGERLITERAL);
                                     boolean jjtc001 = true;
                                     jjtree.openNodeScope(jjtn001);
                                   }
                                   try {
/*@egen*//*@bgen(jjtree)*/
                                   {
                                     jjtree.closeNodeScope(jjtn001, true);
                                     jjtc001 = false;
                                   }
/*@egen*/{jjtn001.t = t;}/*@bgen(jjtree)*/
                                   } finally {
                                     if (jjtc001) {
                                       jjtree.closeNodeScope(jjtn001, true);
                                     }
                                   }
/*@egen*/
	|
		t=<CHARLITERAL>/*@bgen(jjtree) CharLiteral */
                                 {
                                   ASTCharLiteral jjtn002 = new ASTCharLiteral(JJTCHARLITERAL);
                                   boolean jjtc002 = true;
                                   jjtree.openNodeScope(jjtn002);
                                 }
                                 try {
/*@egen*//*@bgen(jjtree)*/
                                 {
                                   jjtree.closeNodeScope(jjtn002, true);
                                   jjtc002 = false;
                                 }
/*@egen*/  {jjtn002.t = t;}/*@bgen(jjtree)*/
                                 } finally {
                                   if (jjtc002) {
                                     jjtree.closeNodeScope(jjtn002, true);
                                   }
                                 }
/*@egen*/
	|
		t= <IDENTIFIER>/*@bgen(jjtree) CaseIdentifier */
                               {
                                 ASTCaseIdentifier jjtn003 = new ASTCaseIdentifier(JJTCASEIDENTIFIER);
                                 boolean jjtc003 = true;
                                 jjtree.openNodeScope(jjtn003);
                               }
                               try {
/*@egen*//*@bgen(jjtree)*/
                               {
                                 jjtree.closeNodeScope(jjtn003, true);
                                 jjtc003 = false;
                               }
/*@egen*/{jjtn003.t = t;}/*@bgen(jjtree)*/
                               } finally {
                                 if (jjtc003) {
                                   jjtree.closeNodeScope(jjtn003, true);
                                 }
                               }
/*@egen*/
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
ASTDefaultStatement DefaultStatement():
{/*@bgen(jjtree) DefaultStatement */
        ASTDefaultStatement jjtn000 = new ASTDefaultStatement(JJTDEFAULTSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	ASTStatement s ;
}
{/*@bgen(jjtree) DefaultStatement */
        try {
/*@egen*/
	(
	try
	{
	"default" ":" 
		( s =Statement() {jjtn000.statementList.add(s);})+
	}
	catch(ParseException e)
	{
		error("in default statement");
	}
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

ASTIfStatement IfStatement():
{/*@bgen(jjtree) IfStatement */
  ASTIfStatement jjtn000 = new ASTIfStatement(JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IfStatement */
        try {
/*@egen*/
	(
	"if" "(" jjtn000.expression = Expression() ")" jjtn000.thenPartStatement = Statement() 
	[LOOKAHEAD(1) "else" jjtn000.elsePartStatement = Statement()]
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

ASTWhileStatement WhileStatement():
{/*@bgen(jjtree) WhileStatement */
  ASTWhileStatement jjtn000 = new ASTWhileStatement(JJTWHILESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) WhileStatement */
        try {
/*@egen*/
	(
	try
	{
	"while" "(" jjtn000.expression = Expression() ")" jjtn000.statement = Statement()
	}
	catch(ParseException e)
	{
		error("invalid use of while statement");
	}
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
	
}

ASTDoStatement DoStatement():
{/*@bgen(jjtree) DoStatement */
  ASTDoStatement jjtn000 = new ASTDoStatement(JJTDOSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DoStatement */
        try {
/*@egen*/
	(
	try
	{
	"do" jjtn000.statement = Statement() "while" "(" jjtn000.expression = Expression() ")" ";"
	}
	catch(ParseException e)
	{
		error("incorrect do statement");
	}
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/	
}

ASTForStatement ForStatement():
{/*@bgen(jjtree) ForStatement */
  ASTForStatement jjtn000 = new ASTForStatement(JJTFORSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ForStatement */
        try {
/*@egen*/
	(
	try
	{
	jjtn000.t="for" "(" jjtn000.forInitializer = ForInitializer() ";" jjtn000.forExpression = ForExpression()  ";" jjtn000.forUpdator = ForUpdator() ")"
	}
	catch(ParseException e)
	{
		error("incorrect for header");
		skiptoOrEndOfLine(RIGHTPARAN);
	}
	jjtn000.statement = Statement()
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
ASTForInitializer ForInitializer():
{/*@bgen(jjtree) ForInitializer */
  ASTForInitializer jjtn000 = new ASTForInitializer(JJTFORINITIALIZER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ForInitializer */
        try {
/*@egen*/
	(
	try
	{
	[ jjtn000.forInit = ForInit() ]
	}
	catch(ParseException e)
	{
		error("invalid for intitalizing expression");
		skipBefore(SEMICOLON);
	}
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
ASTForExpression ForExpression():
{/*@bgen(jjtree) ForExpression */
  ASTForExpression jjtn000 = new ASTForExpression(JJTFOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ForExpression */
        try {
/*@egen*/
	(
	try
	{
	[ jjtn000.expression = Expression() ]
	}
	catch(ParseException e)
	{
		error("invalid for test expression");
		skipBefore(SEMICOLON);
	}
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
ASTForUpdator ForUpdator():
{/*@bgen(jjtree) ForUpdator */
  ASTForUpdator jjtn000 = new ASTForUpdator(JJTFORUPDATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ForUpdator */
        try {
/*@egen*/
	(
	try
	{
	[ jjtn000.forUpdate = ForUpdate() ]
	}
	catch(ParseException e)
	{
		error("invalid for update staement");
		skipBefore(RIGHTPARAN);
	}
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
ASTForInit ForInit():
{/*@bgen(jjtree) ForInit */
  ASTForInit jjtn000 = new ASTForInit(JJTFORINIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ForInit */
        try {
/*@egen*/
	
	jjtn000.localVariableDeclaration = LocalVariableDeclaration()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

ASTLocalVariableDeclaration LocalVariableDeclaration():
{/*@bgen(jjtree) LocalVariableDeclaration */
        ASTLocalVariableDeclaration jjtn000 = new ASTLocalVariableDeclaration(JJTLOCALVARIABLEDECLARATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	ASTVariableDeclarator varDecl;
}
{/*@bgen(jjtree) LocalVariableDeclaration */
        try {
/*@egen*/
	(
	 jjtn000.type = Type() varDecl = VariableDeclarator(){jjtn000.variableDeclaratorList.add(varDecl);} ( "," varDecl = VariableDeclarator() {jjtn000.variableDeclaratorList.add(varDecl);})* 
	 )/*@bgen(jjtree)*/
         {
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
         }
/*@egen*/
	 {
	 	return jjtn000;
	 }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

ASTForUpdate ForUpdate():
{/*@bgen(jjtree) ForUpdate */
  ASTForUpdate jjtn000 = new ASTForUpdate(JJTFORUPDATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ForUpdate */
        try {
/*@egen*/
	jjtn000.assignmentStatement= AssignmentStatement()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

ASTReturnStatement ReturnStatement():
{/*@bgen(jjtree) ReturnStatement */
  ASTReturnStatement jjtn000 = new ASTReturnStatement(JJTRETURNSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ReturnStatement */
        try {
/*@egen*/
	(
	try
	{
	jjtn000.t = "return" [jjtn000.expression = Expression()] ";"
	}
	catch(ParseException e )
	{
		error("invalid return statement");
		skiptoOrEndOfLine(SEMICOLON);
	}
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
ASTContinueStatement ContinueStatement():
{/*@bgen(jjtree) ContinueStatement */
  ASTContinueStatement jjtn000 = new ASTContinueStatement(JJTCONTINUESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ContinueStatement */
        try {
/*@egen*/
	"continue" ";"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{	
		return jjtn000;
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
ASTTryStatement TryStatement():
{/*@bgen(jjtree) TryStatement */
        ASTTryStatement jjtn000 = new ASTTryStatement(JJTTRYSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	ASTCatchStatement cs;
}
{/*@bgen(jjtree) TryStatement */
        try {
/*@egen*/
	(
	"try"
		jjtn000.block = Block()
	(cs = CatchStatement(){jjtn000.catchStatementList.add(cs);})*
	[ "finally" jjtn000.finallyBlock = Block() ]
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
	
}
ASTCatchStatement CatchStatement():
{/*@bgen(jjtree) CatchStatement */
  ASTCatchStatement jjtn000 = new ASTCatchStatement(JJTCATCHSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) CatchStatement */
        try {
/*@egen*/
	("catch" jjtn000.formalParameters = FormalParameters() jjtn000.block = Block() )/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
ASTThrowStatement ThrowStatement():
{/*@bgen(jjtree) ThrowStatement */
  ASTThrowStatement jjtn000 = new ASTThrowStatement(JJTTHROWSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ThrowStatement */
        try {
/*@egen*/
	(
	try
	{
	"throw" jjtn000.expression = Expression() ";"
	}
	catch(ParseException e)
	{
		error("invalid throw satement");
		skiptoOrEndOfLine(SEMICOLON);
	}
	)/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
ASTRebindStatement RebindStatement():
{/*@bgen(jjtree) RebindStatement */
  ASTRebindStatement jjtn000 = new ASTRebindStatement(JJTREBINDSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) RebindStatement */
        try {
/*@egen*/

	"rebind" jjtn000.destinationExpression = Name() "with" jjtn000.rebindMethodNameToken = <IDENTIFIER> "of" jjtn000.rebindClassToken = <IDENTIFIER> ";"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}